{"meta":{"title":"青山","subtitle":"青山の博客","description":"本科 | 计算机科学与技术 ","author":"青山","url":"https://macongmc.github.io","root":"/"},"pages":[{"title":"404","date":"2019-08-10T08:41:10.000Z","updated":"2022-07-24T04:15:35.448Z","comments":true,"path":"404.html","permalink":"https://macongmc.github.io/404.html","excerpt":"","text":""},{"title":"","date":"2022-07-24T04:15:35.513Z","updated":"2022-07-24T04:15:35.513Z","comments":true,"path":"baidu_verify_xxxxxxx.html","permalink":"https://macongmc.github.io/baidu_verify_xxxxxxx.html","excerpt":"","text":"wvlc3L96QK"},{"title":"about","date":"2019-10-24T16:00:00.000Z","updated":"2022-07-24T04:15:35.513Z","comments":true,"path":"about/index.html","permalink":"https://macongmc.github.io/about/index.html","excerpt":"","text":""},{"title":"","date":"2022-07-24T04:15:35.513Z","updated":"2022-07-24T04:15:35.513Z","comments":true,"path":"google1xxxxxxx0.html","permalink":"https://macongmc.github.io/google1xxxxxxx0.html","excerpt":"","text":"google-site-verification: google110e5e5e14c8dcf0.html"},{"title":"archives","date":"2019-10-24T16:00:00.000Z","updated":"2022-07-24T04:15:35.513Z","comments":true,"path":"archives/index.html","permalink":"https://macongmc.github.io/archives/index.html","excerpt":"","text":""},{"title":"留言板","date":"2019-10-24T16:00:00.000Z","updated":"2022-07-24T06:48:47.115Z","comments":true,"path":"contact/index.html","permalink":"https://macongmc.github.io/contact/index.html","excerpt":"","text":"畅所欲言 在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！ 友链 青山の友链信息 博客名称: 青山の博客 博客网址: http://82.157.254.101/ 博客头像: https://s1.ax1x.com/2020/05/17/YRWsYT.png 博客介绍: 越努力，越幸运！"},{"title":"统计","date":"2020-10-31T02:11:28.000Z","updated":"2022-07-24T04:15:35.513Z","comments":true,"path":"census/index.html","permalink":"https://macongmc.github.io/census/index.html","excerpt":"","text":""},{"title":"友链","date":"2019-07-19T08:42:10.000Z","updated":"2022-07-24T04:15:35.513Z","comments":true,"path":"friends/index.html","permalink":"https://macongmc.github.io/friends/index.html","excerpt":"","text":""},{"title":"资源分享","date":"2019-07-19T08:40:27.000Z","updated":"2022-07-24T04:15:35.513Z","comments":true,"path":"resource/index.html","permalink":"https://macongmc.github.io/resource/index.html","excerpt":"","text":""},{"title":"categories","date":"2019-10-24T16:00:00.000Z","updated":"2022-07-24T04:15:35.513Z","comments":true,"path":"categories/index.html","permalink":"https://macongmc.github.io/categories/index.html","excerpt":"","text":""},{"title":"放松一下","date":"2019-08-10T08:41:10.000Z","updated":"2022-07-24T04:15:35.460Z","comments":true,"path":"List/index.html","permalink":"https://macongmc.github.io/List/index.html","excerpt":"","text":"影音资源共享"},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2022-07-24T04:15:35.461Z","comments":true,"path":"List/tools/index.html","permalink":"https://macongmc.github.io/List/tools/index.html","excerpt":"","text":""},{"title":"相册","date":"2022-07-24T04:15:35.454Z","updated":"2022-07-24T04:15:35.454Z","comments":true,"path":"List/galleries/index.html","permalink":"https://macongmc.github.io/List/galleries/index.html","excerpt":"","text":""},{"title":"听听音乐","date":"2019-07-19T08:40:27.000Z","updated":"2022-07-24T04:15:35.460Z","comments":true,"path":"List/music/index.html","permalink":"https://macongmc.github.io/List/music/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-07-19T08:40:27.000Z","updated":"2022-07-24T04:15:35.513Z","comments":true,"path":"tags/index.html","permalink":"https://macongmc.github.io/tags/index.html","excerpt":"","text":""},{"title":"视频","date":"2019-08-10T08:41:10.000Z","updated":"2022-07-24T04:15:35.460Z","comments":true,"path":"List/movies/index.html","permalink":"https://macongmc.github.io/List/movies/index.html","excerpt":"","text":""},{"title":"动漫风景","date":"2022-07-24T04:15:35.456Z","updated":"2022-07-24T04:15:35.456Z","comments":true,"path":"List/galleries/动漫风景/index.html","permalink":"https://macongmc.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""},{"title":"乖巧小狗","date":"2022-07-24T04:15:35.455Z","updated":"2022-07-24T04:15:35.455Z","comments":true,"path":"List/galleries/乖巧小狗/index.html","permalink":"https://macongmc.github.io/List/galleries/%E4%B9%96%E5%B7%A7%E5%B0%8F%E7%8B%97/index.html","excerpt":"","text":""},{"title":"动漫人物","date":"2022-07-24T04:15:35.455Z","updated":"2022-07-24T04:15:35.455Z","comments":true,"path":"List/galleries/动漫人物/index.html","permalink":"https://macongmc.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E4%BA%BA%E7%89%A9/index.html","excerpt":"","text":""},{"title":"二次元风","date":"2022-07-24T04:15:35.455Z","updated":"2022-07-24T04:15:35.455Z","comments":true,"path":"List/galleries/二次元风/index.html","permalink":"https://macongmc.github.io/List/galleries/%E4%BA%8C%E6%AC%A1%E5%85%83%E9%A3%8E/index.html","excerpt":"","text":""},{"title":"炫酷跑车","date":"2022-07-24T04:15:35.458Z","updated":"2022-07-24T04:15:35.458Z","comments":true,"path":"List/galleries/炫酷跑车/index.html","permalink":"https://macongmc.github.io/List/galleries/%E7%82%AB%E9%85%B7%E8%B7%91%E8%BD%A6/index.html","excerpt":"","text":""},{"title":"清新花卉","date":"2022-07-24T04:15:35.458Z","updated":"2022-07-24T04:15:35.458Z","comments":true,"path":"List/galleries/清新花卉/index.html","permalink":"https://macongmc.github.io/List/galleries/%E6%B8%85%E6%96%B0%E8%8A%B1%E5%8D%89/index.html","excerpt":"","text":""},{"title":"甜美食品","date":"2022-07-24T04:15:35.459Z","updated":"2022-07-24T04:15:35.459Z","comments":true,"path":"List/galleries/甜美食品/index.html","permalink":"https://macongmc.github.io/List/galleries/%E7%94%9C%E7%BE%8E%E9%A3%9F%E5%93%81/index.html","excerpt":"","text":""},{"title":"城市风光","date":"2022-07-24T04:15:35.457Z","updated":"2022-07-24T04:15:35.457Z","comments":true,"path":"List/galleries/城市风光/index.html","permalink":"https://macongmc.github.io/List/galleries/%E5%9F%8E%E5%B8%82%E9%A3%8E%E5%85%89/index.html","excerpt":"","text":""},{"title":"动漫插画","date":"2022-07-24T04:15:35.456Z","updated":"2022-07-24T04:15:35.456Z","comments":true,"path":"List/galleries/动漫插画/index.html","permalink":"https://macongmc.github.io/List/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/index.html","excerpt":"","text":""},{"title":"璀璨星空","date":"2022-07-24T04:15:35.459Z","updated":"2022-07-24T04:15:35.459Z","comments":true,"path":"List/galleries/璀璨星空/index.html","permalink":"https://macongmc.github.io/List/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/index.html","excerpt":"","text":""},{"title":"自然风景","date":"2022-07-24T04:15:35.460Z","updated":"2022-07-24T04:15:35.460Z","comments":true,"path":"List/galleries/自然风景/index.html","permalink":"https://macongmc.github.io/List/galleries/%E8%87%AA%E7%84%B6%E9%A3%8E%E6%99%AF/index.html","excerpt":"","text":""},{"title":"呆萌猫咪","date":"2022-07-24T04:15:35.457Z","updated":"2022-07-24T04:15:35.457Z","comments":true,"path":"List/galleries/呆萌猫咪/index.html","permalink":"https://macongmc.github.io/List/galleries/%E5%91%86%E8%90%8C%E7%8C%AB%E5%92%AA/index.html","excerpt":"","text":""}],"posts":[{"title":"jenkins(二）","slug":"jenkins-二）","date":"2022-08-12T03:33:12.000Z","updated":"2022-08-12T03:33:12.000Z","comments":true,"path":"posts/47427259.html","link":"","permalink":"https://macongmc.github.io/posts/47427259.html","excerpt":"","text":"一.启动jenkins启动命令 nohup java -jar jenkins.war --httpPort=8383 &gt;my.file 2&gt;&amp;1 &amp; 浏览器访问 http://localhost:8383","categories":[{"name":"持续集成","slug":"持续集成","permalink":"https://macongmc.github.io/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"}],"tags":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://macongmc.github.io/tags/Jenkins/"}],"author":"马聪"},{"title":"jenkisn(一）","slug":"jenkisn-一）","date":"2022-08-12T03:11:41.000Z","updated":"2022-08-12T03:11:41.000Z","comments":true,"path":"posts/cd651f5d.html","link":"","permalink":"https://macongmc.github.io/posts/cd651f5d.html","excerpt":"","text":"一.环境需求jenkins最新版目前需要JDK11。 环境需求：jdk,mavn,git. jdk采取linux多环境安装。 二.安装JDK1.下载JDK8和JDK11linux安装多版本 解压两个JDK tar zxvf jdk-8u181-linux-x64.tar.gz 设置环境变量 vim /etc/profile 配置 export JAVA_HOME=/usr/local/jdk/jdk1.8.0_181 export CLASSPATH=$:CLASSPATH:$JAVA_HOME/lib/ export PATH=$PATH:$JAVA_HOME/bin source /etc/profile 1.8设置为默认JDK 2.多版本配置查看JDK是否存在 alternatives --config java 根据数字动态切换JDK 添加两个版本的JDK alternatives --install /usr/bin/java java /usr/local/java/jdk1.8.0_152/bin/java 序号 三.安装maven下载地址：https://maven.apache.org/download.cgi 解压 tar zxvf apache-maven-3.8.6-bin.tar.gz 修改仓库 vi /usr/local/maven/apache-maven-3.6.1/conf/settings.xml 配置阿里云镜像 &lt;mirror&gt; &lt;id&gt;alimaven&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;aliyun maven&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/repositories/central/&lt;/url&gt; &lt;/mirror&gt; 配置环境变量 export MAVEN_HOME=/usr/local/maven/apache-maven-3.6.1 export PATH=$PATH:$MAVEN_HOME/bin 赋权限 chmod 777 /usr/local/maven/apache-maven-3.6.1/bin/mvn 刷新运行 source /etc/profile mvn-v 四.安装gityum -y install git git version 五.安装jenkinx下载地址：Jenkins download and deployment 采用：war包下载 运行： nohup java -jar jenkins.war --httpPort=8383 &gt;my.file 2&gt;&amp;1 &amp;","categories":[{"name":"持续集成","slug":"持续集成","permalink":"https://macongmc.github.io/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"}],"tags":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://macongmc.github.io/tags/Jenkins/"}],"author":"马聪"},{"title":"Linux手册","slug":"多版本JDK","date":"2022-08-12T02:54:09.000Z","updated":"2022-08-12T02:54:09.000Z","comments":true,"path":"posts/4e543b07.html","link":"","permalink":"https://macongmc.github.io/posts/4e543b07.html","excerpt":"","text":"一.多版本JDK1.下载多个版本JDK依赖 下载jdk1.8 下载jdk11 alternatives --install /usr/bin/java java /usr/local/java/jdk1.8.0_152/bin/java 序号 alternatives --config java 选择版本 二.防火墙设置防火墙允许http服务 sudo firewall-cmd --add-service=http --permanent 设置防火墙打开8080端口 sudo firewall-cmd --add-port=8080/tcp --permanent 命令重启防火墙 sudo firewall-cmd --reload 看防火墙开启还是关闭 systemctl status firewalld.service 可以查看端口开放情况 sudo firewall-cmd --list-all 三.shell脚本赋权限 chmod u+x 文件名称 基本脚本 #!/bin/bash PID=$(ps -ef | grep fn-safeedu | grep -v grep | awk '{ print $2 }') if [ -z \"$PID\" ] then echo Application is stopped else echo kill $PID kill -9 $PID rm -rf /root/xxoo fi source /etc/profile 四.后端运行javanohup java -jar /root/xxoo/fn-safeedu*.jar &gt;my.log.log 2&gt;&amp;1 &amp;","categories":[{"name":"Linux","slug":"Linux","permalink":"https://macongmc.github.io/categories/Linux/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://macongmc.github.io/tags/linux/"},{"name":"多版本jdk","slug":"多版本jdk","permalink":"https://macongmc.github.io/tags/%E5%A4%9A%E7%89%88%E6%9C%ACjdk/"}],"author":"马聪"},{"title":"分布式任务调度-xxl-job","slug":"分布式任务调度-xxl-job","date":"2022-08-10T02:16:19.000Z","updated":"2022-08-10T02:16:19.000Z","comments":true,"path":"posts/cfbe074.html","link":"","permalink":"https://macongmc.github.io/posts/cfbe074.html","excerpt":"","text":"一.分布式任务调度-xxl-job1.文档地址文档地址源码地址 2.环境 Maven3+ Jdk1.8+ Mysql5.7+ 3.初始化数据库- xxl_job_lock：任务调度锁表； - xxl_job_group：执行器信息表，维护任务执行器信息； - xxl_job_info：调度扩展信息表： 用于保存XXL-JOB调度任务的扩展信息，如任务分组、任务名、机器地址、执行器、执行入参和报警邮件等等； - xxl_job_log：调度日志表： 用于保存XXL-JOB任务调度的历史信息，如调度结果、执行结果、调度入参、调度机器和执行器等等； - xxl_job_logglue：任务GLUE日志：用于保存GLUE更新历史，用于支持GLUE的版本回溯功能； - xxl_job_registry：执行器注册表，维护在线的执行器和调度中心机器地址信息； - xxl_job_user：系统用户表； 调度中心支持集群部署，集群情况下各节点务必连接同一个mysql实例; 如果mysql做主从,调度中心集群节点务必强制走主库; 配置文件 ### web server.port=8888 server.servlet.context-path=/xxl-job-admin ### actuator management.server.servlet.context-path=/actuator management.health.mail.enabled=false ### resources spring.mvc.servlet.load-on-startup=0 spring.mvc.static-path-pattern=/static/** spring.resources.static-locations=classpath:/static/ ### freemarker spring.freemarker.templateLoaderPath=classpath:/templates/ spring.freemarker.suffix=.ftl spring.freemarker.charset=UTF-8 spring.freemarker.request-context-attribute=request spring.freemarker.settings.number_format=0.########## ### mybatis mybatis.mapper-locations=classpath:/mybatis-mapper/*Mapper.xml #mybatis.type-aliases-package=com.xxl.job.admin.core.model ### xxl-job, datasource spring.datasource.url=jdbc:mysql://127.0.0.1:3306/xxl_job?Unicode=true&amp;serverTimezone=Asia/Shanghai&amp;characterEncoding=UTF-8 spring.datasource.username=root spring.datasource.password=root spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver ### datasource-pool spring.datasource.type=com.zaxxer.hikari.HikariDataSource spring.datasource.hikari.minimum-idle=10 spring.datasource.hikari.maximum-pool-size=30 spring.datasource.hikari.auto-commit=true spring.datasource.hikari.idle-timeout=30000 spring.datasource.hikari.pool-name=HikariCP spring.datasource.hikari.max-lifetime=900000 spring.datasource.hikari.connection-timeout=10000 spring.datasource.hikari.connection-test-query=SELECT 1 ### xxl-job, email spring.mail.host=smtp.qq.com spring.mail.port=25 spring.mail.username=xxx@qq.com spring.mail.password=xxx spring.mail.properties.mail.smtp.auth=true spring.mail.properties.mail.smtp.starttls.enable=true spring.mail.properties.mail.smtp.starttls.required=true spring.mail.properties.mail.smtp.socketFactory.class=javax.net.ssl.SSLSocketFactory ### xxl-job, access token xxl.job.accessToken= ### xxl-job, i18n (default is zh_CN, and you can choose \"zh_CN\", \"zh_TC\" and \"en\") xxl.job.i18n=zh_CN ## xxl-job, triggerpool max size xxl.job.triggerpool.fast.max=200 xxl.job.triggerpool.slow.max=100 ### xxl-job, log retention days xxl.job.logretentiondays=30 启动调度中心，默认登录账号 “admin/123456”, 登录后运行界面如下图所示。 二.入门案例1.dockerdocker pull xuxueli/xxl-job-admin:2.3.0 docker run -e PARAMS=\"--spring.datasource.url=jdbc:mysql://192.168.200.130:3306/xxl_job?Unicode=true&amp;characterEncoding=UTF-8 \\ --spring.datasource.username=root \\ --spring.datasource.password=root\" \\ -p 8888:8080 -v /tmp:/data/applogs \\ --name xxl-job-admin --restart=always -d xuxueli/xxl-job-admin:2.3.0 2.依赖 &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!--xxl-job--&gt; &lt;dependency&gt; &lt;groupId&gt;com.xuxueli&lt;/groupId&gt; &lt;artifactId&gt;xxl-job-core&lt;/artifactId&gt; &lt;version&gt;2.3.0&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; server: port: 8881 xxl: job: admin: addresses: http://192.168.200.130:8888/xxl-job-admin executor: appname: xxl-job-executor-sample port: 9999 import com.xxl.job.core.executor.impl.XxlJobSpringExecutor; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import org.springframework.beans.factory.annotation.Value; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; /** * xxl-job config * * @author xuxueli 2017-04-28 */ @Configuration public class XxlJobConfig { private Logger logger = LoggerFactory.getLogger(XxlJobConfig.class); @Value(\"${xxl.job.admin.addresses}\") private String adminAddresses; @Value(\"${xxl.job.executor.appname}\") private String appname; @Value(\"${xxl.job.executor.port}\") private int port; @Bean public XxlJobSpringExecutor xxlJobExecutor() { logger.info(\"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; xxl-job config init.\"); XxlJobSpringExecutor xxlJobSpringExecutor = new XxlJobSpringExecutor(); xxlJobSpringExecutor.setAdminAddresses(adminAddresses); xxlJobSpringExecutor.setAppname(appname); xxlJobSpringExecutor.setPort(port); return xxlJobSpringExecutor; } } import com.xxl.job.core.handler.annotation.XxlJob; import org.springframework.stereotype.Component; @Component public class HelloJob { @XxlJob(\"demoJobHandler\") public void helloJob(){ System.out.println(\"简单任务执行了。。。。\"); } } 执行器启动","categories":[{"name":"xxl-job","slug":"xxl-job","permalink":"https://macongmc.github.io/categories/xxl-job/"}],"tags":[{"name":"api","slug":"api","permalink":"https://macongmc.github.io/tags/api/"}],"author":"马聪"},{"title":"计算代码行数","slug":"计算代码行数","date":"2022-08-10T00:41:24.000Z","updated":"2022-08-10T00:41:24.000Z","comments":true,"path":"posts/a7ab6980.html","link":"","permalink":"https://macongmc.github.io/posts/a7ab6980.html","excerpt":"","text":"package com; import java.io.File; import java.nio.file.Files; import java.nio.file.Paths; import java.util.Objects; import java.util.function.Consumer; import java.util.function.Function; import java.util.stream.Stream; /** * Desc: 统计项目代码行数 * Created by Java指南者 on 2020-06-25 14:49 */ public class ProjectCodeCount { public static &lt;T&gt; Consumer&lt;T&gt; cof(UncheckedConsumer&lt;T&gt; mapper) { Objects.requireNonNull(mapper); return t -&gt; { try { mapper.accept(t); } catch (Exception ex) { throw new RuntimeException(ex); } }; } public static &lt;T&gt; Consumer&lt;T&gt; ncof(UncheckedConsumer&lt;T&gt; mapper) { Objects.requireNonNull(mapper); return t -&gt; { try { mapper.accept(t); } catch (Exception ex) { ex.printStackTrace(); } }; } public static &lt;T, R&gt; Function&lt;T, R&gt; of(UncheckedFunction&lt;T, R&gt; mapper) { Objects.requireNonNull(mapper); return t -&gt; { try { return mapper.apply(t); } catch (Exception ex) { throw new RuntimeException(ex); } }; } public static &lt;T, R&gt; Function&lt;T, R&gt; eof(UncheckedFunction&lt;T, R&gt; mapper, Exception cex) { Objects.requireNonNull(mapper); return t -&gt; { try { return mapper.apply(t); } catch (Exception ex) { if (cex != null &amp;&amp; cex.getClass() == ex.getClass()) { throw new RuntimeException(cex); } else { throw new RuntimeException(ex); } } }; } public static &lt;T, R&gt; Function&lt;T, R&gt; of(UncheckedFunction&lt;T, R&gt; mapper, R defaultR) { Objects.requireNonNull(mapper); return t -&gt; { try { return mapper.apply(t); } catch (Exception ex) { ex.printStackTrace(System.err); return defaultR; } }; } @FunctionalInterface public static interface UncheckedFunction&lt;T, R&gt; { R apply(T t) throws Exception; } @FunctionalInterface public static interface UncheckedConsumer&lt;T&gt; { void accept(T t) throws Exception; } /** * 查看项目文件夹下的代码行数 * * @param args * @throws Exception */ public static void main(String[] args) throws Exception { String path = \"C:\\\\Users\\\\16231\\\\Desktop\\\\test\\\\safe-edu-servers\\\\safe-edu-server\"; File f = new File(path); File[] files = f.listFiles(); if (files == null || files.length &lt; 1) { return; } int allCount = 0; for (File fi : files) { String[] split = fi.toString().split(\"/\"); if (fi.isDirectory() &amp;&amp; !split[split.length - 1].startsWith(\".\")) { long count = Files.walk(Paths.get(fi.toString())) // 递归获得项目目录下的所有文件 .filter(file -&gt; !Files.isDirectory(file)) // 筛选出文件 .filter(file -&gt; file.toString().endsWith(\".java\")) // 筛选出 java 文件 .flatMap(ProjectCodeCount.of(file -&gt; Files.lines(file), Stream.empty())) // 将会抛出受检异常的 Lambda 包装为 抛出非受检异常的 Lambda .filter(line -&gt; !line.trim().isEmpty()) // 过滤掉空行 .filter(line -&gt; !line.trim().startsWith(\"//\")) //过滤掉 //之类的注释 .filter(line -&gt; !(line.trim().startsWith(\"/*\") &amp;&amp; line.trim().endsWith(\"*/\"))) //过滤掉/* */之类的注释 .filter(line -&gt; !(line.trim().startsWith(\"/*\") &amp;&amp; !line.trim().endsWith(\"*/\"))) //过滤掉以 /* 开头的注释（去除空格后的开头） .filter(line -&gt; !(!line.trim().startsWith(\"/*\") &amp;&amp; line.trim().endsWith(\"*/\"))) //过滤掉已 */ 结尾的注释 .filter(line -&gt; !line.trim().startsWith(\"*\")) //过滤掉 javadoc 中的文字注释 .filter(line -&gt; !line.trim().startsWith(\"@Override\")) //过滤掉方法上含 @Override 的 .count(); System.out.println(split[split.length - 1] + \" : \" + count); allCount += count; } } System.out.println(\"总的代码行数：\" + allCount); } }","categories":[{"name":"工具篇","slug":"工具篇","permalink":"https://macongmc.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"}],"tags":[{"name":"计算","slug":"计算","permalink":"https://macongmc.github.io/tags/%E8%AE%A1%E7%AE%97/"}],"author":"马聪"},{"title":"Seata","slug":"Seata","date":"2022-08-07T14:15:44.000Z","updated":"2022-08-07T14:15:44.000Z","comments":true,"path":"posts/8d9a091c.html","link":"","permalink":"https://macongmc.github.io/posts/8d9a091c.html","excerpt":"","text":"一.分布式事务理论1.CAP理论一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项. 2.BASE理论BASE理论是对CAP的一种解决思路，包含三个思想： Basically Available （基本可用）：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。 Soft State（软状态）：在一定时间内，允许出现中间状态，比如临时的不一致状态。 Eventually Consistent（最终一致性）：虽然无法保证强一致性，但是在软状态结束后，最终达到数据一致。 3.解决思路分布式事务最大的问题是各个子事务的一致性问题，因此可以借鉴CAP定理和BASE理论，有两种解决思路： AP模式：各子事务分别执行和提交，允许出现结果不一致，然后采用弥补措施恢复数据即可，实现最终一致。 CP模式：各个子事务执行后互相等待，同时提交，同时回滚，达成强一致。但事务等待过程中，处于弱可用状态。 二.seata架构Seata 是一款开源的分布式事务解决方案，致力于提供高性能和简单易用的分布式事务服务。Seata 将为用户提供了 AT、TCC、SAGA 和 XA 事务模式，为用户打造一站式的分布式解决方案。 Seata事务管理中有三个重要的角色： TC (Transaction Coordinator) - 事务协调者：维护全局和分支事务的状态，协调全局事务提交或回滚。 TM (Transaction Manager) - 事务管理器：定义全局事务的范围、开始全局事务、提交或回滚全局事务。 RM (Resource Manager) - 资源管理器：管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。 Seata基于上述架构提供了四种不同的分布式事务解决方案： XA模式：强一致性分阶段事务模式，牺牲了一定的可用性，无业务侵入 TCC模式：最终一致的分阶段事务模式，有业务侵入 AT模式：最终一致的分阶段事务模式，无业务侵入，也是Seata的默认模式 SAGA模式：长事务模式，有业务侵入 无论哪种方案，都离不开TC，也就是事务的协调者。 Seata 官方文档","categories":[{"name":"分布式事务","slug":"分布式事务","permalink":"https://macongmc.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"}],"tags":[{"name":"事务","slug":"事务","permalink":"https://macongmc.github.io/tags/%E4%BA%8B%E5%8A%A1/"},{"name":"springcloud alibaba","slug":"springcloud-alibaba","permalink":"https://macongmc.github.io/tags/springcloud-alibaba/"}],"author":"马聪"},{"title":"Elasticsearch","slug":"Elasticsearch","date":"2022-08-04T13:36:58.000Z","updated":"2022-08-04T13:36:58.000Z","comments":true,"path":"posts/d32d37e5.html","link":"","permalink":"https://macongmc.github.io/posts/d32d37e5.html","excerpt":"","text":"一.搭建ElasticSearch环境拉去镜像 docker pull elasticsearch:7.4.0 创建容器 docker run -id --name elasticsearch -d --restart=always -p 9200:9200 -p 9300:9300 -v /usr/share/elasticsearch/plugins:/usr/share/elasticsearch/plugins -e \"discovery.type=single-node\" elasticsearch:7.4.0 配置分词器把资料中的elasticsearch-analysis-ik-7.4.0.zip上传到服务器上,放到对应目录（plugins）解压 #切换目录 cd /usr/share/elasticsearch/plugins #新建目录 mkdir analysis-ik cd analysis-ik #root根目录中拷贝文件 mv elasticsearch-analysis-ik-7.4.0.zip /usr/share/elasticsearch/plugins/analysis-ik #解压文件 cd /usr/share/elasticsearch/plugins/analysis-ik unzip elasticsearch-analysis-ik-7.4.0.zip 二.批量导入数据库1.依赖&lt;!--elasticsearch--&gt; &lt;dependency&gt; &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt; &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt; &lt;version&gt;7.4.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt; &lt;artifactId&gt;elasticsearch-rest-client&lt;/artifactId&gt; &lt;version&gt;7.4.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt; &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt; &lt;version&gt;7.4.0&lt;/version&gt; &lt;/dependency&gt; 2.配置类import lombok.Getter; import lombok.Setter; import org.apache.http.HttpHost; import org.elasticsearch.client.RestClient; import org.elasticsearch.client.RestHighLevelClient; import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Getter @Setter @Configuration @ConfigurationProperties(prefix = \"elasticsearch\") public class ElasticSearchConfig { private String host; private int port; @Bean public RestHighLevelClient client(){ return new RestHighLevelClient(RestClient.builder( new HttpHost( host, port, \"http\" ) )); } } 3.配置文件server: port: 9999 spring: application: name: es-article datasource: driver-class-name: com.mysql.jdbc.Driver url: jdbc:mysql://82.157.254.101:3306/leadnews_article?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC username: password: # 设置Mapper接口所对应的XML文件位置，如果你在Mapper接口中有自定义方法，需要进行该配置 mybatis-plus: mapper-locations: classpath*:mapper/*.xml # 设置别名包扫描路径，通过该属性可以给包中的类注册别名 type-aliases-package: com.heima.model.article.pojos #自定义elasticsearch连接配置 elasticsearch: host: 82.157.254.101 port: 9200 4.代码@SpringBootTest @RunWith(SpringRunner.class) public class ApArticleTest { @Autowired private ApArticleMapper apArticleMapper; @Autowired private RestHighLevelClient restHighLevelClient; /** * 注意：数据量的导入，如果数据量过大，需要分页导入 * @throws Exception */ /** * 注意：数据量的导入，如果数据量过大，需要分页导入 * @throws Exception */ @Test public void init() throws Exception { //1.查询所有符合条件的文章数据 List&lt;SearchArticleVo&gt; searchArticleVos = apArticleMapper.loadArticleList(); //2.批量导入到es索引库 BulkRequest bulkRequest = new BulkRequest(\"app_info_article\"); for (SearchArticleVo searchArticleVo : searchArticleVos) { IndexRequest indexRequest = new IndexRequest().id(searchArticleVo.getId().toString()) .source(JSON.toJSONString(searchArticleVo), XContentType.JSON); //批量添加数据 bulkRequest.add(indexRequest); } restHighLevelClient.bulk(bulkRequest, RequestOptions.DEFAULT); } 中文文档 javaApi springDate esElasticSearch集成SpringData史上最全查询教程 - 掘金 (juejin.cn) 【Elasticsearch】7. Spring Boot整合ES - 掘金 (juejin.cn)","categories":[{"name":"API","slug":"API","permalink":"https://macongmc.github.io/categories/API/"}],"tags":[{"name":"搜索引擎","slug":"搜索引擎","permalink":"https://macongmc.github.io/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"}],"author":"马聪"},{"title":"kafka","slug":"kafka","date":"2022-08-03T01:00:24.000Z","updated":"2022-08-03T01:00:24.000Z","comments":true,"path":"posts/5bbc7517.html","link":"","permalink":"https://macongmc.github.io/posts/5bbc7517.html","excerpt":"","text":"一.kafka概述消息中间件对比 特性 ActiveMQ RabbitMQ RocketMQ Kafka 开发语言 java erlang java scala 单机吞吐量 万级 万级 10万级 100万级 时效性 ms us ms ms级以内 可用性 高（主从） 高（主从） 非常高（分布式） 非常高（分布式） 功能特性 成熟的产品、较全的文档、各种协议支持好 并发能力强、性能好、延迟低 MQ功能比较完善，扩展性佳 只支持主要的MQ功能，主要应用于大数据领域 消息中间件对比-选择建议 消息中间件 建议 Kafka 追求高吞吐量，适合产生大量数据的互联网服务的数据收集业务 RocketMQ 可靠性要求很高的金融互联网领域,稳定性高，经历了多次阿里双11考验 RabbitMQ 性能较好，社区活跃度高，数据量没有那么大，优先选择功能比较完备的RabbitMQ kafka介绍 Kafka 是一个分布式流媒体平台,类似于消息队列或企业消息传递系统。kafka官网：http://kafka.apache.org/ 中文文档 kafka介绍-名词解释 producer：发布消息的对象称之为主题生产者（Kafka topic producer） topic：Kafka将消息分门别类，每一类的消息称之为一个主题（Topic） consumer：订阅消息并处理发布的消息的对象称之为主题消费者（consumers） broker：已发布的消息保存在一组服务器中，称之为Kafka集群。集群中的每一个服务器都是一个代理（Broker）。 消费者可以订阅一个或多个主题（topic），并从Broker拉数据，从而消费这些已发布的消息。 二.安装和配置Kafka对于zookeeper是强依赖，保存kafka相关的节点数据，所以安装Kafka之前必须先安装zookeeper Docker安装zookeeper 下载镜像： docker pull zookeeper 创建容器 docker run -d --restart=always --log-driver json-file --log-opt max-size=100m --log-opt max-file=2 --name zookeeper -p 2181:2181 -v /etc/localtime:/etc/localtime zookeeper Docker安装kafka 下载镜像： docker pull wurstmeister/kafka 创建容器: 云主机 docker run -d --restart=always --log-driver json-file --log-opt max-size=100m --log-opt max-file=2 --name kafka -p 9092:9092 -e KAFKA_BROKER_ID=0 -e KAFKA_ZOOKEEPER_CONNECT=172.21.10.10:2181/kafka -e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://172.21.10.10:9092 -e KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 -v /etc/localtime:/etc/localtime wurstmeister/kafka 虚拟机 docker run -d --name kafka \\ --env KAFKA_ADVERTISED_HOST_NAME=192.168.200.130 \\ --env KAFKA_ZOOKEEPER_CONNECT=192.168.200.130:2181 \\ --env KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://192.168.200.130:9092 \\ --env KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \\ --env KAFKA_HEAP_OPTS=\"-Xmx256M -Xms256M\" \\ --net=host wurstmeister/kafka:2.12-2.3.1 三.kafka入门 生产者发送消息，多个消费者只能有一个消费者接收到消息 生产者发送消息，多个消费者都可以接收到消息 （1）创建kafka-demo项目，导入依赖 &lt;dependency&gt; &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt; &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt; &lt;/dependency&gt; （2）生产者发送消息 package com.heima.kafka.sample; import org.apache.kafka.clients.producer.KafkaProducer; import org.apache.kafka.clients.producer.ProducerConfig; import org.apache.kafka.clients.producer.ProducerRecord; import java.util.Properties; /** * 生产者 */ public class ProducerQuickStart { public static void main(String[] args) { //1.kafka的配置信息 Properties properties = new Properties(); //kafka的连接地址 properties.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,\"192.168.200.130:9092\"); //发送失败，失败的重试次数 properties.put(ProducerConfig.RETRIES_CONFIG,5); //消息key的序列化器 properties.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,\"org.apache.kafka.common.serialization.StringSerializer\"); //消息value的序列化器 properties.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,\"org.apache.kafka.common.serialization.StringSerializer\"); //2.生产者对象 KafkaProducer&lt;String,String&gt; producer = new KafkaProducer&lt;String, String&gt;(properties); //封装发送的消息 ProducerRecord&lt;String,String&gt; record = new ProducerRecord&lt;String, String&gt;(\"itheima-topic\",\"100001\",\"hello kafka\"); //3.发送消息 producer.send(record); //4.关闭消息通道，必须关闭，否则消息发送不成功 producer.close(); } } （3）消费者接收消息 package com.heima.kafka.sample; import org.apache.kafka.clients.consumer.ConsumerConfig; import org.apache.kafka.clients.consumer.ConsumerRecord; import org.apache.kafka.clients.consumer.ConsumerRecords; import org.apache.kafka.clients.consumer.KafkaConsumer; import java.time.Duration; import java.util.Collections; import java.util.Properties; /** * 消费者 */ public class ConsumerQuickStart { public static void main(String[] args) { //1.添加kafka的配置信息 Properties properties = new Properties(); //kafka的连接地址 properties.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"192.168.200.130:9092\"); //消费者组 properties.put(ConsumerConfig.GROUP_ID_CONFIG, \"group2\"); //消息的反序列化器 properties.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, \"org.apache.kafka.common.serialization.StringDeserializer\"); properties.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, \"org.apache.kafka.common.serialization.StringDeserializer\"); //2.消费者对象 KafkaConsumer&lt;String, String&gt; consumer = new KafkaConsumer&lt;String, String&gt;(properties); //3.订阅主题 consumer.subscribe(Collections.singletonList(\"itheima-topic\")); //当前线程一直处于监听状态 while (true) { //4.获取消息 ConsumerRecords&lt;String, String&gt; consumerRecords = consumer.poll(Duration.ofMillis(1000)); for (ConsumerRecord&lt;String, String&gt; consumerRecord : consumerRecords) { System.out.println(consumerRecord.key()); System.out.println(consumerRecord.value()); } } } } 总结 生产者发送消息，多个消费者订阅同一个主题，只能有一个消费者收到消息（一对一） 生产者发送消息，多个消费者订阅同一个主题，所有消费者都能收到消息（一对多） 四.kafka高可用设计1.集群 Kafka 的服务器端由被称为 Broker 的服务进程构成，即一个 Kafka 集群由多个 Broker 组成 这样如果集群中某一台机器宕机，其他机器上的 Broker 也依然能够对外提供服务。这其实就是 Kafka 提供高可用的手段之一 2.备份机制(Replication） Kafka 中消息的备份又叫做 副本（Replica） Kafka 定义了两类副本： 领导者副本（Leader Replica） 追随者副本（Follower Replica） 同步方式 ISR（in-sync replica）需要同步复制保存的follower 如果leader失效后，需要选出新的leader，选举的原则如下： 第一：选举时优先从ISR中选定，因为这个列表中follower的数据是与leader同步的 第二：如果ISR列表中的follower都不行了，就只能从其他follower中选取 极端情况，就是所有副本都失效了，这时有两种方案 第一：等待ISR中的一个活过来，选为Leader，数据可靠，但活过来的时间不确定 第二：选择第一个活过来的Replication，不一定是ISR中的，选为leader，以最快速度恢复可用性，但数据不一定完整 五.kafka生产者详解1.发送类型 同步发送 使用send()方法发送，它会返回一个Future对象，调用get()方法进行等待，就可以知道消息是否发送成功 RecordMetadata recordMetadata = producer.send(kvProducerRecord).get(); System.out.println(recordMetadata.offset()); 异步发送 调用send()方法，并指定一个回调函数，服务器在返回响应时调用函数 //异步消息发送 producer.send(kvProducerRecord, new Callback() { @Override public void onCompletion(RecordMetadata recordMetadata, Exception e) { if(e != null){ System.out.println(\"记录异常信息到日志表中\"); } System.out.println(recordMetadata.offset()); } }); 2.参数详解ack 代码的配置方式： //ack配置 消息确认机制 prop.put(ProducerConfig.ACKS_CONFIG,\"all\"); 参数的选择说明 确认机制 说明 acks=0 生产者在成功写入消息之前不会等待任何来自服务器的响应,消息有丢失的风险，但是速度最快 acks=1（默认值） 只要集群首领节点收到消息，生产者就会收到一个来自服务器的成功响应 acks=all 只有当所有参与赋值的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应 retries 生产者从服务器收到的错误有可能是临时性错误，在这种情况下，retries参数的值决定了生产者可以重发消息的次数，如果达到这个次数，生产者会放弃重试返回错误，默认情况下，生产者会在每次重试之间等待100ms 代码中配置方式： //重试次数 prop.put(ProducerConfig.RETRIES_CONFIG,10); 消息压缩 默认情况下， 消息发送时不会被压缩。 代码中配置方式： //数据压缩 prop.put(ProducerConfig.COMPRESSION_TYPE_CONFIG,\"lz4\"); 压缩算法 说明 snappy 占用较少的 CPU， 却能提供较好的性能和相当可观的压缩比， 如果看重性能和网络带宽，建议采用 lz4 占用较少的 CPU， 压缩和解压缩速度较快，压缩比也很客观 gzip 占用较多的 CPU，但会提供更高的压缩比，网络带宽有限，可以使用这种算法 使用压缩可以降低网络传输开销和存储开销，而这往往是向 Kafka 发送消息的瓶颈所在。 六.kafka消费者详解1.消费者组消费者组（Consumer Group） ：指的就是由一个或多个消费者组成的群体 一个发布在Topic上消息被分发给此消费者组中的一个消费者 所有的消费者都在一个组中，那么这就变成了queue模型 所有的消费者都在不同的组中，那么就完全变成了发布-订阅模型 2.消息有序性应用场景： ​ 即时消息中的单对单聊天和群聊，保证发送方消息发送顺序与接收 方的顺序一致 ​ 充值转账两个渠道在同一个时间进行余额变更，短信通知必须要有顺序 topic分区中消息只能由消费者组中的唯一一个消费者处理，所以消息肯定是按照先后顺序进行处理的。但是它也仅仅是保证Topic的一个分区顺序处理，不能保证跨分区的消息先后处理顺序。 所以，如果你想要顺序的处理Topic的所有消息，那就只提供一个分区。 3.提交和偏移量kafka不会像其他JMS队列那样需要得到消费者的确认，消费者可以使用kafka来追踪消息在分区的位置（偏移量） 消费者会往一个叫做_consumer_offset的特殊主题发送消息，消息里包含了每个分区的偏移量。如果消费者发生崩溃或有新的消费者加入群组，就会触发再均衡 如果消费者2挂掉以后，会发生再均衡，消费者2负责的分区会被其他消费者进行消费 再均衡后不可避免会出现一些问题 问题一： 如果提交偏移量小于客户端处理的最后一个消息的偏移量，那么处于两个偏移量之间的消息就会被重复处理。 问题二： 如果提交的偏移量大于客户端的最后一个消息的偏移量，那么处于两个偏移量之间的消息将会丢失。 如果想要解决这些问题，还要知道目前kafka提交偏移量的方式： 提交偏移量的方式有两种，分别是自动提交偏移量和手动提交 自动提交偏移量 当enable.auto.commit被设置为true，提交方式就是让消费者自动提交偏移量，每隔5秒消费者会自动把从poll()方法接收的最大偏移量提交上去 手动提交 ，当enable.auto.commit被设置为false可以有以下三种提交方式 提交当前偏移量（同步提交） 异步提交 同步和异步组合提交 1.提交当前偏移量（同步提交） 把enable.auto.commit设置为false,让应用程序决定何时提交偏移量。使用commitSync()提交偏移量，commitSync()将会提交poll返回的最新的偏移量，所以在处理完所有记录后要确保调用了commitSync()方法。否则还是会有消息丢失的风险。 只要没有发生不可恢复的错误，commitSync()方法会一直尝试直至提交成功，如果提交失败也可以记录到错误日志里。 while (true){ ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(1000)); for (ConsumerRecord&lt;String, String&gt; record : records) { System.out.println(record.value()); System.out.println(record.key()); try { consumer.commitSync();//同步提交当前最新的偏移量 }catch (CommitFailedException e){ System.out.println(\"记录提交失败的异常：\"+e); } } } 2.异步提交 手动提交有一个缺点，那就是当发起提交调用时应用会阻塞。当然我们可以减少手动提交的频率，但这个会增加消息重复的概率（和自动提交一样）。另外一个解决办法是，使用异步提交的API。 while (true){ ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(1000)); for (ConsumerRecord&lt;String, String&gt; record : records) { System.out.println(record.value()); System.out.println(record.key()); } consumer.commitAsync(new OffsetCommitCallback() { @Override public void onComplete(Map&lt;TopicPartition, OffsetAndMetadata&gt; map, Exception e) { if(e!=null){ System.out.println(\"记录错误的提交偏移量：\"+ map+\",异常信息\"+e); } } }); } 3.同步和异步组合提交 异步提交也有个缺点，那就是如果服务器返回提交失败，异步提交不会进行重试。相比较起来，同步提交会进行重试直到成功或者最后抛出异常给应用。异步提交没有实现重试是因为，如果同时存在多个异步提交，进行重试可能会导致位移覆盖。 举个例子，假如我们发起了一个异步提交commitA，此时的提交位移为2000，随后又发起了一个异步提交commitB且位移为3000；commitA提交失败但commitB提交成功，此时commitA进行重试并成功的话，会将实际上将已经提交的位移从3000回滚到2000，导致消息重复消费。 try { while (true){ ConsumerRecords&lt;String, String&gt; records = consumer.poll(Duration.ofMillis(1000)); for (ConsumerRecord&lt;String, String&gt; record : records) { System.out.println(record.value()); System.out.println(record.key()); } consumer.commitAsync(); } }catch (Exception e){+ e.printStackTrace(); System.out.println(\"记录错误信息：\"+e); }finally { try { consumer.commitSync(); }finally { consumer.close(); } } 4.再均衡监听器 ConsumerRebalanceListener onPartitionsRevoked：在分区均衡开始【前】和消费者停止读取消息【后】被调用； onPartitionsAssigned：分区再均衡【后】和消费者开始读取消息【前】被调用 ； import org.apache.kafka.clients.consumer.ConsumerRebalanceListener; import org.apache.kafka.clients.consumer.KafkaConsumer; import org.apache.kafka.clients.consumer.OffsetAndMetadata; import org.apache.kafka.common.TopicPartition; import java.util.Collection; import java.util.Map; import java.util.concurrent.ConcurrentHashMap; public class HandlerRebalance implements ConsumerRebalanceListener { private final Map&lt;TopicPartition, OffsetAndMetadata&gt; currOffsets; private final KafkaConsumer&lt;String,String&gt; consumer; //private final Transaction tr事务类的实例 public HandlerRebalance(Map&lt;TopicPartition, OffsetAndMetadata&gt; currOffsets, KafkaConsumer&lt;String, String&gt; consumer) { this.currOffsets = currOffsets; this.consumer = consumer; } /*模拟一个保存分区偏移量的数据库表*/ public final static ConcurrentHashMap&lt;TopicPartition,Long&gt; partitionOffsetMap = new ConcurrentHashMap(); //分区再均衡之前 public void onPartitionsRevoked( Collection&lt;TopicPartition&gt; partitions) { final String id = Thread.currentThread().getId()+\"\"; System.out.println(id+\"-onPartitionsRevoked参数值为：\"+partitions); System.out.println(id+\"-服务器准备分区再均衡，提交偏移量。当前偏移量为：\" +currOffsets); //开始事务 //偏移量写入数据库 System.out.println(\"分区偏移量表中：\"+partitionOffsetMap); for(TopicPartition topicPartition:partitions){ partitionOffsetMap.put(topicPartition, currOffsets.get(topicPartition).offset()); } consumer.commitSync(currOffsets); //提交业务数和偏移量入库 tr.commit } //分区再均衡完成以后 public void onPartitionsAssigned( Collection&lt;TopicPartition&gt; partitions) { final String id = \"\" + Thread.currentThread().getId(); System.out.println(id+\"-再均衡完成，onPartitionsAssigned参数值为：\"+partitions); System.out.println(\"分区偏移量表中：\"+partitionOffsetMap); for(TopicPartition topicPartition:partitions){ System.out.println(id+\"-topicPartition\"+topicPartition); //模拟从数据库中取得上次的偏移量 Long offset = partitionOffsetMap.get(topicPartition); if(offset==null) continue; //从特定偏移量处开始记录 (从指定分区中的指定偏移量开始消费) //这样就可以确保分区再均衡中的数据不错乱 consumer.seek(topicPartition,partitionOffsetMap.get(topicPartition)); } } } ## 七.springboot集成kafka 1.导入spring-kafka依赖信息 ```xml &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- kafkfa --&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt; &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt; &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.kafka&lt;/groupId&gt; &lt;artifactId&gt;kafka-clients&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;fastjson&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 2.在resources下创建文件application.yml server: port: 9991 spring: application: name: kafka-demo kafka: bootstrap-servers: 192.168.200.130:9092 producer: retries: 10 key-serializer: org.apache.kafka.common.serialization.StringSerializer value-serializer: org.apache.kafka.common.serialization.StringSerializer consumer: group-id: ${spring.application.name}-test key-deserializer: org.apache.kafka.common.serialization.StringDeserializer value-deserializer: org.apache.kafka.common.serialization.StringDeserializer 3.消息生产者 package com.heima.kafka.controller; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.kafka.core.KafkaTemplate; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.RestController; @RestController public class HelloController { @Autowired private KafkaTemplate&lt;String,String&gt; kafkaTemplate; @GetMapping(\"/hello\") public String hello(){ kafkaTemplate.send(\"itcast-topic\",\"黑马程序员\"); return \"ok\"; } } 4.消息消费者 package com.heima.kafka.listener; import org.springframework.kafka.annotation.KafkaListener; import org.springframework.stereotype.Component; import org.springframework.util.StringUtils; @Component public class HelloListener { @KafkaListener(topics = \"itcast-topic\") public void onMessage(String message){ if(!StringUtils.isEmpty(message)){ System.out.println(message); } } } 传递消息为对象 目前springboot整合后的kafka，因为序列化器是StringSerializer，这个时候如果需要传递对象可以有两种方式 方式一：可以自定义序列化器，对象类型众多，这种方式通用性不强，本章节不介绍 方式二：可以把要传递的对象进行转json字符串，接收消息后再转为对象即可，本项目采用这种方式 发送消息 @GetMapping(\"/hello\") public String hello(){ User user = new User(); user.setUsername(\"xiaowang\"); user.setAge(18); kafkaTemplate.send(\"user-topic\", JSON.toJSONString(user)); return \"ok\"; } 接收消息 package com.heima.kafka.listener; import com.alibaba.fastjson.JSON; import com.heima.kafka.pojo.User; import org.springframework.kafka.annotation.KafkaListener; import org.springframework.stereotype.Component; import org.springframework.util.StringUtils; @Component public class HelloListener { @KafkaListener(topics = \"user-topic\") public void onMessage(String message){ if(!StringUtils.isEmpty(message)){ User user = JSON.parseObject(message, User.class); System.out.println(user); } } } 生产者配置 NAME DESCRIPTION TYPE DEFAULT VALID VALUES IMPORTANCE bootstrap.servers host/port列表，用于初始化建立和Kafka集群的连接。列表格式为host1:port1,host2:port2,….，无需添加所有的集群地址，kafka会根据提供的地址发现其他的地址（你可以多提供几个，以防提供的服务器关闭） list high key.serializer 实现 org.apache.kafka.common.serialization.Serializer 接口的 key 的 Serializer 类。 class high value.serializer 实现 org.apache.kafka.common.serialization.Serializer 接口的value 的 Serializer 类。 class high acks 生产者需要leader确认请求完成之前接收的应答数。此配置控制了发送消息的耐用性，支持以下配置： string 1 [all, -1, 0, 1] high acks=0 如果设置为0，那么生产者将不等待任何消息确认。消息将立刻添加到socket缓冲区并考虑发送。在这种情况下不能保障消息被服务器接收到。并且重试机制不会生效（因为客户端不知道故障了没有）。每个消息返回的offset始终设置为-1。 acks=1，这意味着leader写入消息到本地日志就立即响应，而不等待所有follower应答。在这种情况下，如果响应消息之后但follower还未复制之前leader立即故障，那么消息将会丢失。 acks=all 这意味着leader将等待所有副本同步后应答消息。此配置保障消息不会丢失（只要至少有一个同步的副本或者）。这是最强壮的可用性保障。等价于acks=-1。 buffer.memory 生产者用来缓存等待发送到服务器的消息的内存总字节数。如果消息发送比可传递到服务器的快，生产者将阻塞max.block.ms之后，抛出异常。 long 33554432 [0,…] high 此设置应该大致的对应生产者将要使用的总内存，但不是硬约束，因为生产者所使用的所有内存都用于缓冲。一些额外的内存将用于压缩（如果启动压缩），以及用于保持发送中的请求。 compression.type 数据压缩的类型。默认为空（就是不压缩）。有效的值有 none，gzip，snappy, 或 lz4。压缩全部的数据批，因此批的效果也将影响压缩的比率（更多的批次意味着更好的压缩）。 string none high retries 设置一个比零大的值，客户端如果发送失败则会重新发送。注意，这个重试功能和客户端在接到错误之后重新发送没什么不同。如果max.in.flight.requests.per.connection没有设置为1，有可能改变消息发送的顺序，因为如果2个批次发送到一个分区中，并第一个失败了并重试，但是第二个成功了，那么第二个批次将超过第一个。 int 0 [0,…,2147483647] high ssl.key.password 密钥仓库文件中的私钥的密码。 password null high ssl.keystore.location 密钥仓库文件的位置。可用于客户端的双向认证。 string null high ssl.keystore.password 密钥仓库文件的仓库密码。只有配置了ssl.keystore.location时才需要。 password null high ssl.truststore.location 信任仓库的位置 string null high ssl.truststore.password 信任仓库文件的密码 password null high batch.size 当多个消息要发送到相同分区的时，生产者尝试将消息批量打包在一起，以减少请求交互。这样有助于客户端和服务端的性能提升。该配置的默认批次大小（以字节为单位）： int 16384 [0,…] medium 不会打包大于此配置大小的消息。 发送到broker的请求将包含多个批次，每个分区一个，用于发送数据。 较小的批次大小有可能降低吞吐量（批次大小为0则完全禁用批处理）。一个非常大的批次大小可能更浪费内存。因为我们会预先分配这个资源。 client.id 当发出请求时传递给服务器的id字符串。这样做的目的是允许服务器请求记录记录这个【逻辑应用名】，这样能够追踪请求的源，而不仅仅只是ip/prot。 string “” medium connections.max.idle.ms 多少毫秒之后关闭闲置的连接。 long 540000 medium linger.ms 生产者组将发送的消息组合成单个批量请求。正常情况下，只有消息到达的速度比发送速度快的情况下才会出现。但是，在某些情况下，即使在适度的负载下，客户端也可能希望减少请求数量。此设置通过添加少量人为延迟来实现。- 也就是说，不是立即发出一个消息，生产者将等待一个给定的延迟，以便和其他的消息可以组合成一个批次。这类似于Nagle在TCP中的算法。此设置给出批量延迟的上限：一旦我们达到分区的batch.size值的记录，将立即发送，不管这个设置如何，但是，如果比这个小，我们将在指定的“linger”时间内等待更多的消息加入。此设置默认为0（即无延迟）。假设，设置 linger.ms=5，将达到减少发送的请求数量的效果，但对于在没有负载情况，将增加5ms的延迟。 long 0 [0,…] medium max.block.ms 该配置控制 KafkaProducer.send() 和 KafkaProducer.partitionsFor() 将阻塞多长时间。此外这些方法被阻止，也可能是因为缓冲区已满或元数据不可用。在用户提供的序列化程序或分区器中的锁定不会计入此超时。 long 60000 [0,…] medium max.request.size 请求的最大大小（以字节为单位）。此设置将限制生产者的单个请求中发送的消息批次数，以避免发送过大的请求。这也是最大消息批量大小的上限。请注意，服务器拥有自己的批量大小，可能与此不同。 int 1048576 [0,…] medium partitioner.class 实现Partitioner接口的的Partitioner类。 class org.apache.kafka.clients.producer.internals.DefaultPartitioner medium receive.buffer.bytes 读取数据时使用的TCP接收缓冲区(SO_RCVBUF)的大小。如果值为-1，则将使用OS默认值。 int 32768 [-1,…] medium request.timeout.ms 该配置控制客户端等待请求响应的最长时间。如果在超时之前未收到响应，客户端将在必要时重新发送请求，如果重试耗尽，则该请求将失败。 这应该大于replica.lag.time.max.ms，以减少由于不必要的生产者重试引起的消息重复的可能性。 int 30000 [0,…] medium sasl.jaas.config JAAS配置文件使用的格式的SASL连接的JAAS登录上下文参数。这里描述JAAS配置文件格式。该值的格式为：’（=）*;’ password null medium sasl.kerberos.service.name Kafka运行的Kerberos主体名称。可以在Kafka的JAAS配置或Kafka的配置中定义。 string null medium sasl.mechanism SASL机制用于客户端连接。这是安全提供者可用与任何机制。GSSAPI是默认机制。 string GSSAPI medium security.protocol 用于与broker通讯的协议。 有效值为：PLAINTEXT，SSL，SASL_PLAINTEXT，SASL_SSL。 string PLAINTEXT medium send.buffer.bytes 发送数据时，用于TCP发送缓存（SO_SNDBUF）的大小。如果值为 -1，将默认使用系统的。 int 131072 [-1,…] medium ssl.enabled.protocols 启用SSL连接的协议列表。 list TLSv1.2,TLSv1.1,TLSv1 medium ssl.keystore.type 密钥存储文件的文件格式。对于客户端是可选的。 string JKS medium ssl.protocol 最近的JVM中允许的值是TLS，TLSv1.1和TLSv1.2。 较旧的JVM可能支持SSL，SSLv2和SSLv3，但由于已知的安全漏洞，不建议使用SSL。 string TLS medium ssl.provider 用于SSL连接的安全提供程序的名称。默认值是JVM的默认安全提供程序。 string null medium ssl.truststore.type 信任仓库文件的文件格式。 string JKS medium enable.idempotence 当设置为‘true’，生产者将确保每个消息正好一次复制写入到stream。如果‘false’，由于broker故障，生产者重试。即，可以在流中写入重试的消息。此设置默认是‘false’。请注意，启用幂等式需要将max.in.flight.requests.per.connection设置为1，重试次数不能为零。另外acks必须设置为“全部”。如果这些值保持默认值，我们将覆盖默认值。 如果这些值设置为与幂等生成器不兼容的值，则将抛出一个ConfigException异常。如果这些值设置为与幂等生成器不兼容的值，则将抛出一个ConfigException异常。 boolean FALSE low interceptor.classes 实现ProducerInterceptor接口，你可以在生产者发布到Kafka群集之前拦截（也可变更）生产者收到的消息。默认情况下没有拦截器。 list null low max.in.flight.requests.per.connection 阻塞之前，客户端单个连接上发送的未应答请求的最大数量。注意，如果此设置设置大于1且发送失败，则会由于重试（如果启用了重试）会导致消息重新排序的风险。 int 5 [1,…] low metadata.max.age.ms 在一段时间段之后（以毫秒为单位），强制更新元数据，即使我们没有看到任何分区leader的变化，也会主动去发现新的broker或分区。 long 300000 [0,…] low metric.reporters 用作metrics reporters（指标记录员）的类的列表。实现MetricReporter接口，将受到新增加的度量标准创建类插入的通知。 JmxReporter始终包含在注册JMX统计信息中。 list “” low metrics.num.samples 维护用于计算度量的样例数量。 int 2 [1,…] low metrics.recording.level 指标的最高记录级别。 string INFO [INFO, DEBUG] low metrics.sample.window.ms 度量样例计算上 long 30000 [0,…] low reconnect.backoff.max.ms 重新连接到重复无法连接的代理程序时等待的最大时间（毫秒）。 如果提供，每个主机的回退将会连续增加，直到达到最大值。 计算后退增加后，增加20％的随机抖动以避免连接风暴。 long 1000 [0,…] low reconnect.backoff.ms 尝试重新连接到给定主机之前等待的基本时间量。这避免了在循环中高频率的重复连接到主机。这种回退适应于客户端对broker的所有连接尝试。 long 50 [0,…] low retry.backoff.ms 尝试重试指定topic分区的失败请求之前等待的时间。这样可以避免在某些故障情况下高频次的重复发送请求。 long 100 [0,…] low sasl.kerberos.kinit.cmd Kerberos kinit 命令路径。 string /usr/bin/kinit low sasl.kerberos.min.time.before.relogin Login线程刷新尝试之间的休眠时间。 long 60000 low sasl.kerberos.ticket.renew.jitter 添加更新时间的随机抖动百分比。 double 0.05 low sasl.kerberos.ticket.renew.window.factor 登录线程将睡眠，直到从上次刷新ticket到期时间的指定窗口因子为止，此时将尝试续订ticket。 double 0.8 low ssl.cipher.suites 密码套件列表。这是使用TLS或SSL网络协议来协商用于网络连接的安全设置的认证，加密，MAC和密钥交换算法的命名组合。默认情况下，支持所有可用的密码套件。 list null low ssl.endpoint.identification.algorithm 使用服务器证书验证服务器主机名的端点识别算法。 string null low ssl.keymanager.algorithm 用于SSL连接的密钥管理因子算法。默认值是为Java虚拟机配置的密钥管理器工厂算法。 string SunX509 low ssl.secure.random.implementation 用于SSL加密操作的SecureRandom PRNG实现。 string null low ssl.trustmanager.algorithm 用于SSL连接的信任管理因子算法。默认值是JAVA虚拟机配置的信任管理工厂算法。 string PKIX low transaction.timeout.ms 生产者在主动中止正在进行的交易之前，交易协调器等待事务状态更新的最大时间（以ms为单位）。如果此值大于broker中的max.transaction.timeout.ms设置，则请求将失败，并报“InvalidTransactionTimeout”错误。 int 60000 low transactional.id 用于事务传递的TransactionalId。这样可以跨多个生产者会话的可靠性语义，因为它允许客户端保证在开始任何新事务之前使用相同的TransactionalId的事务已经完成。如果没有提供TransactionalId，则生产者被限制为幂等传递。请注意，如果配置了TransactionalId，则必须启用enable.idempotence。 默认值为空，这意味着无法使用事务。 string null non-empty string low 消费者配置 NAME DESCRIPTION TYPE DEFAULT VALID VALUES IMPORTANCE bootstrap.servers host/port,用于和kafka集群建立初始化连接。因为这些服务器地址仅用于初始化连接，并通过现有配置的来发现全部的kafka集群成员（集群随时会变化），所以此列表不需要包含完整的集群地址（但尽量多配置几个，以防止配置的服务器宕机）。 list high key.deserializer key的解析序列化接口实现类（Deserializer）。 class high value.deserializer value的解析序列化接口实现类（Deserializer） class high fetch.min.bytes 服务器哦拉取请求返回的最小数据量，如果数据不足，请求将等待数据积累。默认设置为1字节，表示只要单个字节的数据可用或者读取等待请求超时，就会应答读取请求。将此值设置的越大将导致服务器等待数据累积的越长，这可能以一些额外延迟为代价提高服务器吞吐量。 int 1 [0,…] high group.id 此消费者所属消费者组的唯一标识。如果消费者用于订阅或offset管理策略的组管理功能，则此属性是必须的。 string “” high heartbeat.interval.ms 当使用Kafka的分组管理功能时，心跳到消费者协调器之间的预计时间。心跳用于确保消费者的会话保持活动状态，并当有新消费者加入或离开组时方便重新平衡。该值必须必比session.timeout.ms小，通常不高于1/3。它可以调整的更低，以控制正常重新平衡的预期时间。 int 3000 high max.partition.fetch.bytes 服务器将返回每个分区的最大数据量。如果拉取的第一个非空分区中第一个消息大于此限制，则仍然会返回消息，以确保消费者可以正常的工作。broker接受的最大消息大小通过message.max.bytes（broker config）或max.message.bytes (topic config)定义。参阅fetch.max.bytes以限制消费者请求大小。 int 1048576 [0,…] high session.timeout.ms 用于发现消费者故障的超时时间。消费者周期性的发送心跳到broker，表示其还活着。如果会话超时期满之前没有收到心跳，那么broker将从分组中移除消费者，并启动重新平衡。请注意，该值必须在broker配置的group.min.session.timeout.ms和group.max.session.timeout.ms允许的范围内。 int 10000 high ssl.key.password 密钥存储文件中的私钥的密码。 客户端可选 password null high ssl.keystore.location 密钥存储文件的位置， 这对于客户端是可选的，并且可以用于客户端的双向认证。 string null high ssl.keystore.password 密钥仓库文件的仓库密码。客户端可选，只有ssl.keystore.location配置了才需要。 password null high ssl.truststore.location 信任仓库文件的位置 string null high ssl.truststore.password 信任仓库文件的密码 password null high auto.offset.reset 当Kafka中没有初始offset或如果当前的offset不存在时（例如，该数据被删除了），该怎么办。 string latest [latest, earliest, none] medium 最早：自动将偏移重置为最早的偏移 最新：自动将偏移重置为最新偏移 none：如果消费者组找到之前的offset，则向消费者抛出异常 其他：抛出异常给消费者。 connections.max.idle.ms 指定在多少毫秒之后关闭闲置的连接 long 540000 medium enable.auto.commit 如果为true，消费者的offset将在后台周期性的提交 boolean TRUE medium exclude.internal.topics 内部topic的记录（如偏移量）是否应向消费者公开。如果设置为true，则从内部topic接受记录的唯一方法是订阅它。 boolean TRUE medium fetch.max.bytes 服务器为拉取请求返回的最大数据值。这不是绝对的最大值，如果在第一次非空分区拉取的第一条消息大于该值，该消息将仍然返回，以确保消费者继续工作。接收的最大消息大小通过message.max.bytes (broker config) 或 max.message.bytes (topic config)定义。注意，消费者是并行执行多个提取的。 int 52428800 [0,…] medium max.poll.interval.ms 使用消费者组管理时poll()调用之间的最大延迟。消费者在获取更多记录之前可以空闲的时间量的上限。如果此超时时间期满之前poll()没有调用，则消费者被视为失败，并且分组将重新平衡，以便将分区重新分配给别的成员。 int 300000 [1,…] medium max.poll.records 在单次调用poll()中返回的最大记录数。 int 500 [1,…] medium partition.assignment.strategy 当使用组管理时，客户端将使用分区分配策略的类名来分配消费者实例之间的分区所有权 list class org.apache.kafka medium .clients.consumer .RangeAssignor receive.buffer.bytes 读取数据时使用的TCP接收缓冲区（SO_RCVBUF）的大小。 如果值为-1，则将使用OS默认值。 int 65536 [-1,…] medium request.timeout.ms 配置控制客户端等待请求响应的最长时间。 如果在超时之前未收到响应，客户端将在必要时重新发送请求，如果重试耗尽则客户端将重新发送请求。 int 305000 [0,…] medium sasl.jaas.config JAAS配置文件中SASL连接登录上下文参数。 这里描述JAAS配置文件格式。 该值的格式为： ‘(=)*;’ password null medium sasl.kerberos.service.name Kafka运行Kerberos principal名。可以在Kafka的JAAS配置文件或在Kafka的配置文件中定义。 string null medium sasl.mechanism 用于客户端连接的SASL机制。安全提供者可用的机制。GSSAPI是默认机制。 string GSSAPI medium security.protocol 用于与broker通讯的协议。 有效值为：PLAINTEXT，SSL，SASL_PLAINTEXT，SASL_SSL。 string PLAINTEXT medium send.buffer.bytes 发送数据时要使用的TCP发送缓冲区（SO_SNDBUF）的大小。 如果值为-1，则将使用OS默认值。 int 131072 [-1,…] medium ssl.enabled.protocols 启用SSL连接的协议列表。 list TLSv1.2,TLSv1.1,TLSv1 medium ssl.keystore.type key仓库文件的文件格式，客户端可选。 string JKS medium ssl.protocol 用于生成SSLContext的SSL协议。 默认设置是TLS，这对大多数情况都是适用的。 最新的JVM中的允许值为TLS，TLSv1.1和TLSv1.2。 较旧的JVM可能支持SSL，SSLv2和SSLv3，但由于已知的安全漏洞，不建议使用SSL。 string TLS medium ssl.provider 用于SSL连接的安全提供程序的名称。 默认值是JVM的默认安全提供程序。 string null medium ssl.truststore.type 信任存储文件的文件格式。 string JKS medium auto.commit.interval.ms 如果enable.auto.commit设置为true，则消费者偏移量自动提交给Kafka的频率（以毫秒为单位）。 int 5000 [0,…] low check.crcs 自动检查CRC32记录的消耗。 这样可以确保消息发生时不会在线或磁盘损坏。 此检查增加了一些开销，因此在寻求极致性能的情况下可能会被禁用。 boolean TRUE low client.id 在发出请求时传递给服务器的id字符串。 这样做的目的是通过允许将逻辑应用程序名称包含在服务器端请求日志记录中，来跟踪ip/port的请求源。 string “” low fetch.max.wait.ms 如果没有足够的数据满足fetch.min.bytes，服务器将在接收到提取请求之前阻止的最大时间。 int 500 [0,…] low interceptor.classes 用作拦截器的类的列表。 你可实现ConsumerInterceptor接口以允许拦截（也可能变化）消费者接收的记录。 默认情况下，没有拦截器。 list null low metadata.max.age.ms 在一定时间段之后（以毫秒为单位的），强制更新元数据，即使没有任何分区领导变化，任何新的broker或分区。 long 300000 [0,…] low metric.reporters 用作度量记录员类的列表。实现MetricReporter接口以允许插入通知新的度量创建的类。JmxReporter始终包含在注册JMX统计信息中。 list “” low metrics.num.samples 保持的样本数以计算度量。 int 2 [1,…] low metrics.recording.level 最高的记录级别。 string INFO [INFO, DEBUG] low metrics.sample.window.ms The window of time a metrics sample is computed over. long 30000 [0,…] low reconnect.backoff.ms 尝试重新连接指定主机之前等待的时间，避免频繁的连接主机，这种机制适用于消费者向broker发送的所有请求。 long 50 [0,…] low retry.backoff.ms 尝试重新发送失败的请求到指定topic分区之前的等待时间。避免在某些故障情况下，频繁的重复发送。 long 100 [0,…] low sasl.kerberos.kinit.cmd Kerberos kinit命令路径。 string /usr/bin/kinit low sasl.kerberos.min.time.before.relogin 尝试/恢复之间的登录线程的休眠时间。 long 60000 low sasl.kerberos.ticket.renew.jitter 添加到更新时间的随机抖动百分比。 double 0.05 low sasl.kerberos.ticket.renew.window.factor 登录线程将休眠，直到从上次刷新到ticket的指定的时间窗口因子到期，此时将尝试续订ticket。 double 0.8 low ssl.cipher.suites 密码套件列表，用于TLS或SSL网络协议的安全设置，认证，加密，MAC和密钥交换算法的明明组合。默认情况下，支持所有可用的密码套件。 list null low ssl.endpoint.identification.algorithm 使用服务器证书验证服务器主机名的端点识别算法。 string null low ssl.keymanager.algorithm 密钥管理器工厂用于SSL连接的算法。 默认值是为Java虚拟机配置的密钥管理器工厂算法。 string SunX509 low ssl.secure.random.implementation 用于SSL加密操作的SecureRandom PRNG实现。 string null low ssl.trustmanager.algorithm 信任管理器工厂用于SSL连接的算法。 默认值是为Java虚拟机配置的信任管理器工厂算法。 string PKIX low","categories":[{"name":"API","slug":"API","permalink":"https://macongmc.github.io/categories/API/"}],"tags":[{"name":"kafka","slug":"kafka","permalink":"https://macongmc.github.io/tags/kafka/"},{"name":"消息队列","slug":"消息队列","permalink":"https://macongmc.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"}],"author":"马聪"},{"title":"延迟任务Redis","slug":"延迟任务Redis","date":"2022-08-02T05:46:03.000Z","updated":"2022-08-02T05:46:03.000Z","comments":true,"path":"posts/6308532f.html","link":"","permalink":"https://macongmc.github.io/posts/6308532f.html","excerpt":"","text":"一.Redis实现思路 1.安装redisdocker pull redis docker run -d --name redis --restart=always -p 6379:6379 redis --requirepass \"root\" 2.redis依赖dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- redis依赖commons-pool 这个依赖一定要添加 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt; &lt;/dependency&gt; 3.redis配置spring: redis: host: 192.168.200.130 password: root port: 6379 4.工具类package com.heima.common.redis; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.cache.annotation.CachingConfigurerSupport; import org.springframework.dao.DataAccessException; import org.springframework.data.redis.connection.*; import org.springframework.data.redis.core.*; import org.springframework.data.redis.core.ZSetOperations.TypedTuple; import org.springframework.data.redis.core.types.Expiration; import org.springframework.lang.Nullable; import org.springframework.stereotype.Component; import java.io.IOException; import java.util.*; import java.util.concurrent.TimeUnit; @Component public class CacheService extends CachingConfigurerSupport { @Autowired private StringRedisTemplate stringRedisTemplate; public StringRedisTemplate getstringRedisTemplate() { return this.stringRedisTemplate; } /** -------------------key相关操作--------------------- */ /** * 删除key * * @param key */ public void delete(String key) { stringRedisTemplate.delete(key); } /** * 批量删除key * * @param keys */ public void delete(Collection&lt;String&gt; keys) { stringRedisTemplate.delete(keys); } /** * 序列化key * * @param key * @return */ public byte[] dump(String key) { return stringRedisTemplate.dump(key); } /** * 是否存在key * * @param key * @return */ public Boolean exists(String key) { return stringRedisTemplate.hasKey(key); } /** * 设置过期时间 * * @param key * @param timeout * @param unit * @return */ public Boolean expire(String key, long timeout, TimeUnit unit) { return stringRedisTemplate.expire(key, timeout, unit); } /** * 设置过期时间 * * @param key * @param date * @return */ public Boolean expireAt(String key, Date date) { return stringRedisTemplate.expireAt(key, date); } /** * 查找匹配的key * * @param pattern * @return */ public Set&lt;String&gt; keys(String pattern) { return stringRedisTemplate.keys(pattern); } /** * 将当前数据库的 key 移动到给定的数据库 db 当中 * * @param key * @param dbIndex * @return */ public Boolean move(String key, int dbIndex) { return stringRedisTemplate.move(key, dbIndex); } /** * 移除 key 的过期时间，key 将持久保持 * * @param key * @return */ public Boolean persist(String key) { return stringRedisTemplate.persist(key); } /** * 返回 key 的剩余的过期时间 * * @param key * @param unit * @return */ public Long getExpire(String key, TimeUnit unit) { return stringRedisTemplate.getExpire(key, unit); } /** * 返回 key 的剩余的过期时间 * * @param key * @return */ public Long getExpire(String key) { return stringRedisTemplate.getExpire(key); } /** * 从当前数据库中随机返回一个 key * * @return */ public String randomKey() { return stringRedisTemplate.randomKey(); } /** * 修改 key 的名称 * * @param oldKey * @param newKey */ public void rename(String oldKey, String newKey) { stringRedisTemplate.rename(oldKey, newKey); } /** * 仅当 newkey 不存在时，将 oldKey 改名为 newkey * * @param oldKey * @param newKey * @return */ public Boolean renameIfAbsent(String oldKey, String newKey) { return stringRedisTemplate.renameIfAbsent(oldKey, newKey); } /** * 返回 key 所储存的值的类型 * * @param key * @return */ public DataType type(String key) { return stringRedisTemplate.type(key); } /** -------------------string相关操作--------------------- */ /** * 设置指定 key 的值 * @param key * @param value */ public void set(String key, String value) { stringRedisTemplate.opsForValue().set(key, value); } /** * 获取指定 key 的值 * @param key * @return */ public String get(String key) { return stringRedisTemplate.opsForValue().get(key); } /** * 返回 key 中字符串值的子字符 * @param key * @param start * @param end * @return */ public String getRange(String key, long start, long end) { return stringRedisTemplate.opsForValue().get(key, start, end); } /** * 将给定 key 的值设为 value ，并返回 key 的旧值(old value) * * @param key * @param value * @return */ public String getAndSet(String key, String value) { return stringRedisTemplate.opsForValue().getAndSet(key, value); } /** * 对 key 所储存的字符串值，获取指定偏移量上的位(bit) * * @param key * @param offset * @return */ public Boolean getBit(String key, long offset) { return stringRedisTemplate.opsForValue().getBit(key, offset); } /** * 批量获取 * * @param keys * @return */ public List&lt;String&gt; multiGet(Collection&lt;String&gt; keys) { return stringRedisTemplate.opsForValue().multiGet(keys); } /** * 设置ASCII码, 字符串'a'的ASCII码是97, 转为二进制是'01100001', 此方法是将二进制第offset位值变为value * * @param key * @param * @param value * 值,true为1, false为0 * @return */ public boolean setBit(String key, long offset, boolean value) { return stringRedisTemplate.opsForValue().setBit(key, offset, value); } /** * 将值 value 关联到 key ，并将 key 的过期时间设为 timeout * * @param key * @param value * @param timeout * 过期时间 * @param unit * 时间单位, 天:TimeUnit.DAYS 小时:TimeUnit.HOURS 分钟:TimeUnit.MINUTES * 秒:TimeUnit.SECONDS 毫秒:TimeUnit.MILLISECONDS */ public void setEx(String key, String value, long timeout, TimeUnit unit) { stringRedisTemplate.opsForValue().set(key, value, timeout, unit); } /** * 只有在 key 不存在时设置 key 的值 * * @param key * @param value * @return 之前已经存在返回false,不存在返回true */ public boolean setIfAbsent(String key, String value) { return stringRedisTemplate.opsForValue().setIfAbsent(key, value); } /** * 用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始 * * @param key * @param value * @param offset * 从指定位置开始覆写 */ public void setRange(String key, String value, long offset) { stringRedisTemplate.opsForValue().set(key, value, offset); } /** * 获取字符串的长度 * * @param key * @return */ public Long size(String key) { return stringRedisTemplate.opsForValue().size(key); } /** * 批量添加 * * @param maps */ public void multiSet(Map&lt;String, String&gt; maps) { stringRedisTemplate.opsForValue().multiSet(maps); } /** * 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在 * * @param maps * @return 之前已经存在返回false,不存在返回true */ public boolean multiSetIfAbsent(Map&lt;String, String&gt; maps) { return stringRedisTemplate.opsForValue().multiSetIfAbsent(maps); } /** * 增加(自增长), 负数则为自减 * * @param key * @param * @return */ public Long incrBy(String key, long increment) { return stringRedisTemplate.opsForValue().increment(key, increment); } /** * * @param key * @param * @return */ public Double incrByFloat(String key, double increment) { return stringRedisTemplate.opsForValue().increment(key, increment); } /** * 追加到末尾 * * @param key * @param value * @return */ public Integer append(String key, String value) { return stringRedisTemplate.opsForValue().append(key, value); } /** -------------------hash相关操作------------------------- */ /** * 获取存储在哈希表中指定字段的值 * * @param key * @param field * @return */ public Object hGet(String key, String field) { return stringRedisTemplate.opsForHash().get(key, field); } /** * 获取所有给定字段的值 * * @param key * @return */ public Map&lt;Object, Object&gt; hGetAll(String key) { return stringRedisTemplate.opsForHash().entries(key); } /** * 获取所有给定字段的值 * * @param key * @param fields * @return */ public List&lt;Object&gt; hMultiGet(String key, Collection&lt;Object&gt; fields) { return stringRedisTemplate.opsForHash().multiGet(key, fields); } public void hPut(String key, String hashKey, String value) { stringRedisTemplate.opsForHash().put(key, hashKey, value); } public void hPutAll(String key, Map&lt;String, String&gt; maps) { stringRedisTemplate.opsForHash().putAll(key, maps); } /** * 仅当hashKey不存在时才设置 * * @param key * @param hashKey * @param value * @return */ public Boolean hPutIfAbsent(String key, String hashKey, String value) { return stringRedisTemplate.opsForHash().putIfAbsent(key, hashKey, value); } /** * 删除一个或多个哈希表字段 * * @param key * @param fields * @return */ public Long hDelete(String key, Object... fields) { return stringRedisTemplate.opsForHash().delete(key, fields); } /** * 查看哈希表 key 中，指定的字段是否存在 * * @param key * @param field * @return */ public boolean hExists(String key, String field) { return stringRedisTemplate.opsForHash().hasKey(key, field); } /** * 为哈希表 key 中的指定字段的整数值加上增量 increment * * @param key * @param field * @param increment * @return */ public Long hIncrBy(String key, Object field, long increment) { return stringRedisTemplate.opsForHash().increment(key, field, increment); } /** * 为哈希表 key 中的指定字段的整数值加上增量 increment * * @param key * @param field * @param delta * @return */ public Double hIncrByFloat(String key, Object field, double delta) { return stringRedisTemplate.opsForHash().increment(key, field, delta); } /** * 获取所有哈希表中的字段 * * @param key * @return */ public Set&lt;Object&gt; hKeys(String key) { return stringRedisTemplate.opsForHash().keys(key); } /** * 获取哈希表中字段的数量 * * @param key * @return */ public Long hSize(String key) { return stringRedisTemplate.opsForHash().size(key); } /** * 获取哈希表中所有值 * * @param key * @return */ public List&lt;Object&gt; hValues(String key) { return stringRedisTemplate.opsForHash().values(key); } /** * 迭代哈希表中的键值对 * * @param key * @param options * @return */ public Cursor&lt;Map.Entry&lt;Object, Object&gt;&gt; hScan(String key, ScanOptions options) { return stringRedisTemplate.opsForHash().scan(key, options); } /** ------------------------list相关操作---------------------------- */ /** * 通过索引获取列表中的元素 * * @param key * @param index * @return */ public String lIndex(String key, long index) { return stringRedisTemplate.opsForList().index(key, index); } /** * 获取列表指定范围内的元素 * * @param key * @param start * 开始位置, 0是开始位置 * @param end * 结束位置, -1返回所有 * @return */ public List&lt;String&gt; lRange(String key, long start, long end) { return stringRedisTemplate.opsForList().range(key, start, end); } /** * 存储在list头部 * * @param key * @param value * @return */ public Long lLeftPush(String key, String value) { return stringRedisTemplate.opsForList().leftPush(key, value); } /** * * @param key * @param value * @return */ public Long lLeftPushAll(String key, String... value) { return stringRedisTemplate.opsForList().leftPushAll(key, value); } /** * * @param key * @param value * @return */ public Long lLeftPushAll(String key, Collection&lt;String&gt; value) { return stringRedisTemplate.opsForList().leftPushAll(key, value); } /** * 当list存在的时候才加入 * * @param key * @param value * @return */ public Long lLeftPushIfPresent(String key, String value) { return stringRedisTemplate.opsForList().leftPushIfPresent(key, value); } /** * 如果pivot存在,再pivot前面添加 * * @param key * @param pivot * @param value * @return */ public Long lLeftPush(String key, String pivot, String value) { return stringRedisTemplate.opsForList().leftPush(key, pivot, value); } /** * * @param key * @param value * @return */ public Long lRightPush(String key, String value) { return stringRedisTemplate.opsForList().rightPush(key, value); } /** * * @param key * @param value * @return */ public Long lRightPushAll(String key, String... value) { return stringRedisTemplate.opsForList().rightPushAll(key, value); } /** * * @param key * @param value * @return */ public Long lRightPushAll(String key, Collection&lt;String&gt; value) { return stringRedisTemplate.opsForList().rightPushAll(key, value); } /** * 为已存在的列表添加值 * * @param key * @param value * @return */ public Long lRightPushIfPresent(String key, String value) { return stringRedisTemplate.opsForList().rightPushIfPresent(key, value); } /** * 在pivot元素的右边添加值 * * @param key * @param pivot * @param value * @return */ public Long lRightPush(String key, String pivot, String value) { return stringRedisTemplate.opsForList().rightPush(key, pivot, value); } /** * 通过索引设置列表元素的值 * * @param key * @param index * 位置 * @param value */ public void lSet(String key, long index, String value) { stringRedisTemplate.opsForList().set(key, index, value); } /** * 移出并获取列表的第一个元素 * * @param key * @return 删除的元素 */ public String lLeftPop(String key) { return stringRedisTemplate.opsForList().leftPop(key); } /** * 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止 * * @param key * @param timeout * 等待时间 * @param unit * 时间单位 * @return */ public String lBLeftPop(String key, long timeout, TimeUnit unit) { return stringRedisTemplate.opsForList().leftPop(key, timeout, unit); } /** * 移除并获取列表最后一个元素 * * @param key * @return 删除的元素 */ public String lRightPop(String key) { return stringRedisTemplate.opsForList().rightPop(key); } /** * 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止 * * @param key * @param timeout * 等待时间 * @param unit * 时间单位 * @return */ public String lBRightPop(String key, long timeout, TimeUnit unit) { return stringRedisTemplate.opsForList().rightPop(key, timeout, unit); } /** * 移除列表的最后一个元素，并将该元素添加到另一个列表并返回 * * @param sourceKey * @param destinationKey * @return */ public String lRightPopAndLeftPush(String sourceKey, String destinationKey) { return stringRedisTemplate.opsForList().rightPopAndLeftPush(sourceKey, destinationKey); } /** * 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止 * * @param sourceKey * @param destinationKey * @param timeout * @param unit * @return */ public String lBRightPopAndLeftPush(String sourceKey, String destinationKey, long timeout, TimeUnit unit) { return stringRedisTemplate.opsForList().rightPopAndLeftPush(sourceKey, destinationKey, timeout, unit); } /** * 删除集合中值等于value得元素 * * @param key * @param index * index=0, 删除所有值等于value的元素; index&gt;0, 从头部开始删除第一个值等于value的元素; * index&lt;0, 从尾部开始删除第一个值等于value的元素; * @param value * @return */ public Long lRemove(String key, long index, String value) { return stringRedisTemplate.opsForList().remove(key, index, value); } /** * 裁剪list * * @param key * @param start * @param end */ public void lTrim(String key, long start, long end) { stringRedisTemplate.opsForList().trim(key, start, end); } /** * 获取列表长度 * * @param key * @return */ public Long lLen(String key) { return stringRedisTemplate.opsForList().size(key); } /** --------------------set相关操作-------------------------- */ /** * set添加元素 * * @param key * @param values * @return */ public Long sAdd(String key, String... values) { return stringRedisTemplate.opsForSet().add(key, values); } /** * set移除元素 * * @param key * @param values * @return */ public Long sRemove(String key, Object... values) { return stringRedisTemplate.opsForSet().remove(key, values); } /** * 移除并返回集合的一个随机元素 * * @param key * @return */ public String sPop(String key) { return stringRedisTemplate.opsForSet().pop(key); } /** * 将元素value从一个集合移到另一个集合 * * @param key * @param value * @param destKey * @return */ public Boolean sMove(String key, String value, String destKey) { return stringRedisTemplate.opsForSet().move(key, value, destKey); } /** * 获取集合的大小 * * @param key * @return */ public Long sSize(String key) { return stringRedisTemplate.opsForSet().size(key); } /** * 判断集合是否包含value * * @param key * @param value * @return */ public Boolean sIsMember(String key, Object value) { return stringRedisTemplate.opsForSet().isMember(key, value); } /** * 获取两个集合的交集 * * @param key * @param otherKey * @return */ public Set&lt;String&gt; sIntersect(String key, String otherKey) { return stringRedisTemplate.opsForSet().intersect(key, otherKey); } /** * 获取key集合与多个集合的交集 * * @param key * @param otherKeys * @return */ public Set&lt;String&gt; sIntersect(String key, Collection&lt;String&gt; otherKeys) { return stringRedisTemplate.opsForSet().intersect(key, otherKeys); } /** * key集合与otherKey集合的交集存储到destKey集合中 * * @param key * @param otherKey * @param destKey * @return */ public Long sIntersectAndStore(String key, String otherKey, String destKey) { return stringRedisTemplate.opsForSet().intersectAndStore(key, otherKey, destKey); } /** * key集合与多个集合的交集存储到destKey集合中 * * @param key * @param otherKeys * @param destKey * @return */ public Long sIntersectAndStore(String key, Collection&lt;String&gt; otherKeys, String destKey) { return stringRedisTemplate.opsForSet().intersectAndStore(key, otherKeys, destKey); } /** * 获取两个集合的并集 * * @param key * @param otherKeys * @return */ public Set&lt;String&gt; sUnion(String key, String otherKeys) { return stringRedisTemplate.opsForSet().union(key, otherKeys); } /** * 获取key集合与多个集合的并集 * * @param key * @param otherKeys * @return */ public Set&lt;String&gt; sUnion(String key, Collection&lt;String&gt; otherKeys) { return stringRedisTemplate.opsForSet().union(key, otherKeys); } /** * key集合与otherKey集合的并集存储到destKey中 * * @param key * @param otherKey * @param destKey * @return */ public Long sUnionAndStore(String key, String otherKey, String destKey) { return stringRedisTemplate.opsForSet().unionAndStore(key, otherKey, destKey); } /** * key集合与多个集合的并集存储到destKey中 * * @param key * @param otherKeys * @param destKey * @return */ public Long sUnionAndStore(String key, Collection&lt;String&gt; otherKeys, String destKey) { return stringRedisTemplate.opsForSet().unionAndStore(key, otherKeys, destKey); } /** * 获取两个集合的差集 * * @param key * @param otherKey * @return */ public Set&lt;String&gt; sDifference(String key, String otherKey) { return stringRedisTemplate.opsForSet().difference(key, otherKey); } /** * 获取key集合与多个集合的差集 * * @param key * @param otherKeys * @return */ public Set&lt;String&gt; sDifference(String key, Collection&lt;String&gt; otherKeys) { return stringRedisTemplate.opsForSet().difference(key, otherKeys); } /** * key集合与otherKey集合的差集存储到destKey中 * * @param key * @param otherKey * @param destKey * @return */ public Long sDifference(String key, String otherKey, String destKey) { return stringRedisTemplate.opsForSet().differenceAndStore(key, otherKey, destKey); } /** * key集合与多个集合的差集存储到destKey中 * * @param key * @param otherKeys * @param destKey * @return */ public Long sDifference(String key, Collection&lt;String&gt; otherKeys, String destKey) { return stringRedisTemplate.opsForSet().differenceAndStore(key, otherKeys, destKey); } /** * 获取集合所有元素 * * @param key * @param * @param * @return */ public Set&lt;String&gt; setMembers(String key) { return stringRedisTemplate.opsForSet().members(key); } /** * 随机获取集合中的一个元素 * * @param key * @return */ public String sRandomMember(String key) { return stringRedisTemplate.opsForSet().randomMember(key); } /** * 随机获取集合中count个元素 * * @param key * @param count * @return */ public List&lt;String&gt; sRandomMembers(String key, long count) { return stringRedisTemplate.opsForSet().randomMembers(key, count); } /** * 随机获取集合中count个元素并且去除重复的 * * @param key * @param count * @return */ public Set&lt;String&gt; sDistinctRandomMembers(String key, long count) { return stringRedisTemplate.opsForSet().distinctRandomMembers(key, count); } /** * * @param key * @param options * @return */ public Cursor&lt;String&gt; sScan(String key, ScanOptions options) { return stringRedisTemplate.opsForSet().scan(key, options); } /**------------------zSet相关操作--------------------------------*/ /** * 添加元素,有序集合是按照元素的score值由小到大排列 * * @param key * @param value * @param score * @return */ public Boolean zAdd(String key, String value, double score) { return stringRedisTemplate.opsForZSet().add(key, value, score); } /** * * @param key * @param values * @return */ public Long zAdd(String key, Set&lt;TypedTuple&lt;String&gt;&gt; values) { return stringRedisTemplate.opsForZSet().add(key, values); } /** * * @param key * @param values * @return */ public Long zRemove(String key, Object... values) { return stringRedisTemplate.opsForZSet().remove(key, values); } public Long zRemove(String key, Collection&lt;String&gt; values) { if(values!=null&amp;&amp;!values.isEmpty()){ Object[] objs = values.toArray(new Object[values.size()]); return stringRedisTemplate.opsForZSet().remove(key, objs); } return 0L; } /** * 增加元素的score值，并返回增加后的值 * * @param key * @param value * @param delta * @return */ public Double zIncrementScore(String key, String value, double delta) { return stringRedisTemplate.opsForZSet().incrementScore(key, value, delta); } /** * 返回元素在集合的排名,有序集合是按照元素的score值由小到大排列 * * @param key * @param value * @return 0表示第一位 */ public Long zRank(String key, Object value) { return stringRedisTemplate.opsForZSet().rank(key, value); } /** * 返回元素在集合的排名,按元素的score值由大到小排列 * * @param key * @param value * @return */ public Long zReverseRank(String key, Object value) { return stringRedisTemplate.opsForZSet().reverseRank(key, value); } /** * 获取集合的元素, 从小到大排序 * * @param key * @param start * 开始位置 * @param end * 结束位置, -1查询所有 * @return */ public Set&lt;String&gt; zRange(String key, long start, long end) { return stringRedisTemplate.opsForZSet().range(key, start, end); } /** * 获取zset集合的所有元素, 从小到大排序 * */ public Set&lt;String&gt; zRangeAll(String key) { return zRange(key,0,-1); } /** * 获取集合元素, 并且把score值也获取 * * @param key * @param start * @param end * @return */ public Set&lt;TypedTuple&lt;String&gt;&gt; zRangeWithScores(String key, long start, long end) { return stringRedisTemplate.opsForZSet().rangeWithScores(key, start, end); } /** * 根据Score值查询集合元素 * * @param key * @param min * 最小值 * @param max * 最大值 * @return */ public Set&lt;String&gt; zRangeByScore(String key, double min, double max) { return stringRedisTemplate.opsForZSet().rangeByScore(key, min, max); } /** * 根据Score值查询集合元素, 从小到大排序 * * @param key * @param min * 最小值 * @param max * 最大值 * @return */ public Set&lt;TypedTuple&lt;String&gt;&gt; zRangeByScoreWithScores(String key, double min, double max) { return stringRedisTemplate.opsForZSet().rangeByScoreWithScores(key, min, max); } /** * * @param key * @param min * @param max * @param start * @param end * @return */ public Set&lt;TypedTuple&lt;String&gt;&gt; zRangeByScoreWithScores(String key, double min, double max, long start, long end) { return stringRedisTemplate.opsForZSet().rangeByScoreWithScores(key, min, max, start, end); } /** * 获取集合的元素, 从大到小排序 * * @param key * @param start * @param end * @return */ public Set&lt;String&gt; zReverseRange(String key, long start, long end) { return stringRedisTemplate.opsForZSet().reverseRange(key, start, end); } public Set&lt;String&gt; zReverseRangeByScore(String key, long min, long max) { return stringRedisTemplate.opsForZSet().reverseRangeByScore(key, min, max); } /** * 获取集合的元素, 从大到小排序, 并返回score值 * * @param key * @param start * @param end * @return */ public Set&lt;TypedTuple&lt;String&gt;&gt; zReverseRangeWithScores(String key, long start, long end) { return stringRedisTemplate.opsForZSet().reverseRangeWithScores(key, start, end); } /** * 根据Score值查询集合元素, 从大到小排序 * * @param key * @param min * @param max * @return */ public Set&lt;String&gt; zReverseRangeByScore(String key, double min, double max) { return stringRedisTemplate.opsForZSet().reverseRangeByScore(key, min, max); } /** * 根据Score值查询集合元素, 从大到小排序 * * @param key * @param min * @param max * @return */ public Set&lt;TypedTuple&lt;String&gt;&gt; zReverseRangeByScoreWithScores( String key, double min, double max) { return stringRedisTemplate.opsForZSet().reverseRangeByScoreWithScores(key, min, max); } /** * * @param key * @param min * @param max * @param start * @param end * @return */ public Set&lt;String&gt; zReverseRangeByScore(String key, double min, double max, long start, long end) { return stringRedisTemplate.opsForZSet().reverseRangeByScore(key, min, max, start, end); } /** * 根据score值获取集合元素数量 * * @param key * @param min * @param max * @return */ public Long zCount(String key, double min, double max) { return stringRedisTemplate.opsForZSet().count(key, min, max); } /** * 获取集合大小 * * @param key * @return */ public Long zSize(String key) { return stringRedisTemplate.opsForZSet().size(key); } /** * 获取集合大小 * * @param key * @return */ public Long zZCard(String key) { return stringRedisTemplate.opsForZSet().zCard(key); } /** * 获取集合中value元素的score值 * * @param key * @param value * @return */ public Double zScore(String key, Object value) { return stringRedisTemplate.opsForZSet().score(key, value); } /** * 移除指定索引位置的成员 * * @param key * @param start * @param end * @return */ public Long zRemoveRange(String key, long start, long end) { return stringRedisTemplate.opsForZSet().removeRange(key, start, end); } /** * 根据指定的score值的范围来移除成员 * * @param key * @param min * @param max * @return */ public Long zRemoveRangeByScore(String key, double min, double max) { return stringRedisTemplate.opsForZSet().removeRangeByScore(key, min, max); } /** * 获取key和otherKey的并集并存储在destKey中 * * @param key * @param otherKey * @param destKey * @return */ public Long zUnionAndStore(String key, String otherKey, String destKey) { return stringRedisTemplate.opsForZSet().unionAndStore(key, otherKey, destKey); } /** * * @param key * @param otherKeys * @param destKey * @return */ public Long zUnionAndStore(String key, Collection&lt;String&gt; otherKeys, String destKey) { return stringRedisTemplate.opsForZSet() .unionAndStore(key, otherKeys, destKey); } /** * 交集 * * @param key * @param otherKey * @param destKey * @return */ public Long zIntersectAndStore(String key, String otherKey, String destKey) { return stringRedisTemplate.opsForZSet().intersectAndStore(key, otherKey, destKey); } /** * 交集 * * @param key * @param otherKeys * @param destKey * @return */ public Long zIntersectAndStore(String key, Collection&lt;String&gt; otherKeys, String destKey) { return stringRedisTemplate.opsForZSet().intersectAndStore(key, otherKeys, destKey); } /** * * @param key * @param options * @return */ public Cursor&lt;TypedTuple&lt;String&gt;&gt; zScan(String key, ScanOptions options) { return stringRedisTemplate.opsForZSet().scan(key, options); } /** * 扫描主键，建议使用 * @param patten * @return */ public Set&lt;String&gt; scan(String patten){ Set&lt;String&gt; keys = stringRedisTemplate.execute((RedisCallback&lt;Set&lt;String&gt;&gt;) connection -&gt; { Set&lt;String&gt; result = new HashSet&lt;&gt;(); try (Cursor&lt;byte[]&gt; cursor = connection.scan(new ScanOptions.ScanOptionsBuilder() .match(patten).count(10000).build())) { while (cursor.hasNext()) { result.add(new String(cursor.next())); } } catch (IOException e) { e.printStackTrace(); } return result; }); return keys; } /** * 管道技术，提高性能 * @param type * @param values * @return */ public List&lt;Object&gt; lRightPushPipeline(String type,Collection&lt;String&gt; values){ List&lt;Object&gt; results = stringRedisTemplate.executePipelined(new RedisCallback&lt;Object&gt;() { public Object doInRedis(RedisConnection connection) throws DataAccessException { StringRedisConnection stringRedisConn = (StringRedisConnection)connection; //集合转换数组 String[] strings = values.toArray(new String[values.size()]); //直接批量发送 stringRedisConn.rPush(type, strings); return null; } }); return results; } public List&lt;Object&gt; refreshWithPipeline(String future_key,String topic_key,Collection&lt;String&gt; values){ List&lt;Object&gt; objects = stringRedisTemplate.executePipelined(new RedisCallback&lt;Object&gt;() { @Nullable @Override public Object doInRedis(RedisConnection redisConnection) throws DataAccessException { StringRedisConnection stringRedisConnection = (StringRedisConnection)redisConnection; String[] strings = values.toArray(new String[values.size()]); stringRedisConnection.rPush(topic_key,strings); stringRedisConnection.zRem(future_key,strings); return null; } }); return objects; } /** * 加锁 * * @param name * @param expire * @return */ public String tryLock(String name, long expire) { name = name + \"_lock\"; String token = UUID.randomUUID().toString(); RedisConnectionFactory factory = stringRedisTemplate.getConnectionFactory(); RedisConnection conn = factory.getConnection(); try { //参考redis命令： //set key value [EX seconds] [PX milliseconds] [NX|XX] Boolean result = conn.set( name.getBytes(), token.getBytes(), Expiration.from(expire, TimeUnit.MILLISECONDS), RedisStringCommands.SetOption.SET_IF_ABSENT //NX ); if (result != null &amp;&amp; result) return token; } finally { RedisConnectionUtils.releaseConnection(conn, factory,false); } return null; } } 二.接口封装1.接口package com.heima.schedule.service; import com.heima.model.schedule.dtos.Task; /** * 对外访问接口 */ public interface TaskService { /** * 添加任务 * @param task 任务对象 * @return 任务id */ public long addTask(Task task) ; /** * 取消任务 * @param taskId 任务id * @return 取消结果 */ public boolean cancelTask(long taskId); /** * 按照类型和优先级来拉取任务 * @param type * @param priority * @return */ public Task poll(int type,int priority); } 2.实现类package com.heima.schedule.service.impl; import com.alibaba.fastjson.JSON; import com.baomidou.mybatisplus.core.toolkit.Wrappers; import com.heima.common.constants.ScheduleConstants; import com.heima.common.redis.CacheService; import com.heima.model.schedule.dtos.Task; import com.heima.model.schedule.pojos.Taskinfo; import com.heima.model.schedule.pojos.TaskinfoLogs; import com.heima.schedule.mapper.TaskinfoLogsMapper; import com.heima.schedule.mapper.TaskinfoMapper; import com.heima.schedule.service.TaskService; import lombok.extern.slf4j.Slf4j; import org.apache.commons.lang3.StringUtils; import org.springframework.beans.BeanUtils; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.scheduling.annotation.Scheduled; import org.springframework.stereotype.Service; import org.springframework.transaction.annotation.Transactional; import javax.annotation.PostConstruct; import java.util.Calendar; import java.util.Date; import java.util.List; import java.util.Set; @Service @Transactional @Slf4j public class TaskServiceImpl implements TaskService { /** * 添加延迟任务 * * @param task * @return */ @Override public long addTask(Task task) { //1.添加任务到数据库中 boolean success = addTaskToDb(task); if (success) { //2.添加任务到redis addTaskToCache(task); } return task.getTaskId(); } @Autowired private CacheService cacheService; /** * 把任务添加到redis中 * * @param task */ private void addTaskToCache(Task task) { String key = task.getTaskType() + \"_\" + task.getPriority(); //获取5分钟之后的时间 毫秒值 Calendar calendar = Calendar.getInstance(); calendar.add(Calendar.MINUTE, 5); long nextScheduleTime = calendar.getTimeInMillis(); //2.1 如果任务的执行时间小于等于当前时间，存入list if (task.getExecuteTime() &lt;= System.currentTimeMillis()) { cacheService.lLeftPush(ScheduleConstants.TOPIC + key, JSON.toJSONString(task)); } else if (task.getExecuteTime() &lt;= nextScheduleTime) { //2.2 如果任务的执行时间大于当前时间 &amp;&amp; 小于等于预设时间（未来5分钟） 存入zset中 cacheService.zAdd(ScheduleConstants.FUTURE + key, JSON.toJSONString(task), task.getExecuteTime()); } } @Autowired private TaskinfoMapper taskinfoMapper; @Autowired private TaskinfoLogsMapper taskinfoLogsMapper; /** * 添加任务到数据库中 * * @param task * @return */ private boolean addTaskToDb(Task task) { boolean flag = false; try { //保存任务表 Taskinfo taskinfo = new Taskinfo(); BeanUtils.copyProperties(task, taskinfo); taskinfo.setExecuteTime(new Date(task.getExecuteTime())); taskinfoMapper.insert(taskinfo); //设置taskID task.setTaskId(taskinfo.getTaskId()); //保存任务日志数据 TaskinfoLogs taskinfoLogs = new TaskinfoLogs(); BeanUtils.copyProperties(taskinfo, taskinfoLogs); taskinfoLogs.setVersion(1); taskinfoLogs.setStatus(ScheduleConstants.SCHEDULED); taskinfoLogsMapper.insert(taskinfoLogs); flag = true; } catch (Exception e) { e.printStackTrace(); } return flag; } /** * 取消任务 * @param taskId * @return */ @Override public boolean cancelTask(long taskId) { boolean flag = false; //删除任务，更新日志 Task task = updateDb(taskId,ScheduleConstants.EXECUTED); //删除redis的数据 if(task != null){ removeTaskFromCache(task); flag = true; } return false; } /** * 删除redis中的任务数据 * @param task */ private void removeTaskFromCache(Task task) { String key = task.getTaskType()+\"_\"+task.getPriority(); if(task.getExecuteTime()&lt;=System.currentTimeMillis()){ cacheService.lRemove(ScheduleConstants.TOPIC+key,0,JSON.toJSONString(task)); }else { cacheService.zRemove(ScheduleConstants.FUTURE+key, JSON.toJSONString(task)); } } /** * 删除任务，更新任务日志状态 * @param taskId * @param status * @return */ private Task updateDb(long taskId, int status) { Task task = null; try { //删除任务 taskinfoMapper.deleteById(taskId); TaskinfoLogs taskinfoLogs = taskinfoLogsMapper.selectById(taskId); taskinfoLogs.setStatus(status); taskinfoLogsMapper.updateById(taskinfoLogs); task = new Task(); BeanUtils.copyProperties(taskinfoLogs,task); task.setExecuteTime(taskinfoLogs.getExecuteTime().getTime()); }catch (Exception e){ log.error(\"task cancel exception taskid={}\",taskId); } return task; } /** * 按照类型和优先级拉取任务 * @return */ @Override public Task poll(int type,int priority) { Task task = null; try { String key = type+\"_\"+priority; String task_json = cacheService.lRightPop(ScheduleConstants.TOPIC + key); if(StringUtils.isNotBlank(task_json)){ task = JSON.parseObject(task_json, Task.class); //更新数据库信息 updateDb(task.getTaskId(),ScheduleConstants.EXECUTED); } }catch (Exception e){ e.printStackTrace(); log.error(\"poll task exception\"); } return task; } /** * 未来数据定时刷新 */ @Scheduled(cron = \"0 */1 * * * ?\") public void refresh(){ String token = cacheService.tryLock(\"FUTURE_TASK_SYNC\", 1000 * 30); if(StringUtils.isNotBlank(token)){ log.info(\"未来数据定时刷新---定时任务\"); //获取所有未来数据的集合key Set&lt;String&gt; futureKeys = cacheService.scan(ScheduleConstants.FUTURE + \"*\"); for (String futureKey : futureKeys) {//future_100_50 //获取当前数据的key topic String topicKey = ScheduleConstants.TOPIC+futureKey.split(ScheduleConstants.FUTURE)[1]; //按照key和分值查询符合条件的数据 Set&lt;String&gt; tasks = cacheService.zRangeByScore(futureKey, 0, System.currentTimeMillis()); //同步数据 if(!tasks.isEmpty()){ cacheService.refreshWithPipeline(futureKey,topicKey,tasks); log.info(\"成功的将\"+futureKey+\"刷新到了\"+topicKey); } } } } @Scheduled(cron = \"0 */5 * * * ?\") @PostConstruct public void reloadData() { clearCache(); log.info(\"数据库数据同步到缓存\"); Calendar calendar = Calendar.getInstance(); calendar.add(Calendar.MINUTE, 5); //查看小于未来5分钟的所有任务 List&lt;Taskinfo&gt; allTasks = taskinfoMapper.selectList(Wrappers.&lt;Taskinfo&gt;lambdaQuery().lt(Taskinfo::getExecuteTime,calendar.getTime())); if(allTasks != null &amp;&amp; allTasks.size() &gt; 0){ for (Taskinfo taskinfo : allTasks) { Task task = new Task(); BeanUtils.copyProperties(taskinfo,task); task.setExecuteTime(taskinfo.getExecuteTime().getTime()); addTaskToCache(task); } } } private void clearCache(){ // 删除缓存中未来数据集合和当前消费者队列的所有key Set&lt;String&gt; futurekeys = cacheService.scan(ScheduleConstants.FUTURE + \"*\");// future_ Set&lt;String&gt; topickeys = cacheService.scan(ScheduleConstants.TOPIC + \"*\");// topic_ cacheService.delete(futurekeys); cacheService.delete(topickeys); } } 三.redis内部定时刷新@Scheduled(cron = \"0 */1 * * * ?\") public void refresh() { System.out.println(System.currentTimeMillis() / 1000 + \"执行了定时任务\"); // 获取所有未来数据集合的key值 Set&lt;String&gt; futureKeys = cacheService.scan(ScheduleConstants.FUTURE + \"*\");// future_* for (String futureKey : futureKeys) { // future_250_250 String topicKey = ScheduleConstants.TOPIC + futureKey.split(ScheduleConstants.FUTURE)[1]; //获取该组key下当前需要消费的任务数据 Set&lt;String&gt; tasks = cacheService.zRangeByScore(futureKey, 0, System.currentTimeMillis()); if (!tasks.isEmpty()) { //将这些任务数据添加到消费者队列中 cacheService.refreshWithPipeline(futureKey, topicKey, tasks); System.out.println(\"成功的将\" + futureKey + \"下的当前需要执行的任务数据刷新到\" + topicKey + \"下\"); } } } 四.分布式锁Redis/** * 加锁 * * @param name * @param expire * @return */ public String tryLock(String name, long expire) { name = name + \"_lock\"; String token = UUID.randomUUID().toString(); RedisConnectionFactory factory = stringRedisTemplate.getConnectionFactory(); RedisConnection conn = factory.getConnection(); try { //参考redis命令： //set key value [EX seconds] [PX milliseconds] [NX|XX] Boolean result = conn.set( name.getBytes(), token.getBytes(), Expiration.from(expire, TimeUnit.MILLISECONDS), RedisStringCommands.SetOption.SET_IF_ABSENT //NX ); if (result != null &amp;&amp; result) return token; } finally { RedisConnectionUtils.releaseConnection(conn, factory,false); } return null; } 实现 /** * 未来数据定时刷新 */ @Scheduled(cron = \"0 */1 * * * ?\") public void refresh(){ String token = cacheService.tryLock(\"FUTURE_TASK_SYNC\", 1000 * 30); if(StringUtils.isNotBlank(token)){ log.info(\"未来数据定时刷新---定时任务\"); //获取所有未来数据的集合key Set&lt;String&gt; futureKeys = cacheService.scan(ScheduleConstants.FUTURE + \"*\"); for (String futureKey : futureKeys) {//future_100_50 //获取当前数据的key topic String topicKey = ScheduleConstants.TOPIC+futureKey.split(ScheduleConstants.FUTURE)[1]; //按照key和分值查询符合条件的数据 Set&lt;String&gt; tasks = cacheService.zRangeByScore(futureKey, 0, System.currentTimeMillis()); //同步数据 if(!tasks.isEmpty()){ cacheService.refreshWithPipeline(futureKey,topicKey,tasks); log.info(\"成功的将\"+futureKey+\"刷新到了\"+topicKey); } } } } 五.数据库数据同步Redis@Scheduled(cron = \"0 */5 * * * ?\") @PostConstruct public void reloadData() { clearCache(); log.info(\"数据库数据同步到缓存\"); Calendar calendar = Calendar.getInstance(); calendar.add(Calendar.MINUTE, 5); //查看小于未来5分钟的所有任务 List&lt;Taskinfo&gt; allTasks = taskinfoMapper.selectList(Wrappers.&lt;Taskinfo&gt;lambdaQuery().lt(Taskinfo::getExecuteTime,calendar.getTime())); if(allTasks != null &amp;&amp; allTasks.size() &gt; 0){ for (Taskinfo taskinfo : allTasks) { Task task = new Task(); BeanUtils.copyProperties(taskinfo,task); task.setExecuteTime(taskinfo.getExecuteTime().getTime()); addTaskToCache(task); } } } private void clearCache(){ // 删除缓存中未来数据集合和当前消费者队列的所有key Set&lt;String&gt; futurekeys = cacheService.scan(ScheduleConstants.FUTURE + \"*\");// future_ Set&lt;String&gt; topickeys = cacheService.scan(ScheduleConstants.TOPIC + \"*\");// topic_ cacheService.delete(futurekeys); cacheService.delete(topickeys); }","categories":[{"name":"延时任务","slug":"延时任务","permalink":"https://macongmc.github.io/categories/%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1/"}],"tags":[{"name":"redis","slug":"redis","permalink":"https://macongmc.github.io/tags/redis/"}],"author":"马聪"},{"title":"文档操作API","slug":"文档操作API","date":"2022-07-31T13:29:15.000Z","updated":"2022-07-31T13:29:15.000Z","comments":true,"path":"posts/bbabe393.html","link":"","permalink":"https://macongmc.github.io/posts/bbabe393.html","excerpt":"","text":"1.需求分析使用Java开发语言对word文档的数据存储到数据库中。 2.技术1. poi Apipoi读取分为顺序读取和根据类型读取。 首先 获取文档 XWPFDocument docx = new XWPFDocument(new FileInputStream(\"./deepoove.docx\")); 一.顺序读写核心api List&lt;IBodyElement&gt; list=docx.getBodyElements();//获取全文数据 \"PARAGRAPH\".equals(iBodyElement.getElementType().toString();//读取到之后根据类型向上转型来展示 XWPFParagraph para=(XWPFParagraph)iBodyElement; //文本数据 XWPFTable table=(XWPFTable)iBodyElement;//表格数据 局限性： poi 的getElementType()里只有表格和文本数据，图片会被直接忽略。 BodyElementType 源码 package org.apache.poi.xwpf.usermodel; public enum BodyElementType { CONTENTCONTROL, PARAGRAPH, TABLE; private BodyElementType() { } } 顺序读取案例 public static String toString(String path) throws IOException{ FileInputStream is = new FileInputStream(path); XWPFDocument doc = new XWPFDocument(is); int index=0; String m=\"\"; int n=1; int csize=0; List&lt;IBodyElement&gt; list=doc.getBodyElements(); for(IBodyElement iBodyElement:list){ if(\"PARAGRAPH\".equals(iBodyElement.getElementType().toString())){//读取文档中段落 XWPFParagraph para=(XWPFParagraph)iBodyElement; System.out.println(para.getText()); }else if(\"TABLE\".equals(iBodyElement.getElementType().toString())){ //读取文档中表格 XWPFTable table=(XWPFTable)iBodyElement; List&lt;XWPFTableRow&gt; rows = table.getRows(); for(int y=0;y&lt;rows.size();y++) { XWPFTableRow row=rows.get(y); List&lt;XWPFTableCell&gt; cells = row.getTableCells(); csize=cells.size(); for (int z=0;z&lt;csize;z++) { XWPFTableCell cell=cells.get(z); if(cell.getCTTc().getTcPr().getGridSpan()!=null){ n=Integer.parseInt(cell.getCTTc().getTcPr().getGridSpan().getVal().toString()); } m=\"\"; if(cell.getCTTc().getTcPr().getVMerge()!=null){ if(cell.getCTTc().getTcPr().getVMerge().getVal()!=null){ m=cell.getCTTc().getTcPr().getVMerge().getVal().toString(); }else{ m=null; } } System.out.print(index+\"-\"+csize+\"-\"+y+\"-\"+z+\"-\"+n+\"-\"+m+\":\"+cell.getText()+\" \"); } System.out.println(); } } } is.close(); return \"\"; } public static void main( String[] args ) throws IOException{ toString(\"C:\\\\Users\\\\admin\\\\Desktop\\\\553e34d7-e899-4f5c-a1e7-1889f5c2dfd0.docx\"); } } 二.根据类型读写// 段落 List&lt;XWPFParagraph&gt; paragraphs = doc.getParagraphs(); // 表格 List&lt;XWPFTable&gt; tables = doc.getTables(); // 图片 List&lt;XWPFPictureData&gt; allPictures = doc.getAllPictures(); // 页眉 List&lt;XWPFHeader&gt; headerList = doc.getHeaderList(); // 页脚 List&lt;XWPFFooter&gt; footerList = doc.getFooterList(); 根据段落读取 List&lt;XWPFParagraph&gt; paras = doc.getParagraphs(); for (XWPFParagraph para : paras) { String text = para.getText(); System.out.println(text); } 根据表格读取 List&lt;XWPFParagraph&gt; paras = doc.getParagraphs(); //获取文档中所有的表格 List&lt;XWPFTable&gt; tables = doc.getTables(); List&lt;XWPFTableRow&gt; rows; List&lt;XWPFTableCell&gt; cells; for (XWPFTable table : tables) { rows = table.getRows(); for (XWPFTableRow row : rows) { cells = row.getTableCells(); for (XWPFTableCell cell : cells) { System.out.println(cell); } } } 根据图片读取 public static void doxc() throws InvalidFormatException { String importPath = \"E://123.docx\"; String absolutePath = \"E://qwe//\"; try { FileInputStream inputStream = new FileInputStream(importPath); XWPFDocument xDocument = new XWPFDocument(inputStream); List&lt;XWPFParagraph&gt; paragraphs = xDocument.getParagraphs(); List&lt;XWPFPictureData&gt; pictures = xDocument.getAllPictures(); Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;(); for(XWPFPictureData picture : pictures){ String id = picture.getParent().getRelationId(picture); File folder = new File(absolutePath); if (!folder.exists()) { folder.mkdirs(); } String rawName = picture.getFileName(); String fileExt = rawName.substring(rawName.lastIndexOf(\".\")); String newName = System.currentTimeMillis() + UUID.randomUUID().toString() + fileExt; File saveFile = new File(absolutePath + File.separator + newName); @SuppressWarnings(\"resource\") FileOutputStream fos = new FileOutputStream(saveFile); fos.write(picture.getData()); System.out.println(id); System.out.println(saveFile.getAbsolutePath()); map.put(id, saveFile.getAbsolutePath()); } String text = \"\"; for(XWPFParagraph paragraph : paragraphs){ //System.out.println(paragraph.getParagraphText()); List&lt;XWPFRun&gt; runs = paragraph.getRuns(); for(XWPFRun run : runs){ /*System.out.println(run.getCTR().xmlText());*/ if(run.getCTR().xmlText().indexOf(\"&lt;w:drawing&gt;\")!=-1){ String runXmlText = run.getCTR().xmlText(); int rIdIndex = runXmlText.indexOf(\"r:embed\"); int rIdEndIndex = runXmlText.indexOf(\"/&gt;\", rIdIndex); String rIdText = runXmlText.substring(rIdIndex, rIdEndIndex); System.out.println(rIdText.split(\"\\\"\")[1].substring(\"rId\".length())); String id = rIdText.split(\"\\\"\")[1]; System.out.println(map.get(id)); text = text +\"&lt;img src = '\"+map.get(id)+\"'/&gt;\"; }else{ text = text + run; } } } System.out.println(text); } catch (IOException e) { // TODO Auto-generated catch block e.printStackTrace(); } } 2.spire.doc API一.转换方法docx转化html //实例化Document类的对象 Document doc = new Document(); //加载Word文档 doc.loadFromFile(\"inputfile.docx\"); //保存为HTML格式 doc.saveToFile(\"ToHtml.html\",FileFormat.Html); doc.dispose(); docx转PDF Document doc = new Document(); //加载Word doc.loadFromFile(\"测试.docx\"); //保存为PDF格式 doc.saveToFile(\"WordToPDF.pdf\",FileFormat.PDF); 主要根据FileFormat枚举类来进行类型选择； 二.案例import com.spire.doc.*; public class WordtoHtml { public static void main(String[] args) { //实例化Document类的对象 Document doc = new Document(); //加载Word文档 doc.loadFromFile(\"inputfile.docx\"); //保存为HTML格式 doc.saveToFile(\"ToHtml.html\",FileFormat.Html); doc.dispose(); } } 3.jsoup API一.读取html方法jsoup解析Jsoup提供一系列的静态解析方法生成Document对象static Document parse(File in, String charsetName)static Document parse(File in, String charsetName, String baseUri)static Document parse(InputStream in, String charsetName, String baseUri)static Document parse(String html)static Document parse(String html, String baseUri)static Document parse(URL url, int timeoutMillis)static Document parseBodyFragment(String bodyHtml)static Document parseBodyFragment(String bodyHtml, String baseUri)其中baseUri表示检索到的相对URL是相对于baseUriURL的其中charsetName表示字符集 案例 Document docx = Jsoup.parse(new File(html),\"GBK\"); 解析分为顺序解析和根据标签等解析。 1.全文顺序解析 Elements allElements = docx.getAllElements(); 2.根据特殊标签解析 docx.getElementsByTag(); // 指定标签 docx.getElementsByClass();//指定类 docx.getElementById();//指定ID 二.案例Elements allElements = docx.getAllElements(); int flag = 1; boolean flagOne = false; List&lt;Image&gt; stringList = new ArrayList&lt;&gt;();; String tu = \"图\"; int count = 1; for (Element allElement : allElements) { if (allElement.tagName().equals(\"span\") &amp;&amp; allElement.getElementsByTag(\"span\").text().contains(\"、附图\")){ String style = allElement.attr(\"style\"); if (style.equals(\"font-size:22.0pt;font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';lang:EN-US;mso-fareast-language:ZH-CN;mso-ansi-language:AR-SA;font-weight:bold;\")){ flagOne = true; } flag++; } if (allElement.tagName().equals(\"img\") &amp;&amp; flagOne == true){ Image image = new Image(tu+count,docPath+\"/\"+allElement.attr(\"src\"),file.getOriginalFilename()); count++; stringList.add(image); } if(allElement.tagName().equals(\"img\") &amp;&amp; flag==3){ Image image = new Image(tu+count,docPath+\"/\"+allElement.attr(\"src\"),file.getOriginalFilename()); count++; stringList.add(image); } } 3.综合案例如樟岭隧道进口雷达检测报告-何登凯-审核人.docx,中部引黄工程施工10标雷达检测报告 (3)(1).docx 遇见问题： poi 顺序读取忽略图片，类型读取无法筛选附图的图片所在。 故使用poi进行所有表格读取。 核心代码 public void downDB(MultipartFile file,List&lt;Image&gt; all) throws IOException { String word = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf(\".\")); InputStream is = file.getInputStream(); XWPFDocument doc = new XWPFDocument(is); //获取文档中所有的表格 List&lt;XWPFTable&gt; tables = doc.getTables(); int count = 1; for (XWPFTable table : tables) { //表格属性 storageUtils.storageDB(table,all); } this.close(is); } @Async public void storageDB(XWPFTable table,List&lt;Image&gt; list) { List&lt;XWPFTableRow&gt; rows = table.getRows(); if (rows.get(0).getTableCells().size()&gt;=7) { String text = rows.get(0).getTableCells().get(4).getText(); switch (text) { case \"设计厚度（cm）\": dbConcreteReinforcement(table,list); break; case \"缺陷类型\": dbNotDenseSummary(table,list); break; case \"环向钢筋实测数量（根）\": dbRebarProblems(table,list); break; default: break; } }else if(rows.get(0).getTableCells().size() == 1) { String text = rows.get(1).getTableCells().get(2).getText(); switch (text){ case \"缺陷类型\": dbInternalDefects(table,list); break; case \"围岩类别\" : dbInsufficientThickness(table,list); break; default: break; } } } private void dbInsufficientThickness(XWPFTable table,List&lt;Image&gt; list) { List&lt;Image&gt; all = getList(list); List&lt;XWPFTableRow&gt; rows; List&lt;XWPFTableCell&gt; cells; List&lt;InsufficientThickness&gt; insufficientThicknesses = new ArrayList&lt;&gt;(); rows = table.getRows(); for (int i = 2; i &lt; rows.size(); i++) { cells= rows.get(i).getTableCells(); if (cells.get(0).getText().equals(\"缺陷位置及桩号\")){ continue; } String text = cells.get(5).getText(); for (Image image : all) { if (text.contains(image.getName())){ text = image.getUrl(); break; } } InsufficientThickness insufficientThickness = new InsufficientThickness( cells.get(0).getText(), new BigDecimal(cells.get(1).getText()), cells.get(2).getText(), cells.get(3).getText(), cells.get(4).getText(), text ); insufficientThicknesses.add(insufficientThickness); } insufficientThicknessService.saveList(insufficientThicknesses); } 根基表格设置实体类映射数据库，在附图字段要存储图片的实际路径。 故需要把图片读取出来，并且知道图片路径。 设计实体用来放图片 名称 位置 文件名称。 读取图片把word转换为html使用spire.doc 核心代码 com.spire.doc.Document doc = new com.spire.doc.Document(); //加载Word文档 doc.loadFromFile(path); //保存为HTML格式 String html = \"D:\\\\html\\\\\"+substring+ \".html\"; doc.saveToFile(html, FileFormat.Html); doc.dispose(); 转换为html后根据标签筛选进行图片过滤。 核心代码 public void saveHtml(MultipartFile file) throws IOException { InputStream in = file.getInputStream(); // 构建目标文件 String substring = file.getOriginalFilename().substring(0,file.getOriginalFilename().lastIndexOf(\".\")); String path = \"D:\\\\html\\\\\"+substring+ \".docx\"; String docPath =\"D:\\\\html\"; File fileCopy = new File(path); OutputStream out = null; try { if (!fileCopy.getParentFile().exists()) { fileCopy.getParentFile().mkdirs(); } try { file.transferTo(fileCopy); } catch (IOException e) { //抛出异常 } // 源文件创建输入流 // 目标文件创建输出流 out = new FileOutputStream(fileCopy, true); // 创建字节数组 byte[] temp = new byte[1024]; int length = 0; // 源文件读取一部分内容 while ((length = in.read(temp)) != -1) { // 目标文件写入一部分内容 out.write(temp, 0, length); } com.spire.doc.Document doc = new com.spire.doc.Document(); //加载Word文档 doc.loadFromFile(path); //保存为HTML格式 String html = \"D:\\\\html\\\\\"+substring+ \".html\"; doc.saveToFile(html, FileFormat.Html); doc.dispose(); ValueOperations valueOperations = redisTemplate.opsForValue(); valueOperations.set(\"keyDoc\",file.getOriginalFilename()); //读取.html文件为字符串 //解析字符串为Document对象 Document docx = Jsoup.parse(new File(html),\"GBK\"); //获取body元素，获取class=\"fc\"的table元素 Elements allElements = docx.getAllElements(); int flag = 1; boolean flagOne = false; List&lt;Image&gt; stringList = new ArrayList&lt;&gt;();; String tu = \"图\"; int count = 1; for (Element allElement : allElements) { if (allElement.tagName().equals(\"span\") &amp;&amp; allElement.getElementsByTag(\"span\").text().contains(\"、附图\")){ String style = allElement.attr(\"style\"); if (style.equals(\"font-size:22.0pt;font-family:Calibri;mso-fareast-font-family:宋体;mso-bidi-font-family:'Times New Roman';lang:EN-US;mso-fareast-language:ZH-CN;mso-ansi-language:AR-SA;font-weight:bold;\")){ flagOne = true; } flag++; } if (allElement.tagName().equals(\"img\") &amp;&amp; flagOne == true){ Image image = new Image(tu+count,docPath+\"/\"+allElement.attr(\"src\"),file.getOriginalFilename()); count++; stringList.add(image); } if(allElement.tagName().equals(\"img\") &amp;&amp; flag==3){ Image image = new Image(tu+count,docPath+\"/\"+allElement.attr(\"src\"),file.getOriginalFilename()); count++; stringList.add(image); } } imageDao.saveList(stringList); } catch (Exception e) { e.printStackTrace(); } finally { try { // 关闭文件输入输出流 in.close(); out.close(); } catch (Exception e) { e.printStackTrace(); } } }","categories":[{"name":"API","slug":"API","permalink":"https://macongmc.github.io/categories/API/"}],"tags":[{"name":"word","slug":"word","permalink":"https://macongmc.github.io/tags/word/"},{"name":"html","slug":"html","permalink":"https://macongmc.github.io/tags/html/"}],"author":"马聪"},{"title":"SDK内容安全","slug":"SDK内容安全","date":"2022-07-31T12:42:46.000Z","updated":"2022-07-31T12:42:46.000Z","comments":true,"path":"posts/57bcaeae.html","link":"","permalink":"https://macongmc.github.io/posts/57bcaeae.html","excerpt":"","text":"一.技术说明1.阿里云内容安全 内容安全控制台 2.在在AccessKey管理页面管理您的AccessKeyID和AccessKeySecret 二.文本内容审核接口文本垃圾内容检测：https://help.aliyun.com/document_detail/70439.html?spm=a2c4g.11186623.6.659.35ac3db3l0wV5k 文本垃圾内容Java SDK: https://help.aliyun.com/document_detail/53427.html?spm=a2c4g.11186623.6.717.466d7544QbU8Lr 三.图片审核接口图片垃圾内容检测：https://help.aliyun.com/document_detail/70292.html?spm=a2c4g.11186623.6.616.5d7d1e7f9vDRz4 图片垃圾内容Java SDK: https://help.aliyun.com/document_detail/53424.html?spm=a2c4g.11186623.6.715.c8f69b12ey35j4 四.集成使用1.依赖 &lt;dependency&gt; &lt;groupId&gt;com.aliyun&lt;/groupId&gt; &lt;artifactId&gt;aliyun-java-sdk-core&lt;/artifactId&gt; &lt;version&gt;4.1.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.aliyun&lt;/groupId&gt; &lt;artifactId&gt;aliyun-java-sdk-green&lt;/artifactId&gt; &lt;version&gt;3.6.5&lt;/version&gt; &lt;/dependency&gt; 2.配置accessKeyId和secret aliyun: accessKeyId: secret: #aliyun.scenes=porn,terrorism,ad,qrcode,live,logo scenes: terrorism 3.封装方法 封装方法：http://82.157.254.101:9000 spring.factories中加入两个类 五.自管理敏感词DFA全称为：Deterministic Finite Automaton,即确定有穷自动机。 存储：一次性的把所有的敏感词存储到了多个map中，就是下图表示这种结构 封装方法 package com.heima.utils.common; import java.util.*; public class SensitiveWordUtil { public static Map&lt;String, Object&gt; dictionaryMap = new HashMap&lt;&gt;(); /** * 生成关键词字典库 * @param words * @return */ public static void initMap(Collection&lt;String&gt; words) { if (words == null) { System.out.println(\"敏感词列表不能为空\"); return ; } // map初始长度words.size()，整个字典库的入口字数(小于words.size()，因为不同的词可能会有相同的首字) Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(words.size()); // 遍历过程中当前层次的数据 Map&lt;String, Object&gt; curMap = null; Iterator&lt;String&gt; iterator = words.iterator(); while (iterator.hasNext()) { String word = iterator.next(); curMap = map; int len = word.length(); for (int i =0; i &lt; len; i++) { // 遍历每个词的字 String key = String.valueOf(word.charAt(i)); // 当前字在当前层是否存在, 不存在则新建, 当前层数据指向下一个节点, 继续判断是否存在数据 Map&lt;String, Object&gt; wordMap = (Map&lt;String, Object&gt;) curMap.get(key); if (wordMap == null) { // 每个节点存在两个数据: 下一个节点和isEnd(是否结束标志) wordMap = new HashMap&lt;&gt;(2); wordMap.put(\"isEnd\", \"0\"); curMap.put(key, wordMap); } curMap = wordMap; // 如果当前字是词的最后一个字，则将isEnd标志置1 if (i == len -1) { curMap.put(\"isEnd\", \"1\"); } } } dictionaryMap = map; } /** * 搜索文本中某个文字是否匹配关键词 * @param text * @param beginIndex * @return */ private static int checkWord(String text, int beginIndex) { if (dictionaryMap == null) { throw new RuntimeException(\"字典不能为空\"); } boolean isEnd = false; int wordLength = 0; Map&lt;String, Object&gt; curMap = dictionaryMap; int len = text.length(); // 从文本的第beginIndex开始匹配 for (int i = beginIndex; i &lt; len; i++) { String key = String.valueOf(text.charAt(i)); // 获取当前key的下一个节点 curMap = (Map&lt;String, Object&gt;) curMap.get(key); if (curMap == null) { break; } else { wordLength ++; if (\"1\".equals(curMap.get(\"isEnd\"))) { isEnd = true; } } } if (!isEnd) { wordLength = 0; } return wordLength; } /** * 获取匹配的关键词和命中次数 * @param text * @return */ public static Map&lt;String, Integer&gt; matchWords(String text) { Map&lt;String, Integer&gt; wordMap = new HashMap&lt;&gt;(); int len = text.length(); for (int i = 0; i &lt; len; i++) { int wordLength = checkWord(text, i); if (wordLength &gt; 0) { String word = text.substring(i, i + wordLength); // 添加关键词匹配次数 if (wordMap.containsKey(word)) { wordMap.put(word, wordMap.get(word) + 1); } else { wordMap.put(word, 1); } i += wordLength - 1; } } return wordMap; } public static void main(String[] args) { List&lt;String&gt; list = new ArrayList&lt;&gt;(); list.add(\"法轮\"); list.add(\"法轮功\"); list.add(\"冰毒\"); initMap(list); String content=\"我是一个好人，并不会卖冰毒，也不操练法轮功,我真的不卖冰毒\"; Map&lt;String, Integer&gt; map = matchWords(content); System.out.println(map); } } 六.图片识别文字Tess4j依赖 &lt;dependency&gt; &lt;groupId&gt;net.sourceforge.tess4j&lt;/groupId&gt; &lt;artifactId&gt;tess4j&lt;/artifactId&gt; &lt;version&gt;4.1.1&lt;/version&gt; &lt;/dependency&gt; 工具类 package com.heima.common.tess4j; import lombok.Getter; import lombok.Setter; import net.sourceforge.tess4j.ITesseract; import net.sourceforge.tess4j.Tesseract; import net.sourceforge.tess4j.TesseractException; import org.springframework.boot.context.properties.ConfigurationProperties; import org.springframework.stereotype.Component; import java.awt.image.BufferedImage; @Getter @Setter @Component @ConfigurationProperties(prefix = \"tess4j\") public class Tess4jClient { private String dataPath; //路径 private String language; //名称 public String doOCR(BufferedImage image) throws TesseractException { //创建Tesseract对象 ITesseract tesseract = new Tesseract(); //设置字体库路径 tesseract.setDatapath(dataPath); //中文识别 tesseract.setLanguage(language); //执行ocr识别 String result = tesseract.doOCR(image); //替换回车和tal键 使结果为一行 result = result.replaceAll(\"\\\\r|\\\\n\", \"-\").replaceAll(\" \", \"\"); return result; } }","categories":[{"name":"SDK","slug":"SDK","permalink":"https://macongmc.github.io/categories/SDK/"}],"tags":[{"name":"阿里云","slug":"阿里云","permalink":"https://macongmc.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"},{"name":"内容安全","slug":"内容安全","permalink":"https://macongmc.github.io/tags/%E5%86%85%E5%AE%B9%E5%AE%89%E5%85%A8/"},{"name":"机审核","slug":"机审核","permalink":"https://macongmc.github.io/tags/%E6%9C%BA%E5%AE%A1%E6%A0%B8/"}],"author":"马聪"},{"title":"minio","slug":"minio","date":"2022-07-27T11:47:36.000Z","updated":"2022-07-27T11:47:36.000Z","comments":true,"path":"posts/cad5b665.html","link":"","permalink":"https://macongmc.github.io/posts/cad5b665.html","excerpt":"","text":"一.Minio部署使用docker安装拉取镜像 docker pull minio/minio 创建目录 mkdir -p /data/minio/config mkdir -p /data/minio/data 运行容器 docker run -p 9000:9000 -p 9090:9090 \\ --net=host \\ --name minio \\ -d --restart=always \\ -e \"MINIO_ACCESS_KEY=minio\" \\ -e \"MINIO_SECRET_KEY=minio123\" \\ -v /mydata/minio/data:/mydata/minio/data \\ -v /mydata/minio/config:/mydata/minio/config \\ minio/minio server \\ /data --console-address \":9090\" -address \":9000\" 控制台地址 二.封装MinIO为starter1.导入依赖&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-autoconfigure&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.minio&lt;/groupId&gt; &lt;artifactId&gt;minio&lt;/artifactId&gt; &lt;version&gt;7.1.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt; &lt;optional&gt;true&lt;/optional&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt; &lt;/dependency&gt; &lt;/dependencies&gt; 2.配置类MinIOConfigProperties import lombok.Data; import org.springframework.boot.context.properties.ConfigurationProperties; import java.io.Serializable; @Data @ConfigurationProperties(prefix = \"minio\") // 文件上传 配置前缀file.oss public class MinIOConfigProperties implements Serializable { private String accessKey; private String secretKey; private String bucket; private String endpoint; private String readPath; } MinIOConfig import com.heima.file.service.FileStorageService; import io.minio.MinioClient; import lombok.Data; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.autoconfigure.condition.ConditionalOnClass; import org.springframework.boot.context.properties.EnableConfigurationProperties; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; @Data @Configuration @EnableConfigurationProperties({MinIOConfigProperties.class}) //当引入FileStorageService接口时 @ConditionalOnClass(FileStorageService.class) public class MinIOConfig { @Autowired private MinIOConfigProperties minIOConfigProperties; @Bean public MinioClient buildMinioClient(){ return MinioClient .builder() .credentials(minIOConfigProperties.getAccessKey(), minIOConfigProperties.getSecretKey()) .endpoint(minIOConfigProperties.getEndpoint()) .build(); } } 3.封装操作minIO类FileStorageService import java.io.InputStream; /** * @author itheima */ public interface FileStorageService { /** * 上传图片文件 * @param prefix 文件前缀 * @param filename 文件名 * @param inputStream 文件流 * @return 文件全路径 */ public String uploadImgFile(String prefix, String filename,InputStream inputStream); /** * 上传html文件 * @param prefix 文件前缀 * @param filename 文件名 * @param inputStream 文件流 * @return 文件全路径 */ public String uploadHtmlFile(String prefix, String filename,InputStream inputStream); /** * 删除文件 * @param pathUrl 文件全路径 */ public void delete(String pathUrl); /** * 下载文件 * @param pathUrl 文件全路径 * @return * */ public byte[] downLoadFile(String pathUrl); } MinIOFileStorageService import com.heima.file.config.MinIOConfig; import com.heima.file.config.MinIOConfigProperties; import com.heima.file.service.FileStorageService; import io.minio.GetObjectArgs; import io.minio.MinioClient; import io.minio.PutObjectArgs; import io.minio.RemoveObjectArgs; import lombok.extern.slf4j.Slf4j; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.context.properties.EnableConfigurationProperties; import org.springframework.context.annotation.Import; import org.springframework.util.StringUtils; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.io.InputStream; import java.text.SimpleDateFormat; import java.util.Date; @Slf4j @EnableConfigurationProperties(MinIOConfigProperties.class) @Import(MinIOConfig.class) public class MinIOFileStorageService implements FileStorageService { @Autowired private MinioClient minioClient; @Autowired private MinIOConfigProperties minIOConfigProperties; private final static String separator = \"/\"; /** * @param dirPath * @param filename yyyy/mm/dd/file.jpg * @return */ public String builderFilePath(String dirPath,String filename) { StringBuilder stringBuilder = new StringBuilder(50); if(!StringUtils.isEmpty(dirPath)){ stringBuilder.append(dirPath).append(separator); } SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy/MM/dd\"); String todayStr = sdf.format(new Date()); stringBuilder.append(todayStr).append(separator); stringBuilder.append(filename); return stringBuilder.toString(); } /** * 上传图片文件 * @param prefix 文件前缀 * @param filename 文件名 * @param inputStream 文件流 * @return 文件全路径 */ @Override public String uploadImgFile(String prefix, String filename,InputStream inputStream) { String filePath = builderFilePath(prefix, filename); try { PutObjectArgs putObjectArgs = PutObjectArgs.builder() .object(filePath) .contentType(\"image/jpg\") .bucket(minIOConfigProperties.getBucket()).stream(inputStream,inputStream.available(),-1) .build(); minioClient.putObject(putObjectArgs); StringBuilder urlPath = new StringBuilder(minIOConfigProperties.getReadPath()); urlPath.append(separator+minIOConfigProperties.getBucket()); urlPath.append(separator); urlPath.append(filePath); return urlPath.toString(); }catch (Exception ex){ log.error(\"minio put file error.\",ex); throw new RuntimeException(\"上传文件失败\"); } } /** * 上传html文件 * @param prefix 文件前缀 * @param filename 文件名 * @param inputStream 文件流 * @return 文件全路径 */ @Override public String uploadHtmlFile(String prefix, String filename,InputStream inputStream) { String filePath = builderFilePath(prefix, filename); try { PutObjectArgs putObjectArgs = PutObjectArgs.builder() .object(filePath) .contentType(\"text/html\") .bucket(minIOConfigProperties.getBucket()).stream(inputStream,inputStream.available(),-1) .build(); minioClient.putObject(putObjectArgs); StringBuilder urlPath = new StringBuilder(minIOConfigProperties.getReadPath()); urlPath.append(separator+minIOConfigProperties.getBucket()); urlPath.append(separator); urlPath.append(filePath); return urlPath.toString(); }catch (Exception ex){ log.error(\"minio put file error.\",ex); ex.printStackTrace(); throw new RuntimeException(\"上传文件失败\"); } } /** * 删除文件 * @param pathUrl 文件全路径 */ @Override public void delete(String pathUrl) { String key = pathUrl.replace(minIOConfigProperties.getEndpoint()+\"/\",\"\"); int index = key.indexOf(separator); String bucket = key.substring(0,index); String filePath = key.substring(index+1); // 删除Objects RemoveObjectArgs removeObjectArgs = RemoveObjectArgs.builder().bucket(bucket).object(filePath).build(); try { minioClient.removeObject(removeObjectArgs); } catch (Exception e) { log.error(\"minio remove file error. pathUrl:{}\",pathUrl); e.printStackTrace(); } } /** * 下载文件 * @param pathUrl 文件全路径 * @return 文件流 * */ @Override public byte[] downLoadFile(String pathUrl) { String key = pathUrl.replace(minIOConfigProperties.getEndpoint()+\"/\",\"\"); int index = key.indexOf(separator); String bucket = key.substring(0,index); String filePath = key.substring(index+1); InputStream inputStream = null; try { inputStream = minioClient.getObject(GetObjectArgs.builder().bucket(minIOConfigProperties.getBucket()).object(filePath).build()); } catch (Exception e) { log.error(\"minio down file error. pathUrl:{}\",pathUrl); e.printStackTrace(); } ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); byte[] buff = new byte[100]; int rc = 0; while (true) { try { if (!((rc = inputStream.read(buff, 0, 100)) &gt; 0)) break; } catch (IOException e) { e.printStackTrace(); } byteArrayOutputStream.write(buff, 0, rc); } return byteArrayOutputStream.toByteArray(); } } 4.对外加入自动配置在resources中新建META-INF/spring.factories org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\ com.heima.file.service.impl.MinIOFileStorageService 三.其他微服务使用第一，导入file-starter的依赖 第二，在微服务中添加minio所需要的配置 minio: accessKey: minio secretKey: minio123 bucket: leadnews endpoint: http://192.168.200.130:9000 readPath: http://192.168.200.130:9000 注入 @Autowired private FileStorageService fileStorageService; 修改minio权限","categories":[{"name":"API","slug":"API","permalink":"https://macongmc.github.io/categories/API/"}],"tags":[{"name":"存储","slug":"存储","permalink":"https://macongmc.github.io/tags/%E5%AD%98%E5%82%A8/"}],"author":"马聪"},{"title":"静态模板freemarker","slug":"静态模板freemarker","date":"2022-07-27T00:59:28.000Z","updated":"2022-07-27T02:15:56.000Z","comments":true,"path":"posts/fad62ca1.html","link":"","permalink":"https://macongmc.github.io/posts/fad62ca1.html","excerpt":"","text":"1.freemarker1.1freemarker 介绍​ FreeMarker 是一款 模板引擎： 即一种基于模板和要改变的数据， 并用来生成输出文本(HTML网页，电子邮件，配置文件，源代码等)的通用工具。 它不是面向最终用户的，而是一个Java类库，是一款程序员可以嵌入他们所开发产品的组件。 ​ 模板编写为FreeMarker Template Language (FTL)。它是简单的，专用的语言， 不是 像PHP那样成熟的编程语言。 那就意味着要准备数据在真实编程语言中来显示，比如数据库查询和业务运算， 之后模板显示已经准备好的数据。在模板中，你可以专注于如何展现数据， 而在模板之外可以专注于要展示什么数据。 常用的java模板引擎还有哪些？ Jsp、Freemarker、Thymeleaf 、Velocity 等。 1.Jsp 为 Servlet 专用，不能单独进行使用。 2.Thymeleaf 为新技术，功能较为强大，但是执行的效率比较低。 3.Velocity从2010年更新完 2.0 版本后，便没有在更新。Spring Boot 官方在 1.4 版本后对此也不在支持，虽然 Velocity 在 2017 年版本得到迭代，但为时已晚。 1.2 环境搭建&amp;&amp;快速入门freemarker作为springmvc一种视图格式，默认情况下SpringMVC支持freemarker视图格式。 需要创建Spring Boot+Freemarker工程用于测试模板。 1.3 创建测试工程创建一个freemarker-demo 的测试工程专门用于freemarker的功能测试与模板的测试。 pom.xml如下 &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt; &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;parent&gt; &lt;artifactId&gt;heima-leadnews-test&lt;/artifactId&gt; &lt;groupId&gt;com.heima&lt;/groupId&gt; &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt; &lt;/parent&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;artifactId&gt;freemarker-demo&lt;/artifactId&gt; &lt;properties&gt; &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt; &lt;/properties&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-freemarker&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- lombok --&gt; &lt;dependency&gt; &lt;groupId&gt;org.projectlombok&lt;/groupId&gt; &lt;artifactId&gt;lombok&lt;/artifactId&gt; &lt;/dependency&gt; &lt;!-- apache 对 java io 的封装工具库 --&gt; &lt;dependency&gt; &lt;groupId&gt;org.apache.commons&lt;/groupId&gt; &lt;artifactId&gt;commons-io&lt;/artifactId&gt; &lt;version&gt;1.3.2&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;/project&gt; 1.4配置文件配置application.yml server: port: 8881 #服务端口 spring: application: name: freemarker-demo #指定服务名 freemarker: cache: false #关闭模板缓存，方便测试 settings: template_update_delay: 0 #检查模板更新延迟时间，设置为0表示立即检查，如果时间大于0会有缓存不方便进行模板测试 suffix: .ftl #指定Freemarker模板文件的后缀名 1.5 创建模型类在freemarker的测试工程下创建模型类型用于测试 package com.heima.freemarker.entity; import lombok.Data; import java.util.Date; @Data public class Student { private String name;//姓名 private int age;//年龄 private Date birthday;//生日 private Float money;//钱包 } 1.6 创建模板在resources下创建templates，此目录为freemarker的默认模板存放目录。 在templates下创建模板文件 01-basic.ftl ，模板中的插值表达式最终会被freemarker替换成具体的数据。 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;Hello World!&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;b&gt;普通文本 String 展示：&lt;/b&gt;&lt;br&gt;&lt;br&gt; Hello ${name} &lt;br&gt; &lt;hr&gt; &lt;b&gt;对象Student中的数据展示：&lt;/b&gt;&lt;br/&gt; 姓名：${stu.name}&lt;br/&gt; 年龄：${stu.age} &lt;hr&gt; &lt;/body&gt; &lt;/html&gt; 1.7创建controller创建Controller类，向Map中添加name，最后返回模板文件。 package com.xuecheng.test.freemarker.controller; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.client.RestTemplate; import java.util.Map; @Controller public class HelloController { @GetMapping(\"/basic\") public String test(Model model) { //1.纯文本形式的参数 model.addAttribute(\"name\", \"freemarker\"); //2.实体类相关的参数 Student student = new Student(); student.setName(\"小明\"); student.setAge(18); model.addAttribute(\"stu\", student); return \"01-basic\"; } } 01-basic.ftl，使用插值表达式填充数据 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;Hello World!&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;b&gt;普通文本 String 展示：&lt;/b&gt;&lt;br&gt;&lt;br&gt; Hello ${name} &lt;br&gt; &lt;hr&gt; &lt;b&gt;对象Student中的数据展示：&lt;/b&gt;&lt;br/&gt; 姓名：${stu.name}&lt;br/&gt; 年龄：${stu.age} &lt;hr&gt; &lt;/body&gt; &lt;/html&gt; 1.8 创建启动类package com.heima.freemarker; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class FreemarkerDemotApplication { public static void main(String[] args) { SpringApplication.run(FreemarkerDemotApplication.class,args); } } 1.9 测试请求：http://localhost:8881/basic 2. freemarker基础2.1 基础语法种类 1、注释，即&lt;#– –&gt;，介于其之间的内容会被freemarker忽略 &lt;#--我是一个freemarker注释--&gt; 2、插值（Interpolation）：即 ${..} 部分,freemarker会用真实的值代替**${..}** Hello ${name} 3、FTL指令：和HTML标记类似，名字前加#予以区分，Freemarker会解析标签中的表达式或逻辑。 &lt;# &gt;FTL指令&lt;/#&gt; 4、文本，仅文本信息，这些不是freemarker的注释、插值、FTL指令的内容会被freemarker忽略解析，直接输出内容。 &lt;#--freemarker中的普通文本--&gt; 我是一个普通的文本 2.2 集合指令（List和Map）1、数据模型： 在HelloController中新增如下方法： @GetMapping(\"/list\") public String list(Model model){ //------------------------------------ Student stu1 = new Student(); stu1.setName(\"小强\"); stu1.setAge(18); stu1.setMoney(1000.86f); stu1.setBirthday(new Date()); //小红对象模型数据 Student stu2 = new Student(); stu2.setName(\"小红\"); stu2.setMoney(200.1f); stu2.setAge(19); //将两个对象模型数据存放到List集合中 List&lt;Student&gt; stus = new ArrayList&lt;&gt;(); stus.add(stu1); stus.add(stu2); //向model中存放List集合数据 model.addAttribute(\"stus\",stus); //------------------------------------ //创建Map数据 HashMap&lt;String,Student&gt; stuMap = new HashMap&lt;&gt;(); stuMap.put(\"stu1\",stu1); stuMap.put(\"stu2\",stu2); // 3.1 向model中存放Map数据 model.addAttribute(\"stuMap\", stuMap); return \"02-list\"; } 2、模板： 在templates中新增02-list.ftl文件 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;Hello World!&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;#-- list 数据的展示 --&gt; &lt;b&gt;展示list中的stu数据:&lt;/b&gt; &lt;br&gt; &lt;br&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;序号&lt;/td&gt; &lt;td&gt;姓名&lt;/td&gt; &lt;td&gt;年龄&lt;/td&gt; &lt;td&gt;钱包&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;hr&gt; &lt;#-- Map 数据的展示 --&gt; &lt;b&gt;map数据的展示：&lt;/b&gt; &lt;br/&gt;&lt;br/&gt; &lt;a href=\"###\"&gt;方式一：通过map['keyname'].property&lt;/a&gt;&lt;br/&gt; 输出stu1的学生信息：&lt;br/&gt; 姓名：&lt;br/&gt; 年龄：&lt;br/&gt; &lt;br/&gt; &lt;a href=\"###\"&gt;方式二：通过map.keyname.property&lt;/a&gt;&lt;br/&gt; 输出stu2的学生信息：&lt;br/&gt; 姓名：&lt;br/&gt; 年龄：&lt;br/&gt; &lt;br/&gt; &lt;a href=\"###\"&gt;遍历map中两个学生信息：&lt;/a&gt;&lt;br/&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;序号&lt;/td&gt; &lt;td&gt;姓名&lt;/td&gt; &lt;td&gt;年龄&lt;/td&gt; &lt;td&gt;钱包&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;hr&gt; &lt;/body&gt; &lt;/html&gt; 实例代码： &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;Hello World!&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;#-- list 数据的展示 --&gt; &lt;b&gt;展示list中的stu数据:&lt;/b&gt; &lt;br&gt; &lt;br&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;序号&lt;/td&gt; &lt;td&gt;姓名&lt;/td&gt; &lt;td&gt;年龄&lt;/td&gt; &lt;td&gt;钱包&lt;/td&gt; &lt;/tr&gt; &lt;#list stus as stu&gt; &lt;tr&gt; &lt;td&gt;${stu_index+1}&lt;/td&gt; &lt;td&gt;${stu.name}&lt;/td&gt; &lt;td&gt;${stu.age}&lt;/td&gt; &lt;td&gt;${stu.money}&lt;/td&gt; &lt;/tr&gt; &lt;/#list&gt; &lt;/table&gt; &lt;hr&gt; &lt;#-- Map 数据的展示 --&gt; &lt;b&gt;map数据的展示：&lt;/b&gt; &lt;br/&gt;&lt;br/&gt; &lt;a href=\"###\"&gt;方式一：通过map['keyname'].property&lt;/a&gt;&lt;br/&gt; 输出stu1的学生信息：&lt;br/&gt; 姓名：${stuMap['stu1'].name}&lt;br/&gt; 年龄：${stuMap['stu1'].age}&lt;br/&gt; &lt;br/&gt; &lt;a href=\"###\"&gt;方式二：通过map.keyname.property&lt;/a&gt;&lt;br/&gt; 输出stu2的学生信息：&lt;br/&gt; 姓名：${stuMap.stu2.name}&lt;br/&gt; 年龄：${stuMap.stu2.age}&lt;br/&gt; &lt;br/&gt; &lt;a href=\"###\"&gt;遍历map中两个学生信息：&lt;/a&gt;&lt;br/&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;序号&lt;/td&gt; &lt;td&gt;姓名&lt;/td&gt; &lt;td&gt;年龄&lt;/td&gt; &lt;td&gt;钱包&lt;/td&gt; &lt;/tr&gt; &lt;#list stuMap?keys as key &gt; &lt;tr&gt; &lt;td&gt;${key_index}&lt;/td&gt; &lt;td&gt;${stuMap[key].name}&lt;/td&gt; &lt;td&gt;${stuMap[key].age}&lt;/td&gt; &lt;td&gt;${stuMap[key].money}&lt;/td&gt; &lt;/tr&gt; &lt;/#list&gt; &lt;/table&gt; &lt;hr&gt; &lt;/body&gt; &lt;/html&gt; 👆上面代码解释： ${k_index}： index：得到循环的下标，使用方法是在stu后边加”_index”，它的值是从0开始 2.3 if指令​ if 指令即判断指令，是常用的FTL指令，freemarker在解析时遇到if会进行判断，条件为真则输出if中间的内容，否则跳过内容不再输出。 指令格式 &lt;#if &gt;&lt;/if&gt; 1、数据模型： 使用list指令中测试数据模型，判断名称为小红的数据字体显示为红色。 2、模板： &lt;table&gt; &lt;tr&gt; &lt;td&gt;姓名&lt;/td&gt; &lt;td&gt;年龄&lt;/td&gt; &lt;td&gt;钱包&lt;/td&gt; &lt;/tr&gt; &lt;#list stus as stu&gt; &lt;tr&gt; &lt;td &gt;${stu.name}&lt;/td&gt; &lt;td&gt;${stu.age}&lt;/td&gt; &lt;td &gt;${stu.mondy}&lt;/td&gt; &lt;/tr&gt; &lt;/#list&gt; &lt;/table&gt; 实例代码： &lt;table&gt; &lt;tr&gt; &lt;td&gt;姓名&lt;/td&gt; &lt;td&gt;年龄&lt;/td&gt; &lt;td&gt;钱包&lt;/td&gt; &lt;/tr&gt; &lt;#list stus as stu &gt; &lt;#if stu.name='小红'&gt; &lt;tr style=\"color: red\"&gt; &lt;td&gt;${stu_index}&lt;/td&gt; &lt;td&gt;${stu.name}&lt;/td&gt; &lt;td&gt;${stu.age}&lt;/td&gt; &lt;td&gt;${stu.money}&lt;/td&gt; &lt;/tr&gt; &lt;#else &gt; &lt;tr&gt; &lt;td&gt;${stu_index}&lt;/td&gt; &lt;td&gt;${stu.name}&lt;/td&gt; &lt;td&gt;${stu.age}&lt;/td&gt; &lt;td&gt;${stu.money}&lt;/td&gt; &lt;/tr&gt; &lt;/#if&gt; &lt;/#list&gt; &lt;/table&gt; 3、输出： 姓名为“小强”则字体颜色显示为红色。 2.4 运算符1、算数运算符 FreeMarker表达式中完全支持算术运算,FreeMarker支持的算术运算符包括: 加法： + 减法： - 乘法： * 除法： / 求模 (求余)： % 模板代码 &lt;b&gt;算数运算符&lt;/b&gt; &lt;br/&gt;&lt;br/&gt; 100+5 运算： ${100 + 5 }&lt;br/&gt; 100 - 5 * 5运算：${100 - 5 * 5}&lt;br/&gt; 5 / 2运算：${5 / 2}&lt;br/&gt; 12 % 10运算：${12 % 10}&lt;br/&gt; &lt;hr&gt; 除了 + 运算以外，其他的运算只能和 number 数字类型的计算。 2、比较运算符 =**或者==**:判断两个值是否相等. !=:判断两个值是否不等. &gt;**或者gt**:判断左边值是否大于右边值 &gt;=**或者gte**:判断左边值是否大于等于右边值 &lt;**或者lt**:判断左边值是否小于右边值 &lt;=**或者lte**:判断左边值是否小于等于右边值 = 和 == 模板代码 &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;Hello World!&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;b&gt;比较运算符&lt;/b&gt; &lt;br/&gt; &lt;br/&gt; &lt;dl&gt; &lt;dt&gt; =/== 和 != 比较：&lt;/dt&gt; &lt;dd&gt; &lt;#if \"xiaoming\" == \"xiaoming\"&gt; 字符串的比较 \"xiaoming\" == \"xiaoming\" &lt;/#if&gt; &lt;/dd&gt; &lt;dd&gt; &lt;#if 10 != 100&gt; 数值的比较 10 != 100 &lt;/#if&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;dl&gt; &lt;dt&gt;其他比较&lt;/dt&gt; &lt;dd&gt; &lt;#if 10 gt 5 &gt; 形式一：使用特殊字符比较数值 10 gt 5 &lt;/#if&gt; &lt;/dd&gt; &lt;dd&gt; &lt;#-- 日期的比较需要通过?date将属性转为data类型才能进行比较 --&gt; &lt;#if (date1?date &gt;= date2?date)&gt; 形式二：使用括号形式比较时间 date1?date &gt;= date2?date &lt;/#if&gt; &lt;/dd&gt; &lt;/dl&gt; &lt;br/&gt; &lt;hr&gt; &lt;/body&gt; &lt;/html&gt; Controller 的 数据模型代码 @GetMapping(\"operation\") public String testOperation(Model model) { //构建 Date 数据 Date now = new Date(); model.addAttribute(\"date1\", now); model.addAttribute(\"date2\", now); return \"03-operation\"; } 比较运算符注意 =**和!=**可以用于字符串、数值和日期来比较是否相等 =**和!=**两边必须是相同类型的值,否则会产生错误 字符串 \"x\" 、**\"x \"** 、**\"X\"**比较是不等的.因为FreeMarker是精确比较 其它的运行符可以作用于数字和日期,但不能作用于字符串 使用**gt等字母运算符代替&gt;会有更好的效果,因为 FreeMarker会把&gt;**解释成FTL标签的结束字符 可以使用括号来避免这种情况,如:&lt;#if (x&gt;y)&gt; 3、逻辑运算符 逻辑与:&amp;&amp; 逻辑或:|| 逻辑非:! 逻辑运算符只能作用于布尔值,否则将产生错误 。 模板代码 &lt;b&gt;逻辑运算符&lt;/b&gt; &lt;br/&gt; &lt;br/&gt; &lt;#if (10 lt 12 )&amp;&amp;( 10 gt 5 ) &gt; (10 lt 12 )&amp;&amp;( 10 gt 5 ) 显示为 true &lt;/#if&gt; &lt;br/&gt; &lt;br/&gt; &lt;#if !false&gt; false 取反为true &lt;/#if&gt; &lt;hr&gt; 2.5 空值处理1、判断某变量是否存在使用 “??” 用法为:variable??,如果该变量存在,返回true,否则返回false 例：为防止stus为空报错可以加上判断如下： &lt;#if stus??&gt; &lt;#list stus as stu&gt; ...... &lt;/#list&gt; &lt;/#if&gt; 2、缺失变量默认值使用 “!” 使用!要以指定一个默认值，当变量为空时显示默认值 例： ${name!’’}表示如果name为空显示空字符串。 如果是嵌套对象则建议使用（）括起来 例： ${(stu.bestFriend.name)!’’}表示，如果stu或bestFriend或name为空默认显示空字符串。 2.6 内建函数内建函数语法格式： 变量+?+函数名称 1、和到某个集合的大小 ${集合名?size} 2、日期格式化 显示年月日: ${today?date}显示时分秒：**${today?time}**显示日期+时间：**${today?datetime}**自定义格式化： ${today?string(\"yyyy年MM月\")} 3、内建函数c model.addAttribute(“point”, 102920122); point是数字型，使用${point}会显示这个数字的值，每三位使用逗号分隔。 如果不想显示为每三位分隔的数字，可以使用c函数将数字型转成字符串输出 ${point?c} 4、将json字符串转成对象 一个例子： 其中用到了 assign标签，assign的作用是定义一个变量。 &lt;#assign text=\"{'bank':'工商银行','account':'10101920201920212'}\" /&gt; &lt;#assign data=text?eval /&gt; 开户行：${data.bank} 账号：${data.account} 模板代码： &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;inner Function&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;b&gt;获得集合大小&lt;/b&gt;&lt;br&gt; 集合大小： &lt;hr&gt; &lt;b&gt;获得日期&lt;/b&gt;&lt;br&gt; 显示年月日: &lt;br&gt; 显示时分秒：&lt;br&gt; 显示日期+时间：&lt;br&gt; 自定义格式化： &lt;br&gt; &lt;hr&gt; &lt;b&gt;内建函数C&lt;/b&gt;&lt;br&gt; 没有C函数显示的数值： &lt;br&gt; 有C函数显示的数值： &lt;hr&gt; &lt;b&gt;声明变量assign&lt;/b&gt;&lt;br&gt; &lt;hr&gt; &lt;/body&gt; &lt;/html&gt; 内建函数模板页面： &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\"&gt; &lt;title&gt;inner Function&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;b&gt;获得集合大小&lt;/b&gt;&lt;br&gt; 集合大小：${stus?size} &lt;hr&gt; &lt;b&gt;获得日期&lt;/b&gt;&lt;br&gt; 显示年月日: ${today?date} &lt;br&gt; 显示时分秒：${today?time}&lt;br&gt; 显示日期+时间：${today?datetime}&lt;br&gt; 自定义格式化： ${today?string(\"yyyy年MM月\")}&lt;br&gt; &lt;hr&gt; &lt;b&gt;内建函数C&lt;/b&gt;&lt;br&gt; 没有C函数显示的数值：${point} &lt;br&gt; 有C函数显示的数值：${point?c} &lt;hr&gt; &lt;b&gt;声明变量assign&lt;/b&gt;&lt;br&gt; &lt;#assign text=\"{'bank':'工商银行','account':'10101920201920212'}\" /&gt; &lt;#assign data=text?eval /&gt; 开户行：${data.bank} 账号：${data.account} &lt;hr&gt; &lt;/body&gt; &lt;/html&gt; 内建函数Controller数据模型： @GetMapping(\"innerFunc\") public String testInnerFunc(Model model) { //1.1 小强对象模型数据 Student stu1 = new Student(); stu1.setName(\"小强\"); stu1.setAge(18); stu1.setMoney(1000.86f); stu1.setBirthday(new Date()); //1.2 小红对象模型数据 Student stu2 = new Student(); stu2.setName(\"小红\"); stu2.setMoney(200.1f); stu2.setAge(19); //1.3 将两个对象模型数据存放到List集合中 List&lt;Student&gt; stus = new ArrayList&lt;&gt;(); stus.add(stu1); stus.add(stu2); model.addAttribute(\"stus\", stus); // 2.1 添加日期 Date date = new Date(); model.addAttribute(\"today\", date); // 3.1 添加数值 model.addAttribute(\"point\", 102920122); return \"04-innerFunc\"; } 3. 静态化测试之前的测试都是SpringMVC将Freemarker作为视图解析器（ViewReporter）来集成到项目中，工作中，有的时候需要使用Freemarker原生Api来生成静态内容，下面一起来学习下原生Api生成文本文件。 3.1 需求分析使用freemarker原生Api将页面生成html文件，本节测试html文件生成的方法： 3.2静态化测试根据模板文件生成html文件 ①：修改application.yml文件，添加以下模板存放位置的配置信息，完整配置如下： server: port: 8881 #服务端口 spring: application: name: freemarker-demo #指定服务名 freemarker: cache: false #关闭模板缓存，方便测试 settings: template_update_delay: 0 #检查模板更新延迟时间，设置为0表示立即检查，如果时间大于0会有缓存不方便进行模板测试 suffix: .ftl #指定Freemarker模板文件的后缀名 template-loader-path: classpath:/templates #模板存放位置 ②：在test下创建测试类 package com.heima.freemarker.test; import com.heima.freemarker.FreemarkerDemoApplication; import com.heima.freemarker.entity.Student; import freemarker.template.Configuration; import freemarker.template.Template; import freemarker.template.TemplateException; import org.junit.Test; import org.junit.runner.RunWith; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.test.context.junit4.SpringRunner; import java.io.FileWriter; import java.io.IOException; import java.util.*; @SpringBootTest(classes = FreemarkerDemoApplication.class) @RunWith(SpringRunner.class) public class FreemarkerTest { @Autowired private Configuration configuration; @Test public void test() throws IOException, TemplateException { //freemarker的模板对象，获取模板 Template template = configuration.getTemplate(\"02-list.ftl\"); Map params = getData(); //合成 //第一个参数 数据模型 //第二个参数 输出流 template.process(params, new FileWriter(\"d:/list.html\")); } private Map getData() { Map&lt;String, Object&gt; map = new HashMap&lt;&gt;(); //小强对象模型数据 Student stu1 = new Student(); stu1.setName(\"小强\"); stu1.setAge(18); stu1.setMoney(1000.86f); stu1.setBirthday(new Date()); //小红对象模型数据 Student stu2 = new Student(); stu2.setName(\"小红\"); stu2.setMoney(200.1f); stu2.setAge(19); //将两个对象模型数据存放到List集合中 List&lt;Student&gt; stus = new ArrayList&lt;&gt;(); stus.add(stu1); stus.add(stu2); //向map中存放List集合数据 map.put(\"stus\", stus); //创建Map数据 HashMap&lt;String, Student&gt; stuMap = new HashMap&lt;&gt;(); stuMap.put(\"stu1\", stu1); stuMap.put(\"stu2\", stu2); //向map中存放Map数据 map.put(\"stuMap\", stuMap); //返回Map return map; } }","categories":[{"name":"API","slug":"API","permalink":"https://macongmc.github.io/categories/API/"}],"tags":[{"name":"api","slug":"api","permalink":"https://macongmc.github.io/tags/api/"}],"author":"马聪"},{"title":"接口工具Swagger","slug":"接口工具","date":"2022-07-26T09:38:28.000Z","updated":"2022-08-02T09:28:42.882Z","comments":true,"path":"posts/undefined.html","link":"","permalink":"https://macongmc.github.io/posts/undefined.html","excerpt":"","text":"1.swagger依赖 &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt; &lt;/dependency&gt; 配置类 package com.heima.common.swagger; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import springfox.documentation.builders.ApiInfoBuilder; import springfox.documentation.builders.PathSelectors; import springfox.documentation.builders.RequestHandlerSelectors; import springfox.documentation.service.ApiInfo; import springfox.documentation.service.Contact; import springfox.documentation.spi.DocumentationType; import springfox.documentation.spring.web.plugins.Docket; import springfox.documentation.swagger2.annotations.EnableSwagger2; @Configuration @EnableSwagger2 public class SwaggerConfiguration { @Bean public Docket buildDocket() { return new Docket(DocumentationType.SWAGGER_2) .apiInfo(buildApiInfo()) .select() // 要扫描的API(Controller)基础包 .apis(RequestHandlerSelectors.basePackage(\"com.heima\")) .paths(PathSelectors.any()) .build(); } private ApiInfo buildApiInfo() { Contact contact = new Contact(\"黑马程序员\",\"\",\"\"); return new ApiInfoBuilder() .title(\"黑马头条-平台管理API文档\") .description(\"黑马头条后台api\") .contact(contact) .version(\"1.0.0\").build(); } } resources目录中新增以下目录和文件 文件：resources/META-INF/Spring.factories org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\ com.heima.common.swagger.SwaggerConfiguration 常用注解在Java类中添加Swagger的注解即可生成Swagger接口文档，常用Swagger注解如下： @Api：修饰整个类，描述Controller的作用 @ApiOperation：描述一个类的一个方法，或者说一个接口 @ApiParam：单个参数的描述信息 @ApiModel：用对象来接收参数 @ApiModelProperty：用对象接收参数时，描述对象的一个字段 @ApiResponse：HTTP响应其中1个描述 @ApiResponses：HTTP响应整体描述 @ApiIgnore：使用该注解忽略这个API @ApiError ：发生错误返回的信息 @ApiImplicitParam：一个请求参数 @ApiImplicitParams：多个请求参数的描述信息 属性 取值 作用 paramType 查询参数类型 path 以地址的形式提交数据 query 直接跟参数完成自动映射赋值 body 以流的形式提交 仅支持POST header 参数在request headers 里边提交 form 以form表单的形式提交 仅支持POST dataType 参数的数据类型 只作为标志说明，并没有实际验证 Long String name 接收参数名 value 接收参数的意义描述 required 参数是否必填 true 必填 false 非必填 defaultValue 默认值 @RestController @RequestMapping(\"/api/v1/login\") @Api(value = \"app端用户登录\", tags = \"ap_user\", description = \"app端用户登录API\") public class ApUserLoginController { @Autowired private ApUserService apUserService; @PostMapping(\"/login_auth\") @ApiOperation(\"用户登录\") public ResponseResult login(@RequestBody LoginDto dto){ return apUserService.login(dto); } } @Data public class LoginDto { /** * 手机号 */ @ApiModelProperty(value=\"手机号\",required = true) private String phone; /** * 密码 */ @ApiModelProperty(value=\"密码\",required = true) private String password; } 访问地址启动user微服务，访问地址：http://localhost:51801/swagger-ui.html 2.knife4j&lt;dependency&gt; &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt; &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt; &lt;/dependency&gt; Swagger配置文件package com.heima.common.knife4j; import com.github.xiaoymin.knife4j.spring.annotations.EnableKnife4j; import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.context.annotation.Import; import springfox.bean.validators.configuration.BeanValidatorPluginsConfiguration; import springfox.documentation.builders.ApiInfoBuilder; import springfox.documentation.builders.PathSelectors; import springfox.documentation.builders.RequestHandlerSelectors; import springfox.documentation.service.ApiInfo; import springfox.documentation.spi.DocumentationType; import springfox.documentation.spring.web.plugins.Docket; import springfox.documentation.swagger2.annotations.EnableSwagger2; @Configuration @EnableSwagger2 @EnableKnife4j @Import(BeanValidatorPluginsConfiguration.class) public class Swagger2Configuration { @Bean(value = \"defaultApi2\") public Docket defaultApi2() { Docket docket=new Docket(DocumentationType.SWAGGER_2) .apiInfo(apiInfo()) //分组名称 .groupName(\"1.0\") .select() //这里指定Controller扫描包路径 .apis(RequestHandlerSelectors.basePackage(\"com.heima\")) .paths(PathSelectors.any()) .build(); return docket; } private ApiInfo apiInfo() { return new ApiInfoBuilder() .title(\"黑马头条API文档\") .description(\"黑马头条API文档\") .version(\"1.0\") .build(); } } 注解 说明 @EnableSwagger2 该注解是Springfox-swagger框架提供的使用Swagger注解，该注解必须加 @EnableKnife4j 该注解是knife4j提供的增强注解,Ui提供了例如动态参数、参数过滤、接口排序等增强功能,如果你想使用这些增强功能就必须加该注解，否则可以不用加 添加配置 在Spring.factories中新增配置 org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\ com.heima.common.swagger.Swagger2Configuration, \\ com.heima.common.swagger.SwaggerConfiguration 访问 在浏览器输入地址：http://host:port/doc.html","categories":[{"name":"API","slug":"API","permalink":"https://macongmc.github.io/categories/API/"}],"tags":[{"name":"工具使用","slug":"工具使用","permalink":"https://macongmc.github.io/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"},{"name":"api","slug":"api","permalink":"https://macongmc.github.io/tags/api/"}],"author":"马聪"},{"title":"SDK集成IDEA","slug":"SDK集成IDEA","date":"2022-07-25T07:28:49.000Z","updated":"2022-07-25T07:28:49.000Z","comments":true,"path":"posts/3594a379.html","link":"","permalink":"https://macongmc.github.io/posts/3594a379.html","excerpt":"","text":"一.配置文件配置文件META-INF目录中下建立spring.factoriesspring.factories org.springframework.boot.autoconfigure.EnableAutoConfiguration=\\ 配置类的全路径名 二.配置类主要把SDK配置成Template供我们使用。1.配置Properties类存放SDK所需的参数。2.配置Template类存放SDK的方法。3.编写配置类@EnableConfigurationProperties和@Bean注解来把SDKTemplate注册到容器中让我们使用。","categories":[{"name":"SDK","slug":"SDK","permalink":"https://macongmc.github.io/categories/SDK/"}],"tags":[{"name":"sdk","slug":"sdk","permalink":"https://macongmc.github.io/tags/sdk/"},{"name":"java","slug":"java","permalink":"https://macongmc.github.io/tags/java/"}],"author":"马聪"},{"title":"注解翻译字典","slug":"注解翻译字典","date":"2022-07-25T07:12:07.000Z","updated":"2022-07-25T07:12:07.000Z","comments":true,"path":"posts/715cdf7a.html","link":"","permalink":"https://macongmc.github.io/posts/715cdf7a.html","excerpt":"","text":"一.注解1.注解说明，自定义两个注解，一个进行标记字段，里面存字典字段的值，一个标记controller标记在那个查询方法上进行转化。 字段注解： import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Target(ElementType.FIELD) @Retention(RetentionPolicy.RUNTIME) public @interface Dict { /** * 需要翻译的字段名称 */ String fieldName(); } 标记注解 import java.lang.annotation.ElementType; import java.lang.annotation.Retention; import java.lang.annotation.RetentionPolicy; import java.lang.annotation.Target; @Target(ElementType.METHOD) @Retention(RetentionPolicy.RUNTIME) public @interface DoDict { } 二.实现方法使用AOP对查询的返回结果进行判断。分别为对象或者集合分类。通过反射对字段进行翻译。 import com.alibaba.fastjson.JSON; import com.alibaba.fastjson.JSONObject; import com.fn.common.core.page.TableDataInfo; import com.fn.safe.annotation.Dict; import com.fn.safe.init.InitData; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.Around; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Pointcut; import org.springframework.stereotype.Component; import java.lang.reflect.Field; import java.util.List; @Aspect @Component public class DoDictAspect { @Pointcut(\"@annotation(com.fn.safe.annotation.DoDict)\") public void execute() { } @Around(\"execute()\") public Object around(ProceedingJoinPoint point) throws Throwable { Object proceed = point.proceed(); System.out.println(\"JSON.toJSONString(proceed) = \" + JSON.toJSONString(proceed)); doDict(proceed); return proceed; } private void doDict(Object proceed) { if (!(proceed instanceof TableDataInfo)){ Object object = invert(proceed); JSONObject.toJSONString(object); return ; } TableDataInfo dataInfo = (TableDataInfo) proceed; List&lt;?&gt; rows = dataInfo.getRows(); List&lt;?&gt; rowsDict=convertList(rows); dataInfo.setRows(rowsDict); JSONObject.toJSONString(dataInfo); } private Object invert(Object obj) { filedName(obj); return obj; } private void filedName(Object obj) { Class&lt;?&gt; aClass = obj.getClass(); Field[] declaredFields = aClass.getDeclaredFields(); for (Field declaredField : declaredFields) { declaredField.setAccessible(true); if (declaredField.getAnnotation(Dict.class)==null){ continue; } String fieldName = declaredField.getAnnotation(Dict.class).fieldName(); try { Object fieldValue = declaredField.get(obj); if (fieldValue!=null){ Dict dict = declaredField.getAnnotation(Dict.class); String dictName = dict.fieldName(); String code =dictName+\":\"+fieldValue; String dictCode = InitData.map.get(code); fieldValue =dictCode; declaredField.set(obj,fieldValue); } } catch (IllegalAccessException e) { } } } private List&lt;?&gt; convertList(List&lt;?&gt; rows) { if (rows.isEmpty()){ return null; } for (Object row : rows) { filedName(row); } return rows; } } 三.使用方法标记放在controller 翻译放在对象需要翻译的字段上。 四.实例代码import com.alibaba.fastjson.JSON; import com.alibaba.fastjson.JSONObject; import com.fn.common.core.page.TableDataInfo; import com.fn.safe.annotation.Dict; import com.fn.safe.init.InitData; import org.apache.commons.lang3.StringUtils; import org.aspectj.lang.ProceedingJoinPoint; import org.aspectj.lang.annotation.Around; import org.aspectj.lang.annotation.Aspect; import org.aspectj.lang.annotation.Pointcut; import org.springframework.stereotype.Component; import java.lang.reflect.Field; import java.util.List; @Aspect @Component public class DoDictAspect { @Pointcut(\"@annotation(com.fn.safe.annotation.DoDict)\") public void execute() { } @Around(\"execute()\") public Object around(ProceedingJoinPoint point) throws Throwable { Object proceed = point.proceed(); System.out.println(\"JSON.toJSONString(proceed) = \" + JSON.toJSONString(proceed)); doDict(proceed); return proceed; } private void doDict(Object proceed) { if (!(proceed instanceof TableDataInfo)){ Object object = invert(proceed); JSONObject.toJSONString(object); return ; } TableDataInfo dataInfo = (TableDataInfo) proceed; List&lt;?&gt; rows = dataInfo.getRows(); List&lt;?&gt; rowsDict=convertList(rows); dataInfo.setRows(rowsDict); JSONObject.toJSONString(dataInfo); } private Object invert(Object obj) { filedName(obj); return obj; } private void filedName(Object obj) { Class&lt;?&gt; aClass = obj.getClass(); Field[] declaredFields = aClass.getDeclaredFields(); for (Field declaredField : declaredFields) { declaredField.setAccessible(true); if (declaredField.getAnnotation(Dict.class)==null){ continue; } String fieldName = declaredField.getAnnotation(Dict.class).fieldName(); try { Object fieldValue = declaredField.get(obj); if (fieldValue!=null){ Dict dict = declaredField.getAnnotation(Dict.class); String dictName = dict.fieldName(); String code =dictName+\":\"+fieldValue; String dictCode = InitData.map.get(code); if (StringUtils.isNotEmpty(dictCode)){ fieldValue =dictCode; declaredField.set(obj,fieldValue); } } } catch (IllegalAccessException e) { } } } private List&lt;?&gt; convertList(List&lt;?&gt; rows) { if (rows.isEmpty()){ return null; } for (Object row : rows) { filedName(row); } return rows; } }","categories":[{"name":"工具篇","slug":"工具篇","permalink":"https://macongmc.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"}],"tags":[{"name":"aop","slug":"aop","permalink":"https://macongmc.github.io/tags/aop/"},{"name":"注解","slug":"注解","permalink":"https://macongmc.github.io/tags/%E6%B3%A8%E8%A7%A3/"}],"author":"马聪"},{"title":"城市-省","slug":"城市-省","date":"2022-07-25T03:26:53.000Z","updated":"2022-07-25T03:26:53.000Z","comments":true,"path":"posts/b4458878.html","link":"","permalink":"https://macongmc.github.io/posts/b4458878.html","excerpt":"","text":"一.实体设计//省份 import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import java.io.Serializable; import java.util.List; @Data @AllArgsConstructor @NoArgsConstructor public class Province implements Serializable { private String provinceType; private String provinceName; private List&lt;City&gt; city; } //城市 import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import java.io.Serializable; @Data @AllArgsConstructor @NoArgsConstructor public class City implements Serializable { private String cityName; private String areaType; private String isCapital; } 二.读取文章public static String getJson(){ StringBuilder sb = new StringBuilder(); Resource resource = new ClassPathResource(\"json/city.json\"); InputStream is = null; BufferedReader br =null; InputStreamReader isr = null; try { is = resource.getInputStream(); isr = new InputStreamReader(is); br = new BufferedReader(isr); String data = null; while((data = br.readLine()) != null) { sb.append(data); } } catch (IOException e) { log.error(\"加载JSON城市异常：{}\",e); }finally { try { br.close(); isr.close(); is.close(); } catch (IOException e) { e.printStackTrace(); } } return sb.toString(); } 三. 转换实体public static Map&lt;List&lt;City&gt;,String&gt; cityMap = new HashMap&lt;&gt;(); String value = getJson(); if (!StringUtils.isEmpty(value)){ List&lt;City&gt; list = new ArrayList&lt;&gt;(); List listCity = JSONObject.parseObject(value, list.getClass()); for (Object o : listCity) { Province province = JSONObject.parseObject(o.toString(), Province.class); List&lt;City&gt; cityList = new ArrayList&lt;&gt;(); for (City city : province.getCity()) { cityList.add(city); } cityMap.put(cityList,province.getProvinceName()); } } 四.映射方法static String getProvince(String cityName){ Set&lt;Map.Entry&lt;List&lt;City&gt;, String&gt;&gt; entries = cityMap.entrySet(); for (Map.Entry&lt;List&lt;City&gt;, String&gt; entry : entries) { List&lt;City&gt; key = entry.getKey(); for (City city : key) { if (city.getCityName().equals(cityName)){ return cityMap.get(key); } } } return \"其他\"; } 五.json文件 { \"provinceType\": 1, \"provinceName\": \"北京市\", \"city\": [ { \"cityName\": \"北京市\", \"areaType\": 1, \"isCapital\": true } ] }, { \"provinceType\": 1, \"provinceName\": \"上海市\", \"city\": [ { \"cityName\": \"上海市\", \"areaType\": 1, \"isCapital\": true } ] }, { \"provinceType\": 1, \"provinceName\": \"天津市\", \"city\": [ { \"cityName\": \"天津市\", \"areaType\": 1, \"isCapital\": true } ] }, { \"provinceType\": 1, \"provinceName\": \"重庆市\", \"city\": [ { \"cityName\": \"重庆市\", \"areaType\": 1, \"isCapital\": true } ] }, { \"provinceType\": 2, \"provinceName\": \"河北省\", \"city\": [ { \"cityName\": \"石家庄市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"唐山市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"秦皇岛市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"邯郸市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"邢台市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"保定市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"张家口市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"承德市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"沧州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"廊坊市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"衡水市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"辛集市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"藁城市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"晋州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"新乐市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"鹿泉市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"遵化市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"迁安市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"武安市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"南宫市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"沙河市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"涿州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"定州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"安国市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"高碑店市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"泊头市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"任丘市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"黄骅市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"河间市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"霸州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"三河市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"冀州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"深州市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 2, \"provinceName\": \"山西省\", \"city\": [ { \"cityName\": \"太原市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"大同市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"朔州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"阳泉市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"长治市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"晋城市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"忻州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"晋中市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"临汾市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"运城市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"吕梁市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"古交市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"潞城市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"高平市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"原平市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"介休市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"侯马市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"霍州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"永济市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"河津市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"孝义市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"汾阳市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 2, \"provinceName\": \"陕西省\", \"city\": [ { \"cityName\": \"西安市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"铜川市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"宝鸡市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"咸阳市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"渭南市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"延安市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"汉中市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"榆林市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"安康市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"商洛市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"兴平市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"韩城市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"华阴市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 2, \"provinceName\": \"山东省\", \"city\": [ { \"cityName\": \"济南市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"青岛市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"淄博市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"枣庄市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"东营市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"烟台市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"潍坊市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"济宁市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"泰安市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"威海市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"日照市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"莱芜市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"临沂市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"德州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"聊城市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"滨州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"菏泽市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"章丘市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"胶南市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"胶州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"平度市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"莱西市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"即墨市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"滕州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"龙口市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"莱阳市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"莱州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"招远市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"蓬莱市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"栖霞市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"海阳市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"青州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"诸城市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"寿光市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"安丘市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"高密市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"昌邑市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"曲阜市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"兖州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"邹城市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"新泰市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"肥城市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"乳山市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"文登市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"荣成市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"乐陵市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"禹城市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"临清市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 2, \"provinceName\": \"河南省\", \"city\": [ { \"cityName\": \"郑州市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"开封市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"洛阳市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"平顶山市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"安阳市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"鹤壁市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"新乡市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"焦作市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"濮阳市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"许昌市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"漯河市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"三门峡市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"南阳市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"商丘市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"信阳市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"周口市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"驻马店市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"巩义市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"新郑市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"新密市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"登封市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"荥阳市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"中牟县\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"偃师市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"汝州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"舞钢市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"林州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"卫辉市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"辉县市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"沁阳市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"孟州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"禹州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"长葛市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"义马市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"灵宝市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"邓州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"永城市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"项城市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"济源市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 2, \"provinceName\": \"辽宁省\", \"city\": [ { \"cityName\": \"沈阳市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"大连市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"鞍山市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"抚顺市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"本溪市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"丹东市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"锦州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"营口市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"阜新市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"辽阳市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"盘锦市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"铁岭市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"朝阳市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"葫芦岛市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"新民市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"瓦房店市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"普兰店市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"庄河市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"海城市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"东港市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"凤城市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"凌海市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"北镇市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"大石桥市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"盖州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"灯塔市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"调兵山市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"开原市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"凌源市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"北票市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"兴城市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 2, \"provinceName\": \"吉林省\", \"city\": [ { \"cityName\": \"长春市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"吉林市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"四平市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"辽源市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"通化市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"白山市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"松原市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"白城市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"延边朝鲜族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"九台市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"榆树市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"德惠市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"舒兰市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"桦甸市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"蛟河市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"磐石市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"公主岭市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"双辽市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"梅河口市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"集安市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"临江市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"大安市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"洮南市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"延吉市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"图们市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"敦化市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"龙井市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"珲春市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"和龙市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 2, \"provinceName\": \"黑龙江省\", \"city\": [ { \"cityName\": \"哈尔滨市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"齐齐哈尔市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"鹤岗市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"双鸭山市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"鸡西市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"大庆市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"伊春市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"牡丹江市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"佳木斯市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"七台河市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"黑河市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"绥化市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"大兴安岭地区\", \"areaType\": 4, \"isCapital\": false }, { \"cityName\": \"尚志市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"双城市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"五常市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"讷河市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"密山市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"虎林市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"铁力市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"绥芬河市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"宁安市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"海林市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"穆棱市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"同江市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"富锦市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"北安市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"五大连池市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"安达市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"肇东市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"海伦市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 2, \"provinceName\": \"江苏省\", \"city\": [ { \"cityName\": \"南京市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"无锡市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"徐州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"常州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"苏州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"南通市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"连云港市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"淮安市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"盐城市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"扬州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"镇江市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"泰州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"宿迁市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"江阴市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"宜兴市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"邳州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"新沂市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"金坛市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"溧阳市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"常熟市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"张家港市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"太仓市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"昆山市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"吴江市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"如皋市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"通州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"海门市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"启东市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"东台市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"大丰市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"高邮市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"江都市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"仪征市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"丹阳市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"扬中市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"句容市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"泰兴市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"姜堰市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"靖江市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"兴化市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 2, \"provinceName\": \"浙江省\", \"city\": [ { \"cityName\": \"杭州市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"宁波市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"温州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"嘉兴市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"湖州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"绍兴市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"金华市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"衢州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"舟山市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"台州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"丽水市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"建德市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"富阳市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"临安市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"余姚市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"慈溪市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"奉化市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"瑞安市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"乐清市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"海宁市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"平湖市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"桐乡市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"诸暨市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"上虞市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"嵊州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"兰溪市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"义乌市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"东阳市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"永康市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"江山市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"临海市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"温岭市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"龙泉市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 2, \"provinceName\": \"安徽省\", \"city\": [ { \"cityName\": \"合肥市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"芜湖市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"蚌埠市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"淮南市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"马鞍山市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"淮北市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"铜陵市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"安庆市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"黄山市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"滁州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"阜阳市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"宿州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"巢湖市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"六安市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"亳州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"池州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"宣城市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"桐城市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"天长市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"明光市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"界首市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"宁国市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 2, \"provinceName\": \"江西省\", \"city\": [ { \"cityName\": \"南昌市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"景德镇市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"萍乡市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"九江市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"新余市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"鹰潭市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"赣州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"吉安市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"宜春市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"抚州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"上饶市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"乐平市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"瑞昌市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"贵溪市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"瑞金市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"南康市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"井冈山市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"丰城市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"樟树市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"高安市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"德兴市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 2, \"provinceName\": \"福建省\", \"city\": [ { \"cityName\": \"福州市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"厦门市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"莆田市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"三明市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"泉州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"漳州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"南平市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"龙岩市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"宁德市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"福清市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"长乐市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"永安市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"石狮市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"晋江市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"南安市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"龙海市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"邵武市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"武夷山\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"建瓯市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"漳平市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"建阳市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"福安市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"福鼎市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 2, \"provinceName\": \"湖北省\", \"city\": [ { \"cityName\": \"武汉市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"黄石市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"十堰市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"荆州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"宜昌市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"襄樊市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"鄂州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"荆门市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"孝感市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"黄冈市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"咸宁市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"随州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"恩施土家族苗族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"大冶市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"丹江口市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"洪湖市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"石首市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"松滋市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"宜都市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"当阳市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"枝江市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"老河口市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"枣阳市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"宜城市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"钟祥市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"应城市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"安陆市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"汉川市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"麻城市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"武穴市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"赤壁市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"广水市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"仙桃市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"天门市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"潜江市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"恩施市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"利川市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 2, \"provinceName\": \"湖南省\", \"city\": [ { \"cityName\": \"长沙市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"株洲市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"湘潭市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"衡阳市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"邵阳市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"岳阳市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"常德市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"张家界市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"益阳市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"郴州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"永州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"怀化市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"娄底市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"湘西土家族苗族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"浏阳市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"醴陵市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"湘乡市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"韶山市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"耒阳市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"常宁市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"武冈市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"临湘市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"汨罗市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"津市市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"沅江市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"资兴市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"洪江市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"冷水江市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"涟源市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"吉首市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 2, \"provinceName\": \"四川省\", \"city\": [ { \"cityName\": \"成都市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"自贡市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"攀枝花市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"泸州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"德阳市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"绵阳市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"广元市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"遂宁市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"内江市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"乐山市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"南充市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"眉山市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"宜宾市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"广安市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"达州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"雅安市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"巴中市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"资阳市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"阿坝藏族羌族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"甘孜藏族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"凉山彝族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"都江堰市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"彭州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"邛崃市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"崇州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"广汉市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"什邡市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"绵竹市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"江油市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"峨眉山市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"阆中市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"华蓥市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"万源市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"简阳市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"西昌市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 2, \"provinceName\": \"贵州省\", \"city\": [ { \"cityName\": \"贵阳市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"六盘水市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"遵义市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"安顺市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"铜仁地区\", \"areaType\": 4, \"isCapital\": false }, { \"cityName\": \"毕节地区\", \"areaType\": 4, \"isCapital\": false }, { \"cityName\": \"黔西南布依族苗族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"黔东南苗族侗族自治州、\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"黔南布依族苗族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"清镇市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"赤水市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"仁怀市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"铜仁市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"毕节市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"兴义市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"凯里市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"都匀市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"福泉市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 2, \"provinceName\": \"云南省\", \"city\": [ { \"cityName\": \"昆明市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"曲靖市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"玉溪市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"保山市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"昭通市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"丽江市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"普洱市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"临沧市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"文山壮族苗族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"红河哈尼族彝族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"西双版纳傣族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"楚雄彝族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"大理白族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"德宏傣族景颇族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"怒江僳僳族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"迪庆藏族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"安宁市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"宣威市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"个旧市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"开远市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"景洪市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"楚雄市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"大理市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"潞西市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"瑞丽市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 2, \"provinceName\": \"广东省\", \"city\": [ { \"cityName\": \"广州市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"深圳市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"珠海市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"汕头市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"韶关市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"佛山市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"江门市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"湛江市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"茂名市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"肇庆市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"惠州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"梅州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"汕尾市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"河源市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"阳江市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"清远市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"东莞市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"中山市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"潮州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"揭阳市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"云浮市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"从化市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"增城市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"乐昌市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"南雄市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"台山市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"开平市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"鹤山市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"恩平市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"廉江市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"雷州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"吴川市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"高州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"化州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"信宜市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"高要市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"四会市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"兴宁市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"陆丰市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"阳春市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"英德市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"连州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"普宁市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"罗定市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 2, \"provinceName\": \"海南省\", \"city\": [ { \"cityName\": \"海口市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"三亚市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"文昌市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"琼海市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"万宁市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"五指山市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"东方市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"儋州市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 2, \"provinceName\": \"甘肃省\", \"city\": [ { \"cityName\": \"兰州市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"金昌市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"白银市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"天水市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"嘉峪关市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"武威市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"张掖市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"平凉市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"酒泉市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"庆阳市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"定西市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"陇南市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"临夏回族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"甘南藏族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"玉门市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"敦煌市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"临夏市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"合作市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 2, \"provinceName\": \"青海省\", \"city\": [ { \"cityName\": \"西宁市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"海东地区\", \"areaType\": 4, \"isCapital\": false }, { \"cityName\": \"海北藏族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"黄南藏族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"海南藏族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"果洛藏族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"玉树藏族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"海西蒙古族藏族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"德令哈市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"格尔木市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 2, \"provinceName\": \"台湾省\", \"city\": [ { \"cityName\": \"台北市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"高雄市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"基隆市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"台中市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"台南市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"新竹市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"嘉义市\", \"areaType\": 2, \"isCapital\": false } ] }, { \"provinceType\": 3, \"provinceName\": \"内蒙古自治区\", \"city\": [ { \"cityName\": \"呼和浩特市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"包头市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"乌海市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"赤峰市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"通辽市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"鄂尔多斯市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"呼伦贝尔市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"巴彦淖尔市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"乌兰察布市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"锡林郭勒盟\", \"areaType\": 6, \"isCapital\": false }, { \"cityName\": \"兴安盟\", \"areaType\": 6, \"isCapital\": false }, { \"cityName\": \"阿拉善盟\", \"areaType\": 6, \"isCapital\": false }, { \"cityName\": \"霍林郭勒市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"满洲里市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"牙克石市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"扎兰屯市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"根河市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"额尔古纳市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"丰镇市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"锡林浩特市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"二连浩特市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"乌兰浩特市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"阿尔山市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 3, \"provinceName\": \"新疆维吾尔自治区\", \"city\": [ { \"cityName\": \"乌鲁木齐市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"克拉玛依市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"吐鲁番地区\", \"areaType\": 4, \"isCapital\": false }, { \"cityName\": \"哈密地区\", \"areaType\": 4, \"isCapital\": false }, { \"cityName\": \"和田地区\", \"areaType\": 4, \"isCapital\": false }, { \"cityName\": \"阿克苏地区\", \"areaType\": 4, \"isCapital\": false }, { \"cityName\": \"喀什地区\", \"areaType\": 4, \"isCapital\": false }, { \"cityName\": \"塔城地区\", \"areaType\": 4, \"isCapital\": false }, { \"cityName\": \"阿勒泰地区\", \"areaType\": 4, \"isCapital\": false }, { \"cityName\": \"克孜勒苏柯尔克孜自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"巴音郭楞蒙古自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"昌吉回族自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"博尔塔拉蒙古自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"伊犁哈萨克自治州\", \"areaType\": 5, \"isCapital\": false }, { \"cityName\": \"石河子市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"阿拉尔市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"图木舒克市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"五家渠市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"吐鲁番市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"哈密市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"和田市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"阿克苏市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"喀什市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"阿图什市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"库尔勒市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"昌吉市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"阜康市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"米泉市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"博乐市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"伊宁市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"奎屯市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"塔城市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"乌苏市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"阿勒泰市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 3, \"provinceName\": \"西藏自治区\", \"city\": [ { \"cityName\": \"拉萨市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"那曲地区\", \"areaType\": 4, \"isCapital\": false }, { \"cityName\": \"昌都地区\", \"areaType\": 4, \"isCapital\": false }, { \"cityName\": \"山南地区\", \"areaType\": 4, \"isCapital\": false }, { \"cityName\": \"日喀则地区\", \"areaType\": 4, \"isCapital\": false }, { \"cityName\": \"阿里地区\", \"areaType\": 4, \"isCapital\": false }, { \"cityName\": \"林芝地区\", \"areaType\": 4, \"isCapital\": false }, { \"cityName\": \"日喀则市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 3, \"provinceName\": \"广西壮族自治区\", \"city\": [ { \"cityName\": \"南宁市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"柳州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"桂林市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"梧州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"北海市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"防城港市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"钦州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"贵港市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"玉林市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"百色市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"贺州市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"河池市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"来宾市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"崇左市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"岑溪市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"东兴市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"桂平市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"北流市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"宜州市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"合山市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"凭祥市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 2, \"provinceName\": \"宁夏回族自治区\", \"city\": [ { \"cityName\": \"银川市\", \"areaType\": 2, \"isCapital\": true }, { \"cityName\": \"石嘴山市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"吴忠市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"固原市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"中卫市\", \"areaType\": 2, \"isCapital\": false }, { \"cityName\": \"灵武市\", \"areaType\": 3, \"isCapital\": false }, { \"cityName\": \"青铜峡市\", \"areaType\": 3, \"isCapital\": false } ] }, { \"provinceType\": 4, \"provinceName\": \"香港\", \"city\": [ { \"cityName\": \"香港\", \"areaType\": 7, \"isCapital\": true } ] }, { \"provinceType\": 4, \"provinceName\": \"澳门\", \"city\": [ { \"cityName\": \"澳门\", \"areaType\": 7, \"isCapital\": true } ] } ] 六.读取文件方法1.读取文件方法","categories":[{"name":"工具篇","slug":"工具篇","permalink":"https://macongmc.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"}],"tags":[{"name":"映射","slug":"映射","permalink":"https://macongmc.github.io/tags/%E6%98%A0%E5%B0%84/"}],"author":"马聪"},{"title":"LuckyBlog开源搭建教程","slug":"BlogOpen","date":"2020-09-16T16:00:00.000Z","updated":"2022-08-02T09:39:15.009Z","comments":true,"path":"posts/d74d8b76.html","link":"","permalink":"https://macongmc.github.io/posts/d74d8b76.html","excerpt":"","text":"前言之前在B站上发布了个人博客的视频，播放量也破千了，有网友私聊也想要搭建一个这样的博客。经过一段时间的准备，现将本人博客的源代码公布出来，大家只需要根据以下的步骤，即可快速搭建一个漂亮完善的博客。 0x01 LuckyBlog 介绍上一个LuckyBlog版本发布于2020年的9月份，是在 洪卫の博客 基础上进行修改的。自从发布以来有很多网友都私信搭建了博客，同时也发现了旧版本中存在的一些问题需要解决，例如：搜索框不适配XML代码搜索，部分图片失效，代码块问题以及各种小问题。现在将最新的LuckyBlog版本代码发布出来，修复改进了不少的BUG，使其更加稳定运行。同时完善了博客的基础功能，例如：音乐、视频、相册、百宝箱等页面。同时增加了不少的新功能，例如：适配Hexo5.x、黑白天浏览模式、仿Windows页面，站点统计等。 博客演示地址：http://luckyzmj.cn/ 开源项目地址：https://github.com/LuckyZmj/LuckyBlog 主题特性 简单漂亮，文章内容美观易读 Material Design 设计 响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现 首页轮播文章及每天动态切换 Banner 图片 瀑布流式的博客文章列表（文章无特色图片时会有 24 张漂亮的图片代替） 时间轴式的归档页 词云的标签页和雷达图的分类页 丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等） 可自定义的数据的友情链接页面 支持文章置顶和文章打赏 支持 MathJax TOC 目录，优化了目录显示效果 可设置复制文章内容时追加版权信息 可设置阅读文章时做密码验证 Gitalk、Gitment、Valine 和 Disqus 评论模块（推荐使用 Valine） 集成了不蒜子统计、谷歌分析（Google Analytics）和文章字数统计等功能 支持在首页的音乐播放和视频播放功能 修改了原主题以及基础主题中的一些BUG 加入图片懒加载功能，在根目录配置文件开启和关闭 增加留言板功能 在关于板块,加入简历功能页 增加完善音乐、相册、视频等功能页面 支持emoji表情，用markdown emoji语法书写直接生成对应的能跳跃的表情 增加网站运行时间显示 增加live2d 动漫人物模型 整体替换Banner图片和文章特色图片 增加实用的快捷导航栏功能 修改了一些控件的参数以及部分样式 优化了代码显示块的效果 增加页面樱花飘落动效 增加鼠标点击烟花爆炸动效 增加页面雪花飘落动效 增加博客白云背景效果 增加天气接口控件 加入鼠标点击文字特效 增加DaoVoice在线聊天插件 增加博客代码、图片压缩功能 增加黑白天浏览模式功能 增加仿Windows功能 增加站点统计功能 增加留言版一言功能 其他 0x02 LuckyBlog 安装1. 安装GitGit是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git的作用是将本地的网页文件传到github上。 Git下载地址 Git教程 windows： 到git官网上下载.exe文件,Download git,安装选项全部默认即可。 2. 安装node.jsHexo是基于node.js编写的，所以需要安装一下node.js和里面的npm工具。 windows： 到Node.js官网下载.exe文件，安装选项全部默认。安装好之后，按Win+R打开cmd命令提示符，输入node -v和npm -v，若出现版本号，则说明安装成功。 3. 添加npm国内源使用阿里的国内镜像进行加速下载 npm config set registry https://registry.npm.taobao.org 4. 安装Hexo前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹MyBlog，用来存放自己的博客文件，然后cd到这个文件夹下（或者在这个文件夹下直接鼠标右键git bash打开）。 比如我的博客文件都存放在C:\\MyBlog目录下。 在该目录下右键点击Git Bash Here，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不用Windows自带的cmd了。 定位到该目录下，输入npm install -g hexo-cli安装Hexo。可能会有几个报错，不用理会。 npm install -g hexo-cli 安装完后输入hexo -v验证是否安装成功。 接下来初始化一下hexo,即初始化我们的博客网站。例如我的在C:\\MyBlog文件夹下的命令行中，输入hexo init初始化文件夹 hexo init 新建完成后，指定文件夹MyBlog目录下有： node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题** _config.yml: 博客的配置文件** 到此为止，本地的Hexo基础环境搭建完成了。 5. 安装LuckyBlog下载源代码到本地文件下 git clone https://github.com/LuckyZmj/LuckyBlog.git 将下载好的LuckyBlog全部复制到MyBlog目录下，如果复制过程中出现重复文件，点击替换。 最后使用 npm i 或者 npm install 安装依赖环境包即可。 如果安装依赖环境出错，可以参考这篇文章。 最后执行 hexo clean 和 hexo s -g 启动Hexo本地预览，即可看到效果。 到此为止LuckyBlog安装完成，接下来就是个性化设置了。 0x03 LuckyBlog 个性化 注意！注意！注意！在阅读以下博客个性化之前，最好希望大家有Hexo博客配置主题的基础。如果是完全小白，建议去网上搜索学习相关Hexo搭建博客的过程，另外去B站上也有很多视频教程。博客个性化是需要大家有耐心的，因为每个人的操作不同，在配置过程中可能会遇到一些不可预期的问题，希望大家可以克服这些困难，如有需要帮助，也可以私信博主帮助大家解决问题。 1. 修改部署平台编辑根目录下的配置文件MyBlog/_config.yml，找到如下内容并修改 deploy: - type: git repo: git@github.com:LuckyZmj/LuckyZmj.github.io.git # 替换为你的部署平台地址 branch: master 2. 修改网站信息编辑根目录下的配置文件MyBlog/_config.yml，找到如下内容并修改 # Site title: Luckey subtitle: 'Luckeyの博客' description: '本科 | 计算机科学与技术 | 网络安全' keywords: 'luckyzmj 计算机 网络安全 渗透测试' # 博客网站关键词 author: Luckey # 博主名称 language: zh-CN timezone: '' # URL ## If your site is put in a subdirectory, set url as 'http://example.com/child' and root as '/child/' url: http://www.luckyzmj.cn # 更改为你的博客地址 root: / # permalink: :year/:month/:day/:title/ permalink: posts/:abbrlink.html # p 是自定义的前缀 abbrlink: alg: crc32 #算法： crc16(default) and crc32 rep: hex #进制： dec(default) and hex permalink_defaults: pretty_urls: trailing_index: true # Set to false to remove trailing 'index.html' from permalinks trailing_html: true # Set to false to remove trailing '.html' from permalinks 3. 修改博客头像编辑主题目录下的配置文件MyBlog/themes/matery/_config.yml，找到如下内容并修改 # Configure website favicon and LOGO # 将以下改为自己的头像链接即可 favicon: https://s1.ax1x.com/2020/05/17/YR20js.jpg logo: https://s1.ax1x.com/2020/05/17/YRWsYT.png 4. 修改留言板简介演示效果如下： 编辑 /MyBlog/contact/index.md，修改你想要内容即可 --- title: contact date: 2019-10-25 00:00:00 type: \"contact\" layout: \"contact\" --- ## 畅所欲言 --- 在这里可以留下你的足迹，欢迎在下方留言，欢迎交换友链，一起交流学习！ ## 友链 --- Lucky_Meの友链信息 博客名称: Lucky_Meの博客 博客网址: http://luckyzmj.cn 博客头像: https://s1.ax1x.com/2020/05/17/YRWsYT.png 博客介绍: 知识面决定攻击面，知识链决定攻击深度！ 5. 修改音乐列表想要修改自己喜欢的音乐之前，需要先获取音乐列表的id。 以QQ音乐为例：先登录QQ音乐网页版，点击打开自己喜欢的音乐列表，在网页的URL处包含了音乐列表的id，如下图所示 编辑主题目录下的配置文件MyBlog/themes/matery/_config.yml，找到如下内容并修改 # 默认是博主的QQ音乐的id，大家可以改为自己音乐喜欢列表的id # 更新完id，就可以同步加载自己喜欢的列表音乐了 # Whether to display the musics. # 是否在首页显示音乐. music: enable: true title: #非吸底模式有效 enable: true show: 听听音乐 autoHide: true # hide automaticaly server: tencent #require music platform: netease, tencent, kugou, xiami, baidu type: playlist #require song, playlist, album, search, artist id: 1776127550 #require song id / playlist id / album id / search keyword fixed: true # 开启吸底模式 autoplay: false # 是否自动播放 theme: '#42b983' loop: 'all' # 音频循环播放, 可选值: 'all', 'one', 'none' order: 'random' # 音频循环顺序, 可选值: 'list', 'random' preload: 'auto' # 预加载，可选值: 'none', 'metadata', 'auto' volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效 listFolded: true # 列表默认折叠 hideLrc: true # 隐藏歌词 # Whether to display the musics. # 单独的音乐页面. musics: enable: true title: #非吸底模式有效 enable: true show: 听听音乐 server: tencent #require music platform: netease, tencent, kugou, xiami, baidu type: playlist #require song, playlist, album, search, artist id: 1776127550 #require song id / playlist id / album id / search keyword fixed: false # 开启吸底模式 autoplay: true # 是否自动播放 theme: '#42b983' loop: 'all' # 音频循环播放, 可选值: 'all', 'one', 'none' order: 'random' # 音频循环顺序, 可选值: 'list', 'random' preload: 'auto' # 预加载，可选值: 'none', 'metadata', 'auto' volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效 listFolded: false # 列表默认折叠 listMaxHeight: \"525px\" #列表最大高度 6. 绑定 Valine 评论编辑主题目录下的配置文件MyBlog/themes/matery/_config.yml，找到如下内容并修改 # Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey. valine: enable: true appId: Ucrxxxxxxxxxxxxxxxx-xxxxsz # 自行注册valine获取 appKey: zPsLxxxxxxxxxxxxxxerLmd # 自行注册valine获取 notify: true verify: true visitor: true avatar: 'monsterid' # Gravatar style : mm/identicon/monsterid/wavatar/retro/hide pageSize: 10 placeholder: '留下你的足迹..' # Comment Box placeholder background: /medias/comment_bg.png count: true enableQQ: 16463223 # 改为自己的QQ号 recordIP: true requiredFields: - nick - mail guest_info: - nick - mail - link master: - 46606772953bed0812789d6dc955614e # md5加密后的博主邮箱 metaPlaceholder: # 输入框的背景文字 nick: 昵称/QQ号(必填) mail: 邮箱(必填) link: 网址(https://) lang: zh-CN tagMeta: # The String Array of Words to show Flag.[Just Only xCss Style mode] - 博主 - 小伙伴 - 访客 friends: # The MD5 String Array of friends Email to show friends Flag.[Just Only xCss Style mode] - cb3e577ff029d6073400d5557effd41f - 7. 绑定 DaoVoice 在线聊天编辑主题目录下的配置文件MyBlog/themes/matery/_config.yml，找到如下内容并修改 daovoice: enable: true app_id: 4xxxxxxxe #DaoVoice中的app_id 8. 快捷导航页面个性化编辑文件MyBlog/source/tools/index.html，以下简单标记出几处，还有其他涉及到博客信息的内容都需要改为你自己的博客信息即可。 9. 添加友情链接编辑文件MyBlog/suorce/_data/friends.json，按如下格式添加友情 [ { \"avatar\": \"https://s1.ax1x.com/2020/05/17/YRWsYT.png\", \"name\": \"Luckey\", \"introduction\": \"越努力，越幸运\", \"url\": \"http://www.luckyzmj.cn\", \"title\": \"访问主页\" },{ \"avatar\": \"https://sunhwee.com/hwsun.jpg\", \"name\": \"洪卫の博客\", \"introduction\": \"UESTC CVer\", \"url\": \"http://sunhwee.com\", \"title\": \"访问主页\" } ] 10. 添加相册比如你的图片上传图床后，链接地址如下 https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/galleries/璀璨星空/01.jpg https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/galleries/璀璨星空/02.jpg https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/galleries/动漫风景/01.jpg https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/galleries/动漫风景/02.jpg ... 首先提取出图片链接公共的部分，作为图床地址 https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/galleries/ 然后再提取图片地址中不同的部分，作为图片地址 璀璨星空/01.jpg 璀璨星空/02.jpg 动漫风景/01.jpg 动漫风景/03.jpg ... 具体怎么分割根据你自己图床的链接格式而定，以上为我的github图床格式为例。 将相册图床的地址改为你自己的图床地址，需要更改两处文件 # 例如我的图床地址为： https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed/galleries/ themes/matery/layout/galleries.ejs themes/matery/layout/gallerie.ejs 为每个相册添加链接地址，在根目录/source/List/galleries/下新建 相册名称 文件夹，并在该文件夹下新建 index.md 最后，在根目录/source/_data/galleries.json中添加图片链接，格式如下, [ { \"name\": \"璀璨星空\", \"cover\": \"璀璨星空/01.jpg\", \"description\": \"璀璨星空\", \"photos\": [ \"璀璨星空/01.jpg\", \"璀璨星空/02.jpg\", \"璀璨星空/03.jpg\", \"璀璨星空/04.jpg\", \"璀璨星空/05.jpg\", \"璀璨星空/06.jpg\", \"璀璨星空/07.jpg\", \"璀璨星空/08.jpg\", \"璀璨星空/09.jpg\", \"璀璨星空/10.jpg\", \"璀璨星空/11.jpg\", \"璀璨星空/12.jpg\", \"璀璨星空/13.jpg\", \"璀璨星空/14.jpg\", \"璀璨星空/15.jpg\", \"璀璨星空/16.jpg\" ] }, { \"name\": \"动漫风景\", \"cover\": \"动漫风景/01.jpg\", \"description\": \"动漫风景\", \"photos\": [ \"动漫风景/01.jpg\", \"动漫风景/02.jpg\", \"动漫风景/03.jpg\", \"动漫风景/04.jpg\", \"动漫风景/05.jpg\", \"动漫风景/06.jpg\", \"动漫风景/07.jpg\", \"动漫风景/08.jpg\", \"动漫风景/09.jpg\", \"动漫风景/10.jpg\", \"动漫风景/11.jpg\", \"动漫风景/12.jpg\", \"动漫风景/13.jpg\", \"动漫风景/14.jpg\", \"动漫风景/15.jpg\", \"动漫风景/16.jpg\" ] } ] 11. 站点统计功能站点统计的数据来源于百度统计,当你的网站被百度收录后就会在百度统计中出现数据，具体效果如下： 由于博客的统计页面数据不能直接从百度站点中调用，因此需要自行从百度站点中将相应数据填入博客站点统计页面的源代码文件中，个人建议每隔一个月手动更新一次数据。 打开MyBlog\\themes\\matery\\layout\\census.ejs文件，将百度统计中的数据填入源代码中，修改代码如下： 11. 仿Windows个性化仿Windows页面是采用YLUI实现的，YLUI提供了社区版本供大家学习使用，具体效果如下： 大家可以查看YLUI官方的开发文档进行开发，有不懂的可以加官方的QQ群：191372634 进行讨论。 12. 博客动漫风格背景图因为在上一个LuckyBlog版本发布的网站风格是偏向动漫风格的，如果大家喜欢动漫风格，只需要替换以下配置即可。 博客每日轮播图： 以下链接图片全部下载保存到MyBlog\\themes\\matery\\source\\medias\\banner中，以0~7.jpg的文件名格式命名即可。 https://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/0.jpg https://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/1.jpg https://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/2.jpg https://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/3.jpg https://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/4.jpg https://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/5.jpg https://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/6.jpg https://cdn.jsdelivr.net/gh/LuckyZmj/LuckyBlog@master/themes/matery/source/medias/banner/7.jpg 无文章特色背景图： 打开主题配置文件MyBlog\\themes\\matery\\_config.yml，修改替换如下代码即可： # The post featured images that needs to be displayed when there is no image. # 无文章特色图片时需要显示的文章特色图片. featureImages: - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/01.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/02.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/04.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/06.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/07.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/10.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/11.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/12.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/09.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/14.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/15.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/16.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E4%BA%8C%E6%AC%A1%E5%85%83%E9%A3%8E/06.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/02.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/03.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/04.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/07.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/08.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/11.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/10.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/09.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/12.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/13.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/14.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/16.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/15.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/11.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/09.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/03.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/08.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/03.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E9%A3%8E%E6%99%AF/13.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/01.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E5%8A%A8%E6%BC%AB%E6%8F%92%E7%94%BB/05.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/14.jpg - https://cdn.jsdelivr.net/gh/LuckyZmj/imgbed@master/galleries/%E7%92%80%E7%92%A8%E6%98%9F%E7%A9%BA/01.jpg 0x04 更多内容优化以上简单介绍了 LuckyBlog 中一些要修改的个性化地方，其他更详细的优化参考其他关于Matery的文章。以下几篇文章都是基于hexo-theme-matery主题优化的教程，大家如果遇到问题，可以参考其中的方法。 个人博客搭建 Hexo+Github博客搭建完全教程 hexo-theme-matery作者教程 Hexo+github搭建博客(超级详细版，精细入微) hexo（matery）背景、滚动条优化+增加点击跳评论","categories":[{"name":"博客篇","slug":"博客篇","permalink":"https://macongmc.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"hexo-blog-lucky","slug":"hexo-blog-lucky","permalink":"https://macongmc.github.io/tags/hexo-blog-lucky/"},{"name":"博客搭建教程","slug":"博客搭建教程","permalink":"https://macongmc.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"}],"author":"luckyzmj"},{"title":"文字背景粒子特效","slug":"jQuery+CSS3","date":"2020-03-26T16:00:00.000Z","updated":"2022-08-02T09:39:28.153Z","comments":true,"path":"posts/4b3510a4.html","link":"","permalink":"https://macongmc.github.io/posts/4b3510a4.html","excerpt":"","text":"前言一款jQuery+CSS3的文字背景粒子动画特效，一共6种粒子效果，每种文字背景的粒子效果都不同，有漂浮的有坠落的等等。 0x001 特效演示 This is fires This is lines This is hearts This is bubbles This is confetti This is sunbeams .particletext { } .fire > .particle { position: absolute; background-color: rgba(255, 193, 7, 0.5); border-radius: 40px; border-top-right-radius: 0px; -webkit-animation: fires 0.8s linear infinite; animation: fires 0.8s linear infinite; -webkit-transform: rotate(-45deg); transform: rotate(-45deg); opacity: 0; } /*css keyframes 动画*/ @-webkit-keyframes fires { 0% { -webkit-transform: rotate(-70deg) translateY(0%); transform: rotate(-70deg) translateY(0%); } 25% { -webkit-transform: rotate(-20deg) translateY(-5%); transform: rotate(-20deg) translateY(-5%); opacity: 1; } 50% { -webkit-transform: rotate(-70deg) translateY(-10%); transform: rotate(-70deg) translateY(-10%); } 75% { -webkit-transform: rotate(-20deg) translateY(-20%); transform: rotate(-20deg) translateY(-20%); } 100% { -webkit-transform: rotate(-70deg) translateY(-40%); transform: rotate(-70deg) translateY(-40%); opacity: 1; } } @keyframes fires { 0% { -webkit-transform: rotate(-70deg) translateY(0%); transform: rotate(-70deg) translateY(0%); } 25% { -webkit-transform: rotate(-20deg) translateY(-5%); transform: rotate(-20deg) translateY(-5%); opacity: 1; } 50% { -webkit-transform: rotate(-70deg) translateY(-10%); transform: rotate(-70deg) translateY(-10%); } 75% { -webkit-transform: rotate(-20deg) translateY(-20%); transform: rotate(-20deg) translateY(-20%); } 100% { -webkit-transform: rotate(-70deg) translateY(-40%); transform: rotate(-70deg) translateY(-40%); opacity: 1; } } function fire() { $.each($(\".particletext.fire\"), function(){ var firecount = ($(this).width()/50)*20; for(var i = 0; i .particle { position: absolute; background-color: rgba(244, 67, 54, 0.5); -webkit-animation: lines 3s linear infinite; animation: lines 3s linear infinite; } @-webkit-keyframes lines { 0%, 50%, 100% { -webkit-transform: translateY(0%); transform: translateY(0%); } 25% { -webkit-transform: translateY(100%); transform: translateY(100%); } 75% { -webkit-transform: translateY(-100%); transform: translateY(-100%); } } @keyframes lines { 0%, 50%, 100% { -webkit-transform: translateY(0%); transform: translateY(0%); } 25% { -webkit-transform: translateY(100%); transform: translateY(100%); } 75% { -webkit-transform: translateY(-100%); transform: translateY(-100%); } } function lines() { $.each($(\".particletext.lines\"), function(){ var linecount = ($(this).width()/50)*10; for(var i = 0; i .particle { opacity: 0; position: absolute; background-color: #cc2a5d; -webkit-animation: hearts 3s ease-in infinite; animation: hearts 3s ease-in infinite; } .hearts > .particle:before,.hearts > .particle:after { position: absolute; content: ''; border-radius: 100px; top: 0px; left: 0px; width: 100%; height: 100%; background-color: #cc2a5d; } .hearts > .particle:before { -webkit-transform: translateX(-50%); transform: translateX(-50%); } .hearts > .particle:after { -webkit-transform: translateY(-50%); transform: translateY(-50%); } @-webkit-keyframes hearts { 0% { opacity: 0; -webkit-transform: translate(0, 0%) rotate(45deg); transform: translate(0, 0%) rotate(45deg); } 20% { opacity: 0.8; -webkit-transform: translate(0, -20%) rotate(45deg); transform: translate(0, -20%) rotate(45deg); } 100% { opacity: 0; -webkit-transform: translate(0, -1000%) rotate(45deg); transform: translate(0, -1000%) rotate(45deg); } } @keyframes hearts { 0% { opacity: 0; -webkit-transform: translate(0, 0%) rotate(45deg); transform: translate(0, 0%) rotate(45deg); } 20% { opacity: 0.8; -webkit-transform: translate(0, -20%) rotate(45deg); transform: translate(0, -20%) rotate(45deg); } 100% { opacity: 0; -webkit-transform: translate(0, -1000%) rotate(45deg); transform: translate(0, -1000%) rotate(45deg); } } function hearts() { $.each($(\".particletext.hearts\"), function(){ var heartcount = ($(this).width()/50)*5; for(var i = 0; i .particle { opacity: 0; position: absolute; background-color: rgba(33, 150, 243, 0.5); -webkit-animation: bubbles 3s ease-in infinite; animation: bubbles 3s ease-in infinite; border-radius: 100%; } @-webkit-keyframes bubbles { 0% { opacity: 0; } 20% { opacity: 1; -webkit-transform: translate(0, -20%); transform: translate(0, -20%); } 100% { opacity: 0; -webkit-transform: translate(0, -1000%); transform: translate(0, -1000%); } } @keyframes bubbles { 0% { opacity: 0; } 20% { opacity: 1; -webkit-transform: translate(0, -20%); transform: translate(0, -20%); } 100% { opacity: 0; -webkit-transform: translate(0, -1000%); transform: translate(0, -1000%); } } function bubbles() { $.each($(\".particletext.bubbles\"), function(){ var bubblecount = ($(this).width()/50)*10; for(var i = 0; i .particle { opacity: 0; position: absolute; -webkit-animation: confetti 3s ease-in infinite; animation: confetti 3s ease-in infinite; } .confetti > .particle.c1 { background-color: rgba(76, 175, 80, 0.5); } .confetti > .particle.c2 { background-color: rgba(156, 39, 176, 0.5); } @-webkit-keyframes confetti { 0% { opacity: 0; -webkit-transform: translateY(0%) rotate(0deg); transform: translateY(0%) rotate(0deg); } 10% { opacity: 1; } 35% { -webkit-transform: translateY(-800%) rotate(270deg); transform: translateY(-800%) rotate(270deg); } 80% { opacity: 1; } 100% { opacity: 0; -webkit-transform: translateY(2000%) rotate(1440deg); transform: translateY(2000%) rotate(1440deg); } } @keyframes confetti { 0% { opacity: 0; -webkit-transform: translateY(0%) rotate(0deg); transform: translateY(0%) rotate(0deg); } 10% { opacity: 1; } 35% { -webkit-transform: translateY(-800%) rotate(270deg); transform: translateY(-800%) rotate(270deg); } 80% { opacity: 1; } 100% { opacity: 0; -webkit-transform: translateY(2000%) rotate(1440deg); transform: translateY(2000%) rotate(1440deg); } } function confetti() { $.each($(\".particletext.confetti\"), function(){ var confetticount = ($(this).width()/50)*10; for(var i = 0; i .particle { position: absolute; background-color: rgba(253, 216, 53, 0.5); -webkit-animation: sunbeams 3s linear infinite; animation: sunbeams 3s linear infinite; } @-webkit-keyframes sunbeams { 0% { -webkit-transform: translateY(40%) rotate(0deg); transform: translateY(40%) rotate(0deg); } 50% { -webkit-transform: translateY(-40%) rotate(180deg); transform: translateY(-40%) rotate(180deg); } 100% { -webkit-transform: translateY(40%) rotate(360deg); transform: translateY(40%) rotate(360deg); } 0%,14%,17%,43%,53%,71%,80%,94%,100% { opacity: 0; } 6%,15%,24%,28%,48%,55%,78%,82%,99% { opacity: 1; } } @keyframes sunbeams { 0% { -webkit-transform: translateY(40%) rotate(0deg); transform: translateY(40%) rotate(0deg); } 50% { -webkit-transform: translateY(-40%) rotate(180deg); transform: translateY(-40%) rotate(180deg); } 100% { -webkit-transform: translateY(40%) rotate(360deg); transform: translateY(40%) rotate(360deg); } 0%,14%,17%,43%,53%,71%,80%,94%,100% { opacity: 0; } 6%,15%,24%,28%,48%,55%,78%,82%,99% { opacity: 1; } } function sunbeams() { $.each($(\".particletext.sunbeams\"), function(){ var linecount = ($(this).width()/50)*10; for(var i = 0; i","categories":[{"name":"前端篇","slug":"前端篇","permalink":"https://macongmc.github.io/categories/%E5%89%8D%E7%AB%AF%E7%AF%87/"}],"tags":[{"name":"jQuery+CSS3","slug":"jQuery-CSS3","permalink":"https://macongmc.github.io/tags/jQuery-CSS3/"},{"name":"粒子特效","slug":"粒子特效","permalink":"https://macongmc.github.io/tags/%E7%B2%92%E5%AD%90%E7%89%B9%E6%95%88/"}],"author":"Luckey"},{"title":"PicGo+GitHub 图床搭建","slug":"PicGo-GitHub","date":"2020-03-14T16:00:00.000Z","updated":"2022-08-02T09:32:57.196Z","comments":true,"path":"posts/7a46f93c.html","link":"","permalink":"https://macongmc.github.io/posts/7a46f93c.html","excerpt":"","text":"前言用GitHub搭建图床，在很久之前我就有了解，但由于市面上有挺多免费的图床，比如我之前一直在用的 路过图床，所以一直懒得动手搭建GitHub图床。一直到前两天我在完善博客的相册时，发现 路过图床 免费版的有这么多限制，比如：每小时限制上传50张图片，每天限制上传100张图片，而且免费版用户的存储容量貌似不过300M，这才意识到有一个自己的GitHub图床是多么重要。 0x001 PicGO 介绍PicGo是一款图片上传工具，目前支持 SM.MS图床、腾讯云COS、GitHub图床、七牛图床、Imgur图床、阿里云OSS、又拍云图床，未来将支持更多图床。 在支持的这些图床中，SM.MS和Imgur有免费版和收费版，免费版的肯定有很多的使用限制，比如每小时限制上传次数，限制用户的上传容量等等；腾讯云COS、阿里云、有拍云都是要收费使用的；七牛云貌似前期使用免费，后期又要收费才能使用，就剩下的GitHub才是免费且最可靠的。 PicGo源项目GitHub地址已给出，但是去GitHub下载速度非常慢，这里额外提供一个蓝奏云的快速下载地址。 GitHub地址：https://github.com/Molunerfinn/PicGo 蓝奏云地址：https://luckyzmj.lanzous.com/id3e0id 0x002 GitHub 图床1. 创建GitHub图床仓库首先需要有一个登录GitHub的账号，没有的话去GitHub官网注册一个 创建一个新的图床仓库，点击右上角的New repository 填写如下配置信息，然后Create创建仓库 2. 获取GitHub token值点击右上的头像，选择设置Setting 点击选择Developer settings 点击 Generate New token 填写如下配置信息，只要勾选repo选项即可，然后页面拉到底部点击Generate token 即可 此时会跳转到带有token的页面，将token值复制记录下来，之后用PicGo绑定GitHub图床时会利用到 0x003 PicGo 配置1. 绑定GitHub图床首先下载安装好PicGo软件，然后在右列表找到GitHub图床配置 1. 设定仓库名(必填)： 按照“GitHub账户名/仓库名的格式填写”，比如我的是：Luckyzmj/imgbed 2. 设定分支名(必填)： 仓库分支名填写”master”或者”main”，视情况而定。因为GitHub 官方表示,从2020年10月1日起,在该平台上创建的所有新的源代码仓库将默认被命名为”main”,而不是原先的”master”。 3. 设定Token(必填)： 将之前步骤的Token值复制粘贴到这里 4. 指定存储路径： 这个选项可以为空，如果想将图片上传到仓库的指定目录下，可以填写目录名加/，比如我的imgbed仓库下有个posts文件夹，需设置为 posts/ 5. 设定自定义域名： 这里统一用jsdelivr的CDN加速域名，在上传图片后成功后，PicGo会将“自定义域名+上传的图片名”生成的访问链接 自定义域名格式：https://cdn.jsdelivr.net/gh/GitHub账户名/仓库名 以我的格式为例：https://cdn.jsdelivr.net/gh/Luckyzmj/imgbed 配置完全部信息后，点击 设为默认图床，最后点击确定即可 2. 上传图片到图床在上传区上传图片，可支持本地图片上传(可多选图片)、剪贴板上传、URL上传等三种方式。上传图片成功后，选择你想要生成的图片链接格式 在图片区，可以看到成功上传的图片，选择相应的图片进行操作即可 3. PicGo 注意事项如果配置完PicGo后却上传图片失败，可以参考以下方法： 检查自定义域名是否正确 仓库名不要有空格 图片名字不要带有特殊符号，如：%、+、*、空格等 建议开启时间戳重命名，防止图片名字重复 上传图片间歇太短，需在PicGo设置中关闭Server选项 PicGo应用不稳定因素，需重启应用 参考文章 https://blog.csdn.net/sunhwee/article/details/100109956","categories":[{"name":"博客篇","slug":"博客篇","permalink":"https://macongmc.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"PicGo","slug":"PicGo","permalink":"https://macongmc.github.io/tags/PicGo/"},{"name":"GitHub图床","slug":"GitHub图床","permalink":"https://macongmc.github.io/tags/GitHub%E5%9B%BE%E5%BA%8A/"}],"author":"Luckey"},{"title":"阿里云服务器部署Hexo博客","slug":"blog-aliyun","date":"2020-02-26T16:00:00.000Z","updated":"2022-08-02T09:41:43.293Z","comments":true,"path":"posts/19d2a4e6.html","link":"","permalink":"https://macongmc.github.io/posts/19d2a4e6.html","excerpt":"","text":"前言 相信大部分人使用Hexo搭建个人博客都会部署到一些免费的代码托管平台上，但这些免费的平台总是差强人意，比如国外的GitHub平台虽然完全免费，但在国内访问加载速度非常慢，又或者是国内的码云平台免费版有许多功能被阉割掉了，比如不能自定义域名，不能每次自动刷新提交的代码，需要到码云平台上手动刷新，如此一来非常繁琐。 为了有效解决上诉的一些问题，有条件的话，不妨在自己的云服务器上搭建Hexo博客。 效果演示 这是Hexo博客部署到GitHub上的网站测速效果 这是Hexo博客部署到阿里云服务器后的网站测速效果 环境准备 本地环境：Windows 10 云服务器环境：阿里云ECS（CentOS7.x） 开始部署 本地环境搭建1.安装Git 到git官网上下载.exe文件,Download git,安装选项还是全部默认，最后一步添加路径时选择Use Git from the Windows Command Prompt。 Git下载地址 Git教程 2.安装Nodejs 到Node.js官网下载.exe文件，安装选项全部默认。安装好之后，按Win+R打开cmd命令提示符，输入node -v和npm -v，若出现版本号，则说明安装成功。 使用npm阿里的国内镜像进行加速下载 npm config set registry https://registry.npm.taobao.org 4.安装Hexo 先创建一个文件夹MyBlog，用来存放自己的博客文件，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash here打开）。 定位到该目录下，输入npm install -g hexo-cli安装Hexo。可能会有几个报错，不用理会。 npm install -g hexo-cli 安装完后输入hexo -v,若出现版本号则，说明安装成功。 接下来初始化一下hexo,即初始化我们的博客，输入hexo init初始化文件夹 hexo init MyBlog 新建完成后，指定文件夹MyBlog目录下有： node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题** _config.yml: 博客的配置文件** 输入hexo g生成静态网页，然后输入hexo s打开本地服务器预览 hexo g hexo s 生成ssh公钥在本地桌面点击右键Git Bash Here打开Git终端，执行如下命令`,一路回车 ssh-keygen -t rsa 这个时候它会告诉你已经生成了.ssh的文件夹。在git bash中输入 cat ~/.ssh/id_rsa.pub 输出的内容就是公钥信息了 阿里云服务器环境搭建安装Git yum install git 创建Git账户 adduser git 添加账户权限 chmod 740 /etc/sudoers vim /etc/sudoers 找到 ## Allow root to run any commands anywhere root ALL=(ALL) ALL 添加以下内容 git ALL=(ALL) ALL 保存退出并改回权限 chmod 400 /etc/sudoers 设置git账户密码 sudo passwd git 切换至git用户，创建 ~/.ssh 文件夹和 ~/.ssh/authorized_keys 文件，并赋予相应的权限 su git mkdir ~/.ssh vim ~/.ssh/authorized_keys # 然后将win10中生成的id_rsa.pub文件中的公钥复制到authorized_keys chmod 600 /home/git/.ssh/authorized_keys chmod 700 /home/git/.ssh 在本地Git终端中测试是否能免密登录git，其中SERVER为填写自己的云主机IP，执行输入yes后不用密码就说明好了 ssh -v git@SERVER 创建目录 #repo作为为Git仓库目录 mkdir /var/repo chown -R git:git /var/repo chmod -R 755 /var/repo #hexo作为网站根目录 mkdir /var/www/hexo chown -R git:git /var/www/hexo chmod -R 755 /var/www/hexo 然后创建一个裸的 Git 仓库 cd var/repo git init --bare hexoBlog.git 创建一个新的 Git 钩子，用于自动部署 在 /var/repo/hexoBlog.git 下，有一个自动生成的 hooks 文件夹。我们需要在里边新建一个新的钩子文件 post-receive。 vim /var/repo/hexoBlog.git/hooks/post-receive 按 i 键进入文件的编辑模式，在该文件中添加两行代码（将下边的代码粘贴进去)，指定 Git 的工作树（源代码）和 Git 目录（配置文件等） #!/bin/bash git --work-tree=/var/www/hexo --git-dir=/var/repo/hexoBlog.git checkout -f 然后，按 Esc 键退出编辑模式，输入”:wq” 保存退出。 修改文件权限，使得其可执行 chown -R git:git /var/repo/hexoBlog.git/hooks/post-receive chmod +x /var/repo/hexoBlog.git/hooks/post-receive 到此为止 Git 仓库就搭建完成了。 阿里云服务器配置Nginx用宝塔面板来一键部署Nginx Linux面板6.0安装命令(暂时仅兼容Centos7.x，其它系统版本请安装5.9稳定版)： yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh Linux面板6.0升级专业版 curl http://download.bt.cn/install/update6.sh|bash 安装完成后会显示面板后台地址·账号·密码。打开面板后台地址登陆面板，选择Nginx的部署方案，静静等待部署。 部署完成，点击网站-添加站点-输入域名(没有域名的输入自己的IP地址)-底部的PHP版本选择”纯静态”-提交。 网站创建完成后点击设置-配置文件 server { listen 80; # server_name 填写自己的域名 server_name luckyzmj.cn blog.luckyzmj.cn; index index.php index.html index.htm default.php default.htm default.html; # 这里root填写自己的网站根目录，修改为/var/www/hexo root /var/www/hexo; -保存 点击设置-网站目录，修改为/var/www/hexo ，保存 重启宝塔面板服务 service bt restart 本地Hexo部署到阿里云服务器进入到本地Hexo博客的文件夹MyBlog,右键点击Git Bash Here，输入命令 #定义邮箱(更换为你的邮箱地址就行) git config --global user.email \"you@example.com\" #定义名称(更换自定义一个名称就行) git config --global user.name \"Your Name\" 配置_config.yml,完成自动化部署 打开本地Hexo博客的文件夹MyBlog文件夹下的_config.yml, 找到deploy deploy: type: git #server改为你的服务IP地址或解析后的域名 #例如我改为repo: git@luckyzmj.cn:/var/repo/blog.git repo: git@server:/var/repo/blog.git branch: master 保存后，即可测试部署 再进入到本地Hexo博客的文件夹MyBlog,右键点击Git Bash Here，输入命令 hexo clean hexo g -d 不报错说明完成，打开浏览器输入你的域名或ip地址就可以看到你部署的Hexo博客了。 到此为止，我们已经成功部完成，并且访问自己的服务器端比访问Github快多了。 小贴士 在部署过程中，执行 hexo d发现部署老是出错，什么权限不允许之类的，这里我们需要检查我们在上述的git操作部署是否使用了git用户操作，若是没有，需要给相应的目录更改用户组 使用 chown -R git:git /var/repo/ 这条命令递归的将repo目录及其子目录用户组设置为git。 同时使用 chown -R git:git /var/www/hexo 这样即可解决此类问题。 还有一个问题就是绑定域名后不能访问。原因是在国内任何域名只要绑定到国内的服务器主机上都必须去工信部和公安部备案完后才能正常使用。如果是港澳台的服务器或者是国外的服务器则可以不需要备案。 参考文章 https://blog.csdn.net/weixin_33907511/article/details/91398208?utm_source=distribute.pc_relevant.none-task","categories":[{"name":"博客篇","slug":"博客篇","permalink":"https://macongmc.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://macongmc.github.io/tags/Hexo/"},{"name":"博客","slug":"博客","permalink":"https://macongmc.github.io/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"阿里云","slug":"阿里云","permalink":"https://macongmc.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"}],"author":"Luckey"},{"title":"个人博客搭建","slug":"Blog","date":"2019-08-27T03:41:03.000Z","updated":"2022-08-02T09:39:37.730Z","comments":true,"path":"posts/e3e08109.html","link":"","permalink":"https://macongmc.github.io/posts/e3e08109.html","excerpt":"","text":"0x001 效果演示 0x002 简单介绍 前前后后大概花了一周多的时间，目前个人博客已经完善的差不多了，现在写个文章做个阶段总结，后续如果有更新的地方，会及时补充。本博客基于Hexo框架，采用hexo-theme-matery主题，在这里非常感谢作者洪卫的hexo-blog-fly博客开源，极大简化了构建博客的工作量和复杂度。在此开源博客的基础上做了改进，修复了一些bug，顺利搭建完成了我的个人博客。大家对此主题有兴趣的可以下载源代码，搭建属于自己的个性化博客。 个人博客 演示：http://luckyzmj.cn 0x003 Hexo 初级搭建 1. 安装GitGit是目前世界上最先进的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git的作用是将本地的网页文件传到github上。 Git下载地址 Git教程 windows： 到git官网上下载.exe文件,Download git,安装选项还是全部默认，最后一步添加路径时选择Use Git from the Windows Command Prompt。 2. 安装node.jsHexo是基于node.js编写的，所以需要安装一下node.js和里面的npm工具。 windows： 到Node.js官网下载.exe文件，安装选项全部默认。安装好之后，按Win+R打开cmd命令提示符，输入node -v和npm -v，若出现版本号，则说明安装成功。 3. 添加npm国内源使用阿里的国内镜像进行加速下载 npm config set registry https://registry.npm.taobao.org 4. 安装Hexo前面git和nodejs安装好后，就可以安装hexo了，你可以先创建一个文件夹MyBlog，用来存放自己的博客文件，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。 比如我的博客文件都存放在E:\\MyBlog目录下。 在该目录下右键点击Git Bash Here，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不用Windows自带的cmd了。 定位到该目录下，输入npm install -g hexo-cli安装Hexo。可能会有几个报错，不用理会。 npm install -g hexo-cli 安装完后输入hexo -v验证是否安装成功。 到此为止hexo就安装完了。 接下来初始化一下hexo,即初始化我们的网站，输入hexo init初始化文件夹 hexo init MyBlog 新建完成后，指定文件夹MyBlog目录下有： node_modules: 依赖包 public：存放生成的页面 scaffolds：生成文章的一些模板 source：用来存放你的文章 themes：主题** _config.yml: 博客的配置文件** 到此为止，本地的网站配置完成了。 输入hexo g生成静态网页，然后输入hexo s打开本地服务器 hexo g hexo s 5. 注册Github账号创建个人仓库接下来就去注册一个github账号，用来存放我们的网站。 打开https://github.com/，新建一个项目仓库New repository，如下所示： 然后如下图所示，输入自己的项目名字，后面一定要加.github.io后缀，README初始化也要勾上 要创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是http://xxxx.github.io，其中xxx就是你注册GitHub的用户名。例如我的：http://LuckyZmj.github.io 6. 生成SSH添加到GitHub生成SSH添加到GitHub，连接Github与本地。右键打开git bash here，然后输入下面命令： git config --global user.name \"注册GitHub用户名\" git config --global user.email \"注册GitHub的邮箱\" 用以下两条，检查一下你有没有输对 git config user.name git config user.email 然后创建SSH,一路回车 ssh-keygen -t rsa -C \"注册GitHub的邮箱\" 这个时候它会告诉你已经生成了.ssh的文件夹。在git bash中输入 cat ~/.ssh/id_rsa.pub 将输出的内容复制到框中，点击确定保存。 打开github，在头像下面点击settings，再点击SSH and GPG keys，新建一个SSH，名字随便取一个都可以，把你的id_rsa.pub里面的信息复制进去。如图： 在git bash输入ssh -T git@github.com，如果如下图所示，出现你的用户名，那就成功了。 ssh -T git@github.com 7. 将hexo部署到GitHub将hexo生成的文章部署到GitHub上，打开博客根目录下的_config.yml文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息。找到如下配置进行修改： deploy: type: git repository: https://github.com/LuckyZmj/LuckyZmj.github.io branch: master repository修改为你自己的github项目地址即可，就是部署时，告诉工具，将生成网页通过git方式上传到你对应的链接仓库中。 这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。 npm install hexo-deployer-git --save 然后就可以部署提交到github，过一会儿就可以在http://yourname.github.io 这个网站看到你的博客了 hexo clean hexo generate hexo deploy 其中 hexo clean清除了你之前生成的东西。 hexo generate，生成静态文章，可以用 hexo g缩写 ，hexo deploy部署文章，可以用hexo d缩写 注意deploy时可能要你输入username和password。 8. 写文章和发布文章首先在博客根目录下右键打开git bash here，安装一个扩展npm i hexo-deployer-git。 npm i hexo-deployer-git 然后输入hexo new post \"article title\"，新建一篇文章。 hexo new post \"article title\" 然后打开E:\\MyBlog\\source\\_posts的目录，可以发现下面多了一个文件夹和一个.md文件，一个用来存放你的图片等数据，另一个就是你的文章文件。 另外推荐直接使用有道云编写markdown文章，不仅可以实时预览，还可以快捷的生成markdown语法格式，具体效果如下图所示。 编写完markdown文件后，根目录下输入hexo g生成静态网页，然后输入hexo s可以本地预览效果，最后输入hexo d上传到github上。这时打开你的github.io主页就能看到发布的文章了。 到此为止，Hexo初级搭建就已经完成了。 0x004 Hexo 优化定制 1. Hexo相关目录文件1.1 博客目录构成介绍node_modules是node.js各种库的目录，public是生成的网页文件目录，scaffolds里面就三个文件，存储着新文章和新页面的初始设置，source是我们最常用到的一个目录，里面存放着文章、各类页面、图像等文件，themes存放着主题文件，一般也用不到。 我们平时写文章只需要关注source/_posts这个文件夹就行了。 - node_modules - public - scaffolds - source - _data - _posts - about - archives - categories - friends - tags - themes 1.2 hexo基本配置在文件根目录下的_config.yml，就是整个hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的配置描述。 1.2.1 网站参数描述title网站标题subtitle网站副标题description网站描述author您的名字language网站使用的语言timezone网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。 1.2.2 网址参数描述url网址root网站根目录 permalink文章的永久链接格式permalink_defaults永久链接中各部分的默认值 在这里，你需要把url改成你的网站域名。 permalink，也就是你生成某个文章时的那个链接格式。 比如我新建一个文章叫temp.md，那么这个时候他自动生成的地址就是http://yoursite.com/2018/09/05/temp。 以下是官方给出的示例，关于链接的变量还有很多，需要的可以去官网上查找永久链接 。 参数结果 :year/:month/:day/:title /2019/08/10/hello-world :year-:month-:day-:title.html 2019-08-10-hello-world.html :category/:titlefoo /bar/hello-world 2. 定制主题这里推荐作者洪卫的hexo-blog-fly博客主题，该主题是基于hexo-theme-matery优化的，需要把博客相关信息换成您自己的就可以部署了，极大简化了构建博客的工作量和复杂度。 2.1 简单使用方法 安装Git, 安装nodeJS，安装Hexo 你可以直接fork一份源码到你的仓库，clone到本地博客文件夹内 在本地博客仓库运行npm i命令安装依赖包 直接修改配置信息，改成自己的信息 运行命令hexo clean（清除生成文件），hexo g（生成网页）， hexo s（本地预览），hexo d（部署） 2.2 原主题特性: 简单漂亮，文章内容美观易读 Material Design 设计 响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现 首页轮播文章及每天动态切换 Banner 图片 瀑布流式的博客文章列表（文章无特色图片时会有 24 张漂亮的图片代替） 时间轴式的归档页 词云的标签页和雷达图的分类页 丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等） 可自定义的数据的友情链接页面 支持文章置顶和文章打赏 支持 MathJax TOC 目录 可设置复制文章内容时追加版权信息 可设置阅读文章时做密码验证 Gitalk、Gitment、Valine 和 Disqus 评论模块（推荐使用 Gitalk） 集成了不蒜子统计、谷歌分析（Google Analytics）和文章字数统计等功能 支持在首页的音乐播放和视频播放功能 2.3 新增加特性: 修改了原主题的一些很多bug 加入图片懒加载功能，在根目录配置文件开启和关闭 增加留言板功能 在关于板块,加入简历功能页 增加视听[视觉听觉影音]板块 支持emoji表情，用markdown emoji语法书写直接生成对应的能跳跃的表情。 增加网站运行时间显示 增加动漫模型 整体替换Banner图片和文章特色图片 增加分类相册功能 修改了一些控件的参数 修改部分样式,比如: 文章卡片,固定高度,使其不至于因为文章摘要的长短不同导致卡片大小不一使页面布局很不美观,类似的还有友链卡片,优化了页面内容布局,视觉更整齐美观 解决首页文章列表卡片上方 border-radius圆角失效的bug 添加页面樱花飘落动效 添加鼠标点击烟花爆炸动效 加入天气接口控件 加入鼠标点击文字特效 添加页面雪花飘落动效 添加在线聊天插件 调整线聊天插件参数，使之能够随着鼠标滑动位置自适应调整 持续更新… 2.4 切换主题如果想自己动手对hexo-theme-matery优化的话，可以修改Hexo根目录下的 _config.yml的 theme 的值 theme: hexo-theme-matery _config.yml 文件的其它修改建议: 请修改 _config.yml 的 url 的值为你的网站主 URL（如：http://xxx.github.io）。 建议修改两个 per_page 的分页条数值为 6 的倍数，如：12、18 等，这样文章列表在各个屏幕下都能较好的显示。 如果你是中文用户，则建议修改 language 的值为 zh-CN。 2.5 新建分类 categories 页categories 页是用来展示所有分类的页面，如果在你的博客 source 目录下还没有 categories/index.md 文件，那么你就需要新建一个，命令如下： hexo new page \"categories\" 编辑你刚刚新建的页面文件 /source/categories/index.md，至少需要以下内容： --- title: categories date: 2018-09-30 17:25:30 type: \"categories\" layout: \"categories\" --- 2.6 新建标签 tags 页tags 页是用来展示所有标签的页面，如果在你的博客 source 目录下还没有 tags/index.md 文件，那么你就需要新建一个，命令如下： hexo new page \"tags\" 编辑你刚刚新建的页面文件 /source/tags/index.md，至少需要以下内容： --- title: tags date: 2018-09-30 18:23:38 type: \"tags\" layout: \"tags\" --- 2.7 新建关于我 about 页about 页是用来展示关于我和我的博客信息的页面，如果在你的博客 source 目录下还没有 about/index.md 文件，那么你就需要新建一个，命令如下： hexo new page \"about\" 编辑你刚刚新建的页面文件 /source/about/index.md，至少需要以下内容： --- title: about date: 2018-09-30 17:25:30 type: \"about\" layout: \"about\" --- 2.8 新建留言板 contact 页（可选的）contact 页是用来展示留言板信息的页面，前提是已经开启了第三方评论系统才能显示。如果在你的博客 source 目录下还没有 contact/index.md 文件，那么你就需要新建一个，命令如下： hexo new page \"contact\" 编辑你刚刚新建的页面文件 /source/contact/index.md，至少需要以下内容： --- title: contact date: 2018-09-30 17:25:30 type: \"contact\" layout: \"contact\" --- 2.9 新建友情链接 friends 页（可选的）friends 页是用来展示友情链接信息的页面，如果在你的博客 source 目录下还没有 friends/index.md 文件，那么你就需要新建一个，命令如下： hexo new page \"friends\" 编辑你刚刚新建的页面文件 /source/friends/index.md，至少需要以下内容： --- title: friends date: 2018-12-12 21:25:30 type: \"friends\" layout: \"friends\" --- 同时，在你的博客 source 目录下新建 _data 目录，在 _data 目录中新建 friends.json 文件，文件内容如下所示： [{ \"avatar\": \"http://image.luokangyuan.com/1_qq_27922023.jpg\", \"name\": \"码酱\", \"introduction\": \"我不是大佬，只是在追寻大佬的脚步\", \"url\": \"http://luokangyuan.com/\", \"title\": \"前去学习\" }, { \"avatar\": \"http://image.luokangyuan.com/4027734.jpeg\", \"name\": \"闪烁之狐\", \"introduction\": \"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬\", \"url\": \"https://blinkfox.github.io/\", \"title\": \"前去学习\" }, { \"avatar\": \"http://image.luokangyuan.com/avatar.jpg\", \"name\": \"ja_rome\", \"introduction\": \"平凡的脚步也可以走出伟大的行程\", \"url\": \"https://me.csdn.net/jlh912008548\", \"title\": \"前去学习\" }] 2.10 一级菜单导航配置配置基本菜单导航的名称、路径url和图标icon 菜单导航名称可以是中文也可以是英文(如：Index或主页) 图标icon 可以在Font Awesome 中查找 menu: Index: url: / icon: fas fa-home Tags: url: /tags icon: fas fa-tags Categories: url: /categories icon: fas fa-bookmark Archives: url: /archives icon: fas fa-archive About: url: /about icon: fas fa-user-circle Friends: url: /friends icon: fas fa-address-book 2.11 二级菜单配置方法如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作 在需要添加二级菜单的一级菜单下添加children关键字(如:About菜单下添加children) 在children下创建二级菜单的 名称name,路径url和图标icon. 注意每个二级菜单模块前要加 -. 注意缩进格式 menu: Index: url: / icon: fas fa-home Tags: url: /tags icon: fas fa-tags Categories: url: /categories icon: fas fa-bookmark Archives: url: /archives icon: fas fa-archive About: url: /about icon: fas fa-user-circle-o Friends: url: /friends icon: fas fa-address-book Medias: icon: fas fa-list children: - name: Musics url: /musics icon: fas fa-music - name: Movies url: /movies icon: fas fa-film - name: Books url: /books icon: fas fa-book - name: Galleries url: /galleries icon: fas fa-image 执行 hexo clean &amp;&amp; hexo g 重新生成博客文件。 2.12 代码高亮由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 hexo-prism-plugin 的 Hexo 插件来做代码高亮，安装命令如下： npm i -S hexo-prism-plugin 然后，修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 false，并新增 prism 插件相关的配置，主要配置如下： highlight: enable: false prism_plugin: mode: 'preprocess' # realtime/preprocess theme: 'tomorrow' line_number: false # default false custom_css: 更多代码块优化详细内容请访问：http://luckyzmj.cn/posts/1b9a9e28.html 2.13 搜索本主题中还使用到了 hexo-generator-search 的 Hexo 插件来做内容搜索，安装命令如下： npm install hexo-generator-search --save 在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项： search: path: search.xml field: post 2.14 文章字数统计插件（建议安装）如果你想要在文章中显示文章字数、阅读时长信息，可以安装 hexo-wordcount 插件。 安装命令如下： npm i --save hexo-wordcount 然后只需在本主题下的 _config.yml 文件中，将各个文章字数相关的配置激活即可： postInfo: date: true update: false wordCount: false # 设置文章字数统计为 true. totalCount: false # 设置站点文章总字数统计为 true. min2read: false # 阅读时长. readCount: false # 阅读次数. 2.15 添加emoji表情支持（可选的）本主题新增了对emoji表情的支持，使用到了 hexo-filter-github-emojis 的 Hexo 插件来支持 emoji表情的生成，把对应的markdown emoji语法（::,例如：:smile:）转变成会跳跃的emoji表情，安装命令如下： npm install hexo-filter-github-emojis --save 在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项： githubEmojis: enable: true className: github-emoji inject: true styles: customEmojis: 2.16 添加 RSS 订阅支持（可选的）本主题中还使用到了hexo-generator-feed 的 Hexo 插件来做 RSS，安装命令如下： npm install hexo-generator-feed --save 在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项： feed: type: atom path: atom.xml limit: 20 hub: content: content_limit: 140 content_limit_delim: ' ' order_by: -date 执行 hexo clean &amp;&amp; hexo g 重新生成博客文件，然后在 public 文件夹中即可看到 atom.xml 文件，说明你已经安装成功了。 2.17 添加 DaoVoice 在线聊天功能（可选的）前往 DaoVoice 官网注册并且获取 app_id，并将 app_id 填入主题的 _config.yml 文件中。 2.18 添加 Tidio 在线聊天功能（可选的）前往 Tidio 官网注册并且获取 Public Key，并将 Public Key 填入主题的 _config.yml 文件中。 2.19 修改页脚页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 /layout/_partial/footer.ejs 文件中，包括站点、使用的主题、访问量等。 2.20 修改社交链接在主题的 _config.yml 文件中，默认支持 QQ、GitHub 和邮箱等的配置，你可以在主题文件的 /layout/_partial/social-link.ejs 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码： &lt;% if (theme.socialLink.github) { %&gt; &lt;a href=\"&lt;%= theme.socialLink.github %&gt;\" class=\"tooltipped\" target=\"_blank\" data-tooltip=\"访问我的GitHub\" data-position=\"top\" data-delay=\"50\"&gt; &lt;i class=\"fab fa-github\"&gt;&lt;/i&gt; &lt;/a&gt; &lt;% } %&gt; 其中，社交图标（如：fa-github）你可以在 Font Awesome 中搜索找到。以下是常用社交图标的标识，供你参考： Facebook: fab fa-facebook Twitter: fab fa-twitter Google-plus: fab fa-google-plus Linkedin: fab fa-linkedin Tumblr: fab fa-tumblr Medium: fab fa-medium Slack: fab fa-slack Sina Weibo: fab fa-weibo Wechat: fab fa-weixin QQ: fab fa-qq Zhihu: fab fa-zhihu 注意: 本主题中使用的 Font Awesome 版本为 5.11.0。 2.21 修改打赏的二维码图片在主题文件的 source/medias/reward 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。 2.22 配置音乐播放器（可选的）要支持音乐播放，在主题的 _config.yml 配置文件中激活music配置即可 # 是否在首页显示音乐 music: enable: true title: #非吸底模式有效 enable: true show: 听听音乐 server: netease #require music platform: netease, tencent, kugou, xiami, baidu type: playlist #require song, playlist, album, search, artist id: 503838841 #require song id / playlist id / album id / search keyword fixed: false # 开启吸底模式 autoplay: false # 是否自动播放 theme: '#42b983' loop: 'all' # 音频循环播放, 可选值: 'all', 'one', 'none' order: 'random' # 音频循环顺序, 可选值: 'list', 'random' preload: 'auto' # 预加载，可选值: 'none', 'metadata', 'auto' volume: 0.7 # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效 listFolded: true # 列表默认折叠 提示： server可选netease（网易云音乐），tencent（QQ音乐），kugou（酷狗音乐），xiami（虾米音乐），baidu（百度音乐）。 type可选song（歌曲），playlist（歌单），album（专辑），search（搜索关键字），artist（歌手） id获取示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，地址栏有一串数字，playlist的id即为这串数字。 2.23文章 Front-matter 介绍Front-matter 选项中的所有内容均为非必填的。但我仍然建议至少填写 title 和 date 的值。 配置选项 默认值 描述 title Markdown 的文件标题 文章标题，强烈建议填写此选项 date 文件创建时的日期时间 发布时间，强烈建议填写此选项，且最好保证全局唯一 author 根 _config.yml 中的 author 文章作者 img featureImages 中的某个值 文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: http://xxx.com/xxx.jpg top true 推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章 cover false v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中 coverImg 无 v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片 password 无 文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项 toc true 是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项 mathjax false 是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行 summary 无 文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 categories 无 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类 tags 无 文章标签，一篇文章可以多个标签 keywords 文章标题 文章关键字，SEO 时需要 reprintPolicy cc_by 文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个 注意: 如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。 date 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 id 是通过 date 的值来作为唯一标识的。 如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：开源中国在线工具、chahuo、站长工具。 您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则 以下为文章的 Front-matter 示例。最简示例 --- title: typora-vue-theme主题介绍 date: 2018-09-07 09:25:00 --- 最全示例 --- title: theme主题介绍 date: 2018-09-07 09:25:00 author: 赵奇 img: /source/images/xxx.jpg top: true cover: true coverImg: /images/1.jpg password: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92 toc: false mathjax: false summary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要 categories: Markdown tags: - Typora - Markdown --- 2.24 自定制修改在本主题的 _config.yml 中可以修改部分自定义信息，有以下几个部分： 菜单 我的梦想 首页的音乐播放器和视频播放器配置 是否显示推荐文章名称和按钮配置 favicon 和 Logo 个人信息 TOC 目录 文章打赏信息 复制文章内容时追加版权信息 MathJax 文章字数统计、阅读时长 点击页面的’爱心’效果 我的项目 我的技能 我的相册 Gitalk、Gitment、Valine 和 disqus 评论配置 不蒜子统计和谷歌分析（Google Analytics） 默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 hashcode 值取余，来选择展示对应的特色图 我认为个人博客应该都有自己的风格和特色。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 _config.yml 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：修改主题颜色 在主题文件的 /source/css/matery.css 文件中，搜索 .bg-color 来修改背景颜色： /* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */ .bg-color { background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%); } @-webkit-keyframes rainbow { /* 动态切换背景颜色. */ } @keyframes rainbow { /* 动态切换背景颜色. */ } body { /* background-color: #eaeaea; */ /* 增加背景壁纸*/ background: url(\"https://ae01.alicdn.com/kf/H18a4b998752a4ae68b8e85d432a5aef0l.png\"), url(\"http://luckyzmj.cn/img/yun.jpg\") 0px 0px; background-attachment: fixed; margin: 0; color: #34495e; } 2.25 修改 banner 图和文章特色图你可以直接在 /source/medias/banner 文件夹中更换你喜欢的 banner 图片，主题代码中是每天动态切换一张，只需 7 张即可。如果你会 JavaScript 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，banner 切换的代码位置在 /layout/_partial/bg-cover-content.ejs 文件的 &lt;script&gt;&lt;/script&gt; 代码中： $('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)'); 在 /source/medias/featureimages 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 _config.yml 做同步修改。 2.26 优化目录栏在 themes\\Matery\\layout\\_partial\\post-detail-toc.ejs，修改内容如下： .toc-widget { padding-left: 20px; width: 345px; background-color: rgb(255, 255, 255,0.7); border-radius: 10px; box-shadow: 0 10px 35px 2px rgba(0, 0, 0, .15), 0 5px 15px rgba(0, 0, 0, .07), 0 2px 5px -5px rgba(0, 0, 0, .1) !important; } #toc-content { margin-bottom: 20px; } 0x005 更多详细教程以下几篇文章都是基于Hexo框架和hexo-theme-matery主题优化的教程，大家如果遇到问题，可以参考其中的方法。 Hexo+Github博客搭建完全教程 hexo-theme-matery作者教程 Hexo+github搭建博客(超级详细版，精细入微) hexo（matery）背景、滚动条优化+增加点击跳评论","categories":[{"name":"博客篇","slug":"博客篇","permalink":"https://macongmc.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://macongmc.github.io/tags/Hexo/"},{"name":"Github","slug":"Github","permalink":"https://macongmc.github.io/tags/Github/"},{"name":"博客","slug":"博客","permalink":"https://macongmc.github.io/tags/%E5%8D%9A%E5%AE%A2/"}],"author":"Luckey"}],"categories":[{"name":"持续集成","slug":"持续集成","permalink":"https://macongmc.github.io/categories/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90/"},{"name":"Linux","slug":"Linux","permalink":"https://macongmc.github.io/categories/Linux/"},{"name":"xxl-job","slug":"xxl-job","permalink":"https://macongmc.github.io/categories/xxl-job/"},{"name":"工具篇","slug":"工具篇","permalink":"https://macongmc.github.io/categories/%E5%B7%A5%E5%85%B7%E7%AF%87/"},{"name":"分布式事务","slug":"分布式事务","permalink":"https://macongmc.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"},{"name":"API","slug":"API","permalink":"https://macongmc.github.io/categories/API/"},{"name":"延时任务","slug":"延时任务","permalink":"https://macongmc.github.io/categories/%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1/"},{"name":"SDK","slug":"SDK","permalink":"https://macongmc.github.io/categories/SDK/"},{"name":"博客篇","slug":"博客篇","permalink":"https://macongmc.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"},{"name":"前端篇","slug":"前端篇","permalink":"https://macongmc.github.io/categories/%E5%89%8D%E7%AB%AF%E7%AF%87/"}],"tags":[{"name":"Jenkins","slug":"Jenkins","permalink":"https://macongmc.github.io/tags/Jenkins/"},{"name":"linux","slug":"linux","permalink":"https://macongmc.github.io/tags/linux/"},{"name":"多版本jdk","slug":"多版本jdk","permalink":"https://macongmc.github.io/tags/%E5%A4%9A%E7%89%88%E6%9C%ACjdk/"},{"name":"api","slug":"api","permalink":"https://macongmc.github.io/tags/api/"},{"name":"计算","slug":"计算","permalink":"https://macongmc.github.io/tags/%E8%AE%A1%E7%AE%97/"},{"name":"事务","slug":"事务","permalink":"https://macongmc.github.io/tags/%E4%BA%8B%E5%8A%A1/"},{"name":"springcloud alibaba","slug":"springcloud-alibaba","permalink":"https://macongmc.github.io/tags/springcloud-alibaba/"},{"name":"搜索引擎","slug":"搜索引擎","permalink":"https://macongmc.github.io/tags/%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"},{"name":"kafka","slug":"kafka","permalink":"https://macongmc.github.io/tags/kafka/"},{"name":"消息队列","slug":"消息队列","permalink":"https://macongmc.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"},{"name":"redis","slug":"redis","permalink":"https://macongmc.github.io/tags/redis/"},{"name":"word","slug":"word","permalink":"https://macongmc.github.io/tags/word/"},{"name":"html","slug":"html","permalink":"https://macongmc.github.io/tags/html/"},{"name":"阿里云","slug":"阿里云","permalink":"https://macongmc.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"},{"name":"内容安全","slug":"内容安全","permalink":"https://macongmc.github.io/tags/%E5%86%85%E5%AE%B9%E5%AE%89%E5%85%A8/"},{"name":"机审核","slug":"机审核","permalink":"https://macongmc.github.io/tags/%E6%9C%BA%E5%AE%A1%E6%A0%B8/"},{"name":"存储","slug":"存储","permalink":"https://macongmc.github.io/tags/%E5%AD%98%E5%82%A8/"},{"name":"工具使用","slug":"工具使用","permalink":"https://macongmc.github.io/tags/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"},{"name":"sdk","slug":"sdk","permalink":"https://macongmc.github.io/tags/sdk/"},{"name":"java","slug":"java","permalink":"https://macongmc.github.io/tags/java/"},{"name":"aop","slug":"aop","permalink":"https://macongmc.github.io/tags/aop/"},{"name":"注解","slug":"注解","permalink":"https://macongmc.github.io/tags/%E6%B3%A8%E8%A7%A3/"},{"name":"映射","slug":"映射","permalink":"https://macongmc.github.io/tags/%E6%98%A0%E5%B0%84/"},{"name":"hexo-blog-lucky","slug":"hexo-blog-lucky","permalink":"https://macongmc.github.io/tags/hexo-blog-lucky/"},{"name":"博客搭建教程","slug":"博客搭建教程","permalink":"https://macongmc.github.io/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B/"},{"name":"jQuery+CSS3","slug":"jQuery-CSS3","permalink":"https://macongmc.github.io/tags/jQuery-CSS3/"},{"name":"粒子特效","slug":"粒子特效","permalink":"https://macongmc.github.io/tags/%E7%B2%92%E5%AD%90%E7%89%B9%E6%95%88/"},{"name":"PicGo","slug":"PicGo","permalink":"https://macongmc.github.io/tags/PicGo/"},{"name":"GitHub图床","slug":"GitHub图床","permalink":"https://macongmc.github.io/tags/GitHub%E5%9B%BE%E5%BA%8A/"},{"name":"Hexo","slug":"Hexo","permalink":"https://macongmc.github.io/tags/Hexo/"},{"name":"博客","slug":"博客","permalink":"https://macongmc.github.io/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Github","slug":"Github","permalink":"https://macongmc.github.io/tags/Github/"}]}